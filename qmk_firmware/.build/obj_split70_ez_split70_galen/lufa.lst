   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB124:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  71:./tmk_core/protocol/lufa/lufa.c **** #endif
  72:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  74:./tmk_core/protocol/lufa/lufa.c **** #endif
  75:./tmk_core/protocol/lufa/lufa.c **** 
  76:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  77:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  78:./tmk_core/protocol/lufa/lufa.c **** #endif
  79:./tmk_core/protocol/lufa/lufa.c **** 
  80:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  81:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  82:./tmk_core/protocol/lufa/lufa.c **** #endif
  83:./tmk_core/protocol/lufa/lufa.c **** 
  84:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  85:./tmk_core/protocol/lufa/lufa.c ****   #include "sysex_tools.h"
  86:./tmk_core/protocol/lufa/lufa.c **** #endif
  87:./tmk_core/protocol/lufa/lufa.c **** 
  88:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  89:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  90:./tmk_core/protocol/lufa/lufa.c **** #endif
  91:./tmk_core/protocol/lufa/lufa.c **** 
  92:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  93:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  94:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  95:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  96:./tmk_core/protocol/lufa/lufa.c **** 
  97:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  98:./tmk_core/protocol/lufa/lufa.c **** 
  99:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 100:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 101:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device);
 102:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device);
 103:./tmk_core/protocol/lufa/lufa.c **** #endif
 104:./tmk_core/protocol/lufa/lufa.c **** 
 105:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 106:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 107:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 108:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 109:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 110:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 111:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 112:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 113:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 114:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 115:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 116:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 117:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 118:./tmk_core/protocol/lufa/lufa.c ****     usb_send_func,
 119:./tmk_core/protocol/lufa/lufa.c ****     usb_get_midi,
 120:./tmk_core/protocol/lufa/lufa.c ****     midi_usb_init
 121:./tmk_core/protocol/lufa/lufa.c **** #endif
 122:./tmk_core/protocol/lufa/lufa.c **** };
 123:./tmk_core/protocol/lufa/lufa.c **** 
 124:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 125:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 126:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 127:./tmk_core/protocol/lufa/lufa.c **** 
 128:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 129:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 130:./tmk_core/protocol/lufa/lufa.c **** {
 131:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 132:./tmk_core/protocol/lufa/lufa.c ****   {
 133:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 134:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 135:./tmk_core/protocol/lufa/lufa.c ****     {
 136:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 137:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 138:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 139:./tmk_core/protocol/lufa/lufa.c ****     },
 140:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 141:./tmk_core/protocol/lufa/lufa.c ****     {
 142:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 143:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 144:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 145:./tmk_core/protocol/lufa/lufa.c ****     },
 146:./tmk_core/protocol/lufa/lufa.c ****   },
 147:./tmk_core/protocol/lufa/lufa.c **** };
 148:./tmk_core/protocol/lufa/lufa.c **** 
 149:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_START_OR_CONT 0x40
 150:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_1 0x50
 151:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_2 0x60
 152:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_3 0x70
 153:./tmk_core/protocol/lufa/lufa.c **** 
 154:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_1 0x50
 155:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_2 0x20
 156:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_3 0x30
 157:./tmk_core/protocol/lufa/lufa.c **** #endif
 158:./tmk_core/protocol/lufa/lufa.c **** 
 159:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 160:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 161:./tmk_core/protocol/lufa/lufa.c **** {
 162:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 163:./tmk_core/protocol/lufa/lufa.c ****   {
 164:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 165:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 166:./tmk_core/protocol/lufa/lufa.c ****     {
 167:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 168:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 169:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 170:./tmk_core/protocol/lufa/lufa.c ****     },
 171:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 172:./tmk_core/protocol/lufa/lufa.c ****     {
 173:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 174:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 175:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 176:./tmk_core/protocol/lufa/lufa.c ****     },
 177:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 178:./tmk_core/protocol/lufa/lufa.c ****     {
 179:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 180:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 181:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 182:./tmk_core/protocol/lufa/lufa.c ****     },
 183:./tmk_core/protocol/lufa/lufa.c ****   },
 184:./tmk_core/protocol/lufa/lufa.c **** };
 185:./tmk_core/protocol/lufa/lufa.c **** #endif
 186:./tmk_core/protocol/lufa/lufa.c **** 
 187:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 188:./tmk_core/protocol/lufa/lufa.c **** 
 189:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 190:./tmk_core/protocol/lufa/lufa.c **** {
 191:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 192:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 193:./tmk_core/protocol/lufa/lufa.c **** 	{
 194:./tmk_core/protocol/lufa/lufa.c **** 		return;
 195:./tmk_core/protocol/lufa/lufa.c **** 	}
 196:./tmk_core/protocol/lufa/lufa.c **** 
 197:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 198:./tmk_core/protocol/lufa/lufa.c **** 	{
 199:./tmk_core/protocol/lufa/lufa.c **** 		return;
 200:./tmk_core/protocol/lufa/lufa.c **** 	}
 201:./tmk_core/protocol/lufa/lufa.c **** 
 202:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 203:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 204:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 205:./tmk_core/protocol/lufa/lufa.c **** 
 206:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 207:./tmk_core/protocol/lufa/lufa.c **** 
 208:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 209:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 210:./tmk_core/protocol/lufa/lufa.c **** 	{
 211:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 212:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 213:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 214:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 215:./tmk_core/protocol/lufa/lufa.c **** 	}
 216:./tmk_core/protocol/lufa/lufa.c **** 
 217:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 218:./tmk_core/protocol/lufa/lufa.c **** }
 219:./tmk_core/protocol/lufa/lufa.c **** 
 220:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 221:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 222:./tmk_core/protocol/lufa/lufa.c **** {
 223:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 224:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 225:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 226:./tmk_core/protocol/lufa/lufa.c **** }
 227:./tmk_core/protocol/lufa/lufa.c **** 
 228:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 229:./tmk_core/protocol/lufa/lufa.c **** {
 230:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 231:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 232:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 233:./tmk_core/protocol/lufa/lufa.c **** 
 234:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 235:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 236:./tmk_core/protocol/lufa/lufa.c **** 	return;
 237:./tmk_core/protocol/lufa/lufa.c **** 
 238:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 239:./tmk_core/protocol/lufa/lufa.c **** 
 240:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 241:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 242:./tmk_core/protocol/lufa/lufa.c **** 	{
 243:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 244:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 245:./tmk_core/protocol/lufa/lufa.c **** 		{
 246:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 247:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 248:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 249:./tmk_core/protocol/lufa/lufa.c **** 		}
 250:./tmk_core/protocol/lufa/lufa.c **** 
 251:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 252:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 253:./tmk_core/protocol/lufa/lufa.c **** 
 254:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 255:./tmk_core/protocol/lufa/lufa.c **** 		{
 256:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 257:./tmk_core/protocol/lufa/lufa.c **** 		}
 258:./tmk_core/protocol/lufa/lufa.c **** 	}
 259:./tmk_core/protocol/lufa/lufa.c **** }
 260:./tmk_core/protocol/lufa/lufa.c **** #endif
 261:./tmk_core/protocol/lufa/lufa.c **** 
 262:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 263:./tmk_core/protocol/lufa/lufa.c ****  * Console
 264:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 265:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 266:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 267:./tmk_core/protocol/lufa/lufa.c **** {
 268:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 269:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 270:./tmk_core/protocol/lufa/lufa.c ****         return;
 271:./tmk_core/protocol/lufa/lufa.c **** 
 272:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 273:./tmk_core/protocol/lufa/lufa.c **** 
 274:./tmk_core/protocol/lufa/lufa.c **** #if 0
 275:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 276:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 277:./tmk_core/protocol/lufa/lufa.c **** 
 278:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 279:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 280:./tmk_core/protocol/lufa/lufa.c ****     {
 281:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 282:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 283:./tmk_core/protocol/lufa/lufa.c ****         {
 284:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 285:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 286:./tmk_core/protocol/lufa/lufa.c **** 
 287:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 288:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 289:./tmk_core/protocol/lufa/lufa.c **** 
 290:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 291:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 292:./tmk_core/protocol/lufa/lufa.c ****         }
 293:./tmk_core/protocol/lufa/lufa.c **** 
 294:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 295:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 296:./tmk_core/protocol/lufa/lufa.c ****     }
 297:./tmk_core/protocol/lufa/lufa.c **** #endif
 298:./tmk_core/protocol/lufa/lufa.c **** 
 299:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 300:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 301:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 302:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 303:./tmk_core/protocol/lufa/lufa.c ****         return;
 304:./tmk_core/protocol/lufa/lufa.c ****     }
 305:./tmk_core/protocol/lufa/lufa.c **** 
 306:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 307:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 308:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 309:./tmk_core/protocol/lufa/lufa.c **** 
 310:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 311:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 312:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 313:./tmk_core/protocol/lufa/lufa.c ****     }
 314:./tmk_core/protocol/lufa/lufa.c **** 
 315:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 316:./tmk_core/protocol/lufa/lufa.c **** }
 317:./tmk_core/protocol/lufa/lufa.c **** #endif
 318:./tmk_core/protocol/lufa/lufa.c **** 
 319:./tmk_core/protocol/lufa/lufa.c **** 
 320:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 321:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 322:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 323:./tmk_core/protocol/lufa/lufa.c **** /*
 324:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 325:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 326:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 327:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 328:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 329:./tmk_core/protocol/lufa/lufa.c **** */
 330:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 331:./tmk_core/protocol/lufa/lufa.c **** {
 332:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 333:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 334:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 336:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 337:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 338:./tmk_core/protocol/lufa/lufa.c ****     }
 339:./tmk_core/protocol/lufa/lufa.c **** }
 340:./tmk_core/protocol/lufa/lufa.c **** 
 341:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 342:./tmk_core/protocol/lufa/lufa.c **** {
 343:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 344:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 345:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 346:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 347:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 348:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 349:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 350:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 351:./tmk_core/protocol/lufa/lufa.c ****     }
 352:./tmk_core/protocol/lufa/lufa.c **** */
 353:./tmk_core/protocol/lufa/lufa.c **** }
 354:./tmk_core/protocol/lufa/lufa.c **** 
 355:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 356:./tmk_core/protocol/lufa/lufa.c **** {
 357:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 358:./tmk_core/protocol/lufa/lufa.c **** }
 359:./tmk_core/protocol/lufa/lufa.c **** 
 360:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 361:./tmk_core/protocol/lufa/lufa.c **** {
 362:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 363:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 364:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 365:./tmk_core/protocol/lufa/lufa.c **** #endif
 366:./tmk_core/protocol/lufa/lufa.c **** }
 367:./tmk_core/protocol/lufa/lufa.c **** 
 368:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 369:./tmk_core/protocol/lufa/lufa.c **** {
 370:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 371:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 372:./tmk_core/protocol/lufa/lufa.c **** 
 373:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 374:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 375:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 376:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 377:./tmk_core/protocol/lufa/lufa.c **** #endif
 378:./tmk_core/protocol/lufa/lufa.c **** }
 379:./tmk_core/protocol/lufa/lufa.c **** 
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** 
 382:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 383:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 384:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 385:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 386:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 387:./tmk_core/protocol/lufa/lufa.c ****   } \
 388:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 389:./tmk_core/protocol/lufa/lufa.c **** 
 390:./tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 391:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 392:./tmk_core/protocol/lufa/lufa.c **** {
 393:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 394:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 395:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 396:./tmk_core/protocol/lufa/lufa.c **** 
 397:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 398:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 399:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 400:./tmk_core/protocol/lufa/lufa.c **** }
 401:./tmk_core/protocol/lufa/lufa.c **** 
 402:./tmk_core/protocol/lufa/lufa.c **** #endif
 403:./tmk_core/protocol/lufa/lufa.c **** 
 404:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 405:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 406:./tmk_core/protocol/lufa/lufa.c ****  *
 407:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 408:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 409:./tmk_core/protocol/lufa/lufa.c ****  */
 410:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 411:./tmk_core/protocol/lufa/lufa.c **** {
 412:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 413:./tmk_core/protocol/lufa/lufa.c **** 
 414:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 415:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 416:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 417:./tmk_core/protocol/lufa/lufa.c **** 
 418:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 419:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 420:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 421:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 422:./tmk_core/protocol/lufa/lufa.c **** #endif
 423:./tmk_core/protocol/lufa/lufa.c **** 
 424:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 425:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 426:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 427:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 428:./tmk_core/protocol/lufa/lufa.c **** #endif
 429:./tmk_core/protocol/lufa/lufa.c **** 
 430:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 431:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 432:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 433:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 434:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 435:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 436:./tmk_core/protocol/lufa/lufa.c **** #endif
 437:./tmk_core/protocol/lufa/lufa.c **** 
 438:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 439:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 440:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 441:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 442:./tmk_core/protocol/lufa/lufa.c **** #if 0
 443:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 444:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 445:./tmk_core/protocol/lufa/lufa.c **** #endif
 446:./tmk_core/protocol/lufa/lufa.c **** #endif
 447:./tmk_core/protocol/lufa/lufa.c **** 
 448:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 449:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 450:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 451:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 452:./tmk_core/protocol/lufa/lufa.c **** #endif
 453:./tmk_core/protocol/lufa/lufa.c **** 
 454:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 455:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 457:./tmk_core/protocol/lufa/lufa.c **** #endif
 458:./tmk_core/protocol/lufa/lufa.c **** 
 459:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 460:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 461:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 462:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 463:./tmk_core/protocol/lufa/lufa.c **** #endif
 464:./tmk_core/protocol/lufa/lufa.c **** }
 465:./tmk_core/protocol/lufa/lufa.c **** 
 466:./tmk_core/protocol/lufa/lufa.c **** /*
 467:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 468:./tmk_core/protocol/lufa/lufa.c **** 
 469:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 470:./tmk_core/protocol/lufa/lufa.c **** 
 471:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 472:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 473:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 474:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 475:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 476:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 477:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 478:./tmk_core/protocol/lufa/lufa.c **** */
 479:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 480:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 481:./tmk_core/protocol/lufa/lufa.c ****  */
 482:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 483:./tmk_core/protocol/lufa/lufa.c **** {
 484:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 485:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 486:./tmk_core/protocol/lufa/lufa.c **** 
 487:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 488:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 489:./tmk_core/protocol/lufa/lufa.c ****     {
 490:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 491:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 492:./tmk_core/protocol/lufa/lufa.c ****             {
 493:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 494:./tmk_core/protocol/lufa/lufa.c **** 
 495:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 496:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 497:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 498:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 499:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 500:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 501:./tmk_core/protocol/lufa/lufa.c ****                     break;
 502:./tmk_core/protocol/lufa/lufa.c ****                 }
 503:./tmk_core/protocol/lufa/lufa.c **** 
 504:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 505:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 506:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 507:./tmk_core/protocol/lufa/lufa.c ****             }
 508:./tmk_core/protocol/lufa/lufa.c **** 
 509:./tmk_core/protocol/lufa/lufa.c ****             break;
 510:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 511:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 512:./tmk_core/protocol/lufa/lufa.c ****             {
 513:./tmk_core/protocol/lufa/lufa.c **** 
 514:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 515:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 516:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 517:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 518:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 519:./tmk_core/protocol/lufa/lufa.c **** #endif
 520:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 521:./tmk_core/protocol/lufa/lufa.c **** 
 522:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 523:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 524:./tmk_core/protocol/lufa/lufa.c ****                           return;
 525:./tmk_core/protocol/lufa/lufa.c ****                     }
 526:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 527:./tmk_core/protocol/lufa/lufa.c **** 
 528:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 529:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 530:./tmk_core/protocol/lufa/lufa.c ****                     break;
 531:./tmk_core/protocol/lufa/lufa.c ****                 }
 532:./tmk_core/protocol/lufa/lufa.c **** 
 533:./tmk_core/protocol/lufa/lufa.c ****             }
 534:./tmk_core/protocol/lufa/lufa.c **** 
 535:./tmk_core/protocol/lufa/lufa.c ****             break;
 536:./tmk_core/protocol/lufa/lufa.c **** 
 537:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 538:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 539:./tmk_core/protocol/lufa/lufa.c ****             {
 540:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 542:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 543:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 544:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 545:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 546:./tmk_core/protocol/lufa/lufa.c ****                 }
 547:./tmk_core/protocol/lufa/lufa.c ****             }
 548:./tmk_core/protocol/lufa/lufa.c **** 
 549:./tmk_core/protocol/lufa/lufa.c ****             break;
 550:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 551:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 552:./tmk_core/protocol/lufa/lufa.c ****             {
 553:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 554:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 555:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 556:./tmk_core/protocol/lufa/lufa.c **** 
 557:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 558:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 559:./tmk_core/protocol/lufa/lufa.c ****                 }
 560:./tmk_core/protocol/lufa/lufa.c ****             }
 561:./tmk_core/protocol/lufa/lufa.c **** 
 562:./tmk_core/protocol/lufa/lufa.c ****             break;
 563:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 564:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 565:./tmk_core/protocol/lufa/lufa.c ****             {
 566:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 567:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 568:./tmk_core/protocol/lufa/lufa.c **** 
 569:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 570:./tmk_core/protocol/lufa/lufa.c ****             }
 571:./tmk_core/protocol/lufa/lufa.c **** 
 572:./tmk_core/protocol/lufa/lufa.c ****             break;
 573:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 574:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 575:./tmk_core/protocol/lufa/lufa.c ****             {
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 577:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 578:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 579:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 580:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 581:./tmk_core/protocol/lufa/lufa.c ****             }
 582:./tmk_core/protocol/lufa/lufa.c **** 
 583:./tmk_core/protocol/lufa/lufa.c ****             break;
 584:./tmk_core/protocol/lufa/lufa.c ****     }
 585:./tmk_core/protocol/lufa/lufa.c **** 
 586:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 587:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 588:./tmk_core/protocol/lufa/lufa.c **** #endif
 589:./tmk_core/protocol/lufa/lufa.c **** }
 590:./tmk_core/protocol/lufa/lufa.c **** 
 591:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 592:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 593:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 594:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 595:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 595 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 596:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 597:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 597 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23               	/* epilogue start */
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE124:
  28               		.section	.text.send_consumer,"ax",@progbits
  30               	send_consumer:
  31               	.LFB128:
 598:./tmk_core/protocol/lufa/lufa.c **** 
 599:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 600:./tmk_core/protocol/lufa/lufa.c **** {
 601:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 602:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 603:./tmk_core/protocol/lufa/lufa.c **** 
 604:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 605:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 606:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 607:./tmk_core/protocol/lufa/lufa.c ****         for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 608:./tmk_core/protocol/lufa/lufa.c ****             bluefruit_serial_send(report->raw[i]);
 609:./tmk_core/protocol/lufa/lufa.c ****         }
 610:./tmk_core/protocol/lufa/lufa.c ****     }
 611:./tmk_core/protocol/lufa/lufa.c **** #endif
 612:./tmk_core/protocol/lufa/lufa.c **** 
 613:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 614:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_ADAFRUIT_BLE) {
 615:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 616:./tmk_core/protocol/lufa/lufa.c ****     }
 617:./tmk_core/protocol/lufa/lufa.c **** #endif
 618:./tmk_core/protocol/lufa/lufa.c **** 
 619:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 620:./tmk_core/protocol/lufa/lufa.c ****       return;
 621:./tmk_core/protocol/lufa/lufa.c ****     }
 622:./tmk_core/protocol/lufa/lufa.c **** 
 623:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 624:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 625:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 626:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 627:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 630:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 631:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 632:./tmk_core/protocol/lufa/lufa.c **** 
 633:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 634:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 635:./tmk_core/protocol/lufa/lufa.c ****     }
 636:./tmk_core/protocol/lufa/lufa.c ****     else
 637:./tmk_core/protocol/lufa/lufa.c **** #endif
 638:./tmk_core/protocol/lufa/lufa.c ****     {
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 640:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 641:./tmk_core/protocol/lufa/lufa.c **** 
 642:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 643:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 644:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 645:./tmk_core/protocol/lufa/lufa.c **** 
 646:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 647:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 648:./tmk_core/protocol/lufa/lufa.c ****     }
 649:./tmk_core/protocol/lufa/lufa.c **** 
 650:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 651:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 652:./tmk_core/protocol/lufa/lufa.c **** 
 653:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 654:./tmk_core/protocol/lufa/lufa.c **** }
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 657:./tmk_core/protocol/lufa/lufa.c **** {
 658:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 659:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 660:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 661:./tmk_core/protocol/lufa/lufa.c **** 
 662:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 663:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 664:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 665:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 666:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 667:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->buttons);
 668:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->x);
 669:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->y);
 670:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->v); // should try sending the wheel v here
 671:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->h); // should try sending the wheel h here
 672:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 673:./tmk_core/protocol/lufa/lufa.c ****     }
 674:./tmk_core/protocol/lufa/lufa.c **** #endif
 675:./tmk_core/protocol/lufa/lufa.c **** 
 676:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 677:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_ADAFRUIT_BLE) {
 678:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 679:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h);
 680:./tmk_core/protocol/lufa/lufa.c ****     }
 681:./tmk_core/protocol/lufa/lufa.c **** #endif
 682:./tmk_core/protocol/lufa/lufa.c **** 
 683:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 684:./tmk_core/protocol/lufa/lufa.c ****       return;
 685:./tmk_core/protocol/lufa/lufa.c ****     }
 686:./tmk_core/protocol/lufa/lufa.c **** 
 687:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 688:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 689:./tmk_core/protocol/lufa/lufa.c **** 
 690:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 691:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 692:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 693:./tmk_core/protocol/lufa/lufa.c **** 
 694:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 695:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 696:./tmk_core/protocol/lufa/lufa.c **** 
 697:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 698:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 699:./tmk_core/protocol/lufa/lufa.c **** #endif
 700:./tmk_core/protocol/lufa/lufa.c **** }
 701:./tmk_core/protocol/lufa/lufa.c **** 
 702:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 703:./tmk_core/protocol/lufa/lufa.c **** {
 704:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 707:./tmk_core/protocol/lufa/lufa.c ****         return;
 708:./tmk_core/protocol/lufa/lufa.c **** 
 709:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 710:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 711:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 712:./tmk_core/protocol/lufa/lufa.c ****     };
 713:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 714:./tmk_core/protocol/lufa/lufa.c **** 
 715:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 716:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 717:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 718:./tmk_core/protocol/lufa/lufa.c **** 
 719:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 720:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 721:./tmk_core/protocol/lufa/lufa.c **** }
 722:./tmk_core/protocol/lufa/lufa.c **** 
 723:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 724:./tmk_core/protocol/lufa/lufa.c **** {
  32               		.loc 1 724 0
  33               		.cfi_startproc
  34               	.LVL0:
  35 0000 0F93      		push r16
  36               	.LCFI0:
  37               		.cfi_def_cfa_offset 3
  38               		.cfi_offset 16, -2
  39 0002 1F93      		push r17
  40               	.LCFI1:
  41               		.cfi_def_cfa_offset 4
  42               		.cfi_offset 17, -3
  43 0004 CF93      		push r28
  44               	.LCFI2:
  45               		.cfi_def_cfa_offset 5
  46               		.cfi_offset 28, -4
  47 0006 DF93      		push r29
  48               	.LCFI3:
  49               		.cfi_def_cfa_offset 6
  50               		.cfi_offset 29, -5
  51 0008 00D0      		rcall .
  52 000a 1F92      		push __zero_reg__
  53               	.LCFI4:
  54               		.cfi_def_cfa_offset 9
  55 000c CDB7      		in r28,__SP_L__
  56 000e DEB7      		in r29,__SP_H__
  57               	.LCFI5:
  58               		.cfi_def_cfa_register 28
  59               	/* prologue: function */
  60               	/* frame size = 3 */
  61               	/* stack size = 7 */
  62               	.L__stack_usage = 7
  63 0010 8C01      		movw r16,r24
  64               	.LVL1:
 725:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 726:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  65               		.loc 1 726 0
  66 0012 0E94 0000 		call where_to_send
  67               	.LVL2:
 727:./tmk_core/protocol/lufa/lufa.c **** 
 728:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 729:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 730:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 731:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 732:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 733:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 734:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 735:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 736:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 737:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 738:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 739:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 740:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 741:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 742:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 743:./tmk_core/protocol/lufa/lufa.c ****     }
 744:./tmk_core/protocol/lufa/lufa.c **** #endif
 745:./tmk_core/protocol/lufa/lufa.c **** 
 746:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 747:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_ADAFRUIT_BLE) {
 748:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_consumer_key(data, 0);
 749:./tmk_core/protocol/lufa/lufa.c ****     }
 750:./tmk_core/protocol/lufa/lufa.c **** #endif
 751:./tmk_core/protocol/lufa/lufa.c **** 
 752:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  68               		.loc 1 752 0
  69 0016 8230      		cpi r24,lo8(2)
  70 0018 01F0      		breq .L3
  71               		.loc 1 752 0 is_stmt 0 discriminator 1
  72 001a 8530      		cpi r24,lo8(5)
  73 001c 01F4      		brne .L2
  74               	.L3:
 753:./tmk_core/protocol/lufa/lufa.c ****       return;
 754:./tmk_core/protocol/lufa/lufa.c ****     }
 755:./tmk_core/protocol/lufa/lufa.c **** 
 756:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  75               		.loc 1 756 0 is_stmt 1
  76 001e 83E0      		ldi r24,lo8(3)
  77               	.LVL3:
  78 0020 8983      		std Y+1,r24
  79 0022 1B83      		std Y+3,r17
  80 0024 0A83      		std Y+2,r16
  81               	.LVL4:
  82               	.LBB113:
  83               	.LBB114:
  84               		.file 2 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  85               		.loc 2 270 0
  86 0026 8093 E900 		sts 233,r24
  87               	.LVL5:
  88 002a 8FEF      		ldi r24,lo8(-1)
  89               	.LVL6:
  90               	.L5:
  91               	.LBE114:
  92               	.LBE113:
  93               	.LBB115:
  94               	.LBB116:
 271:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  95               		.loc 2 360 0
  96 002c 9091 E800 		lds r25,232
  97 0030 8150      		subi r24,lo8(-(-1))
  98               	.LVL7:
  99               	.LBE116:
 100               	.LBE115:
 757:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 758:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 759:./tmk_core/protocol/lufa/lufa.c ****     };
 760:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 761:./tmk_core/protocol/lufa/lufa.c **** 
 762:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 763:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 101               		.loc 1 763 0
 102 0032 95FD      		sbrc r25,5
 103 0034 00C0      		rjmp .L6
 104               	.LVL8:
 105               	.LBB117:
 106               	.LBB118:
 107               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 108               		.loc 3 276 0
 109 0036 95ED      		ldi r25,lo8(-43)
 110 0038 9A95      	1:	dec r25
 111 003a 01F4      		brne 1b
 112 003c 0000      		nop
 113               	.LVL9:
 114               	.LBE118:
 115               	.LBE117:
 116               		.loc 1 763 0
 117 003e 8111      		cpse r24,__zero_reg__
 118 0040 00C0      		rjmp .L5
 119               	.LVL10:
 120               	.L6:
 121               	.LBB119:
 122               	.LBB120:
 123               		.loc 2 360 0
 124 0042 8091 E800 		lds r24,232
 125               	.LBE120:
 126               	.LBE119:
 764:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 127               		.loc 1 764 0
 128 0046 85FF      		sbrs r24,5
 129 0048 00C0      		rjmp .L2
 765:./tmk_core/protocol/lufa/lufa.c **** 
 766:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 130               		.loc 1 766 0
 131 004a 50E0      		ldi r21,0
 132 004c 40E0      		ldi r20,0
 133 004e 63E0      		ldi r22,lo8(3)
 134 0050 70E0      		ldi r23,0
 135 0052 CE01      		movw r24,r28
 136 0054 0196      		adiw r24,1
 137 0056 0E94 0000 		call Endpoint_Write_Stream_LE
 138               	.LVL11:
 139               	.LBB121:
 140               	.LBB122:
 361:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 141               		.loc 2 456 0
 142 005a 8091 E800 		lds r24,232
 143 005e 8E77      		andi r24,lo8(126)
 144 0060 8093 E800 		sts 232,r24
 145               	.LVL12:
 146               	.L2:
 147               	/* epilogue start */
 148               	.LBE122:
 149               	.LBE121:
 767:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 768:./tmk_core/protocol/lufa/lufa.c **** }
 150               		.loc 1 768 0
 151 0064 0F90      		pop __tmp_reg__
 152 0066 0F90      		pop __tmp_reg__
 153 0068 0F90      		pop __tmp_reg__
 154 006a DF91      		pop r29
 155 006c CF91      		pop r28
 156 006e 1F91      		pop r17
 157 0070 0F91      		pop r16
 158               	.LVL13:
 159 0072 0895      		ret
 160               		.cfi_endproc
 161               	.LFE128:
 163               		.section	.text.send_system,"ax",@progbits
 165               	send_system:
 166               	.LFB127:
 703:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 167               		.loc 1 703 0
 168               		.cfi_startproc
 169               	.LVL14:
 170 0000 CF93      		push r28
 171               	.LCFI6:
 172               		.cfi_def_cfa_offset 3
 173               		.cfi_offset 28, -2
 174 0002 DF93      		push r29
 175               	.LCFI7:
 176               		.cfi_def_cfa_offset 4
 177               		.cfi_offset 29, -3
 178 0004 00D0      		rcall .
 179 0006 1F92      		push __zero_reg__
 180               	.LCFI8:
 181               		.cfi_def_cfa_offset 7
 182 0008 CDB7      		in r28,__SP_L__
 183 000a DEB7      		in r29,__SP_H__
 184               	.LCFI9:
 185               		.cfi_def_cfa_register 28
 186               	/* prologue: function */
 187               	/* frame size = 3 */
 188               	/* stack size = 5 */
 189               	.L__stack_usage = 5
 190               	.LVL15:
 706:./tmk_core/protocol/lufa/lufa.c ****         return;
 191               		.loc 1 706 0
 192 000c 2091 0000 		lds r18,USB_DeviceState
 193 0010 2430      		cpi r18,lo8(4)
 194 0012 01F4      		brne .L18
 709:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 195               		.loc 1 709 0
 196 0014 22E0      		ldi r18,lo8(2)
 197 0016 2983      		std Y+1,r18
 711:./tmk_core/protocol/lufa/lufa.c ****     };
 198               		.loc 1 711 0
 199 0018 8058      		subi r24,-128
 200 001a 9109      		sbc r25,__zero_reg__
 201               	.LVL16:
 709:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 202               		.loc 1 709 0
 203 001c 9B83      		std Y+3,r25
 204 001e 8A83      		std Y+2,r24
 205               	.LVL17:
 206               	.LBB123:
 207               	.LBB124:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 208               		.loc 2 270 0
 209 0020 83E0      		ldi r24,lo8(3)
 210               	.LVL18:
 211 0022 8093 E900 		sts 233,r24
 212               	.LVL19:
 213 0026 8FEF      		ldi r24,lo8(-1)
 214               	.LVL20:
 215               	.L20:
 216               	.LBE124:
 217               	.LBE123:
 218               	.LBB125:
 219               	.LBB126:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 220               		.loc 2 360 0
 221 0028 9091 E800 		lds r25,232
 222 002c 8150      		subi r24,lo8(-(-1))
 223               	.LVL21:
 224               	.LBE126:
 225               	.LBE125:
 716:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 226               		.loc 1 716 0
 227 002e 95FD      		sbrc r25,5
 228 0030 00C0      		rjmp .L21
 229               	.LVL22:
 230               	.LBB127:
 231               	.LBB128:
 232               		.loc 3 276 0
 233 0032 95ED      		ldi r25,lo8(-43)
 234 0034 9A95      	1:	dec r25
 235 0036 01F4      		brne 1b
 236 0038 0000      		nop
 237               	.LVL23:
 238               	.LBE128:
 239               	.LBE127:
 716:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 240               		.loc 1 716 0
 241 003a 8111      		cpse r24,__zero_reg__
 242 003c 00C0      		rjmp .L20
 243               	.LVL24:
 244               	.L21:
 245               	.LBB129:
 246               	.LBB130:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 247               		.loc 2 360 0
 248 003e 8091 E800 		lds r24,232
 249               	.LBE130:
 250               	.LBE129:
 717:./tmk_core/protocol/lufa/lufa.c **** 
 251               		.loc 1 717 0
 252 0042 85FF      		sbrs r24,5
 253 0044 00C0      		rjmp .L18
 719:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 254               		.loc 1 719 0
 255 0046 50E0      		ldi r21,0
 256 0048 40E0      		ldi r20,0
 257 004a 63E0      		ldi r22,lo8(3)
 258 004c 70E0      		ldi r23,0
 259 004e CE01      		movw r24,r28
 260 0050 0196      		adiw r24,1
 261 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 262               	.LVL25:
 263               	.LBB131:
 264               	.LBB132:
 265               		.loc 2 456 0
 266 0056 8091 E800 		lds r24,232
 267 005a 8E77      		andi r24,lo8(126)
 268 005c 8093 E800 		sts 232,r24
 269               	.LVL26:
 270               	.L18:
 271               	/* epilogue start */
 272               	.LBE132:
 273               	.LBE131:
 721:./tmk_core/protocol/lufa/lufa.c **** 
 274               		.loc 1 721 0
 275 0060 0F90      		pop __tmp_reg__
 276 0062 0F90      		pop __tmp_reg__
 277 0064 0F90      		pop __tmp_reg__
 278 0066 DF91      		pop r29
 279 0068 CF91      		pop r28
 280 006a 0895      		ret
 281               		.cfi_endproc
 282               	.LFE127:
 284               		.section	.text.send_mouse,"ax",@progbits
 286               	send_mouse:
 287               	.LFB126:
 657:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 288               		.loc 1 657 0
 289               		.cfi_startproc
 290               	.LVL27:
 291 0000 CF93      		push r28
 292               	.LCFI10:
 293               		.cfi_def_cfa_offset 3
 294               		.cfi_offset 28, -2
 295 0002 DF93      		push r29
 296               	.LCFI11:
 297               		.cfi_def_cfa_offset 4
 298               		.cfi_offset 29, -3
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 2 */
 302               	.L__stack_usage = 2
 303 0004 EC01      		movw r28,r24
 304               	.LVL28:
 660:./tmk_core/protocol/lufa/lufa.c **** 
 305               		.loc 1 660 0
 306 0006 0E94 0000 		call where_to_send
 307               	.LVL29:
 683:./tmk_core/protocol/lufa/lufa.c ****       return;
 308               		.loc 1 683 0
 309 000a 8230      		cpi r24,lo8(2)
 310 000c 01F0      		breq .L31
 683:./tmk_core/protocol/lufa/lufa.c ****       return;
 311               		.loc 1 683 0 is_stmt 0 discriminator 1
 312 000e 8530      		cpi r24,lo8(5)
 313 0010 01F4      		brne .L30
 314               	.L31:
 315               	.LVL30:
 316               	.LBB133:
 317               	.LBB134:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 318               		.loc 2 270 0 is_stmt 1
 319 0012 82E0      		ldi r24,lo8(2)
 320               	.LVL31:
 321 0014 8093 E900 		sts 233,r24
 322               	.LVL32:
 323 0018 8FEF      		ldi r24,lo8(-1)
 324               	.LVL33:
 325               	.L33:
 326               	.LBE134:
 327               	.LBE133:
 328               	.LBB135:
 329               	.LBB136:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 330               		.loc 2 360 0
 331 001a 9091 E800 		lds r25,232
 332 001e 8150      		subi r24,lo8(-(-1))
 333               	.LVL34:
 334               	.LBE136:
 335               	.LBE135:
 691:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 336               		.loc 1 691 0
 337 0020 95FD      		sbrc r25,5
 338 0022 00C0      		rjmp .L34
 339               	.LVL35:
 340               	.LBB137:
 341               	.LBB138:
 342               		.loc 3 276 0
 343 0024 95ED      		ldi r25,lo8(-43)
 344 0026 9A95      	1:	dec r25
 345 0028 01F4      		brne 1b
 346 002a 0000      		nop
 347               	.LVL36:
 348               	.LBE138:
 349               	.LBE137:
 691:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 350               		.loc 1 691 0
 351 002c 8111      		cpse r24,__zero_reg__
 352 002e 00C0      		rjmp .L33
 353               	.LVL37:
 354               	.L34:
 355               	.LBB139:
 356               	.LBB140:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 357               		.loc 2 360 0
 358 0030 8091 E800 		lds r24,232
 359               	.LBE140:
 360               	.LBE139:
 692:./tmk_core/protocol/lufa/lufa.c **** 
 361               		.loc 1 692 0
 362 0034 85FF      		sbrs r24,5
 363 0036 00C0      		rjmp .L30
 695:./tmk_core/protocol/lufa/lufa.c **** 
 364               		.loc 1 695 0
 365 0038 50E0      		ldi r21,0
 366 003a 40E0      		ldi r20,0
 367 003c 65E0      		ldi r22,lo8(5)
 368 003e 70E0      		ldi r23,0
 369 0040 CE01      		movw r24,r28
 370 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 371               	.LVL38:
 372               	.LBB141:
 373               	.LBB142:
 374               		.loc 2 456 0
 375 0046 8091 E800 		lds r24,232
 376 004a 8E77      		andi r24,lo8(126)
 377 004c 8093 E800 		sts 232,r24
 378               	.LVL39:
 379               	.L30:
 380               	/* epilogue start */
 381               	.LBE142:
 382               	.LBE141:
 700:./tmk_core/protocol/lufa/lufa.c **** 
 383               		.loc 1 700 0
 384 0050 DF91      		pop r29
 385 0052 CF91      		pop r28
 386               	.LVL40:
 387 0054 0895      		ret
 388               		.cfi_endproc
 389               	.LFE126:
 391               		.section	.text.send_keyboard,"ax",@progbits
 393               	send_keyboard:
 394               	.LFB125:
 600:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 395               		.loc 1 600 0
 396               		.cfi_startproc
 397               	.LVL41:
 398 0000 CF93      		push r28
 399               	.LCFI12:
 400               		.cfi_def_cfa_offset 3
 401               		.cfi_offset 28, -2
 402 0002 DF93      		push r29
 403               	.LCFI13:
 404               		.cfi_def_cfa_offset 4
 405               		.cfi_offset 29, -3
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 2 */
 409               	.L__stack_usage = 2
 410 0004 EC01      		movw r28,r24
 411               	.LVL42:
 602:./tmk_core/protocol/lufa/lufa.c **** 
 412               		.loc 1 602 0
 413 0006 0E94 0000 		call where_to_send
 414               	.LVL43:
 619:./tmk_core/protocol/lufa/lufa.c ****       return;
 415               		.loc 1 619 0
 416 000a 8230      		cpi r24,lo8(2)
 417 000c 01F0      		breq .L50
 619:./tmk_core/protocol/lufa/lufa.c ****       return;
 418               		.loc 1 619 0 is_stmt 0 discriminator 1
 419 000e 8530      		cpi r24,lo8(5)
 420 0010 01F4      		brne .L49
 421               	.L50:
 625:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 422               		.loc 1 625 0 is_stmt 1
 423 0012 8091 0000 		lds r24,keyboard_protocol
 424               	.LVL44:
 425 0016 8823      		tst r24
 426 0018 01F0      		breq .L52
 625:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 427               		.loc 1 625 0 is_stmt 0 discriminator 1
 428 001a 8091 0000 		lds r24,keymap_config
 429 001e 87FF      		sbrs r24,7
 430 0020 00C0      		rjmp .L52
 431               	.LVL45:
 432               	.LBB143:
 433               	.LBB144:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 434               		.loc 2 270 0 is_stmt 1
 435 0022 84E0      		ldi r24,lo8(4)
 436 0024 8093 E900 		sts 233,r24
 437               	.LVL46:
 438 0028 8FEF      		ldi r24,lo8(-1)
 439               	.LVL47:
 440               	.L53:
 441               	.LBE144:
 442               	.LBE143:
 443               	.LBB145:
 444               	.LBB146:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 445               		.loc 2 360 0
 446 002a 9091 E800 		lds r25,232
 447 002e 8150      		subi r24,lo8(-(-1))
 448               	.LVL48:
 449               	.LBE146:
 450               	.LBE145:
 630:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 451               		.loc 1 630 0
 452 0030 95FD      		sbrc r25,5
 453 0032 00C0      		rjmp .L54
 454               	.LVL49:
 455               	.LBB147:
 456               	.LBB148:
 457               		.loc 3 276 0
 458 0034 95E1      		ldi r25,lo8(21)
 459 0036 9A95      	1:	dec r25
 460 0038 01F4      		brne 1b
 461 003a 0000      		nop
 462               	.LVL50:
 463               	.LBE148:
 464               	.LBE147:
 630:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 465               		.loc 1 630 0
 466 003c 8111      		cpse r24,__zero_reg__
 467 003e 00C0      		rjmp .L53
 468               	.LVL51:
 469               	.L54:
 470               	.LBB149:
 471               	.LBB150:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 472               		.loc 2 360 0
 473 0040 8091 E800 		lds r24,232
 474               	.LBE150:
 475               	.LBE149:
 634:./tmk_core/protocol/lufa/lufa.c ****     }
 476               		.loc 1 634 0
 477 0044 50E0      		ldi r21,0
 478 0046 40E0      		ldi r20,0
 479 0048 60E2      		ldi r22,lo8(32)
 480 004a 70E0      		ldi r23,0
 631:./tmk_core/protocol/lufa/lufa.c **** 
 481               		.loc 1 631 0
 482 004c 85FD      		sbrc r24,5
 483 004e 00C0      		rjmp .L82
 484               	.LVL52:
 485               	.L49:
 486               	/* epilogue start */
 654:./tmk_core/protocol/lufa/lufa.c **** 
 487               		.loc 1 654 0
 488 0050 DF91      		pop r29
 489 0052 CF91      		pop r28
 490               	.LVL53:
 491 0054 0895      		ret
 492               	.LVL54:
 493               	.L52:
 494               	.LBB151:
 495               	.LBB152:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 496               		.loc 2 270 0
 497 0056 81E0      		ldi r24,lo8(1)
 498 0058 8093 E900 		sts 233,r24
 499               	.LVL55:
 500 005c 8FEF      		ldi r24,lo8(-1)
 501               	.LVL56:
 502               	.L58:
 503               	.LBE152:
 504               	.LBE151:
 505               	.LBB153:
 506               	.LBB154:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 507               		.loc 2 360 0
 508 005e 9091 E800 		lds r25,232
 509 0062 8150      		subi r24,lo8(-(-1))
 510               	.LVL57:
 511               	.LBE154:
 512               	.LBE153:
 643:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 513               		.loc 1 643 0
 514 0064 95FD      		sbrc r25,5
 515 0066 00C0      		rjmp .L59
 516               	.LVL58:
 517               	.LBB155:
 518               	.LBB156:
 519               		.loc 3 276 0
 520 0068 95ED      		ldi r25,lo8(-43)
 521 006a 9A95      	1:	dec r25
 522 006c 01F4      		brne 1b
 523 006e 0000      		nop
 524               	.LVL59:
 525               	.LBE156:
 526               	.LBE155:
 643:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 527               		.loc 1 643 0
 528 0070 8111      		cpse r24,__zero_reg__
 529 0072 00C0      		rjmp .L58
 530               	.LVL60:
 531               	.L59:
 532               	.LBB157:
 533               	.LBB158:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 534               		.loc 2 360 0
 535 0074 8091 E800 		lds r24,232
 536               	.LBE158:
 537               	.LBE157:
 644:./tmk_core/protocol/lufa/lufa.c **** 
 538               		.loc 1 644 0
 539 0078 85FF      		sbrs r24,5
 540 007a 00C0      		rjmp .L49
 647:./tmk_core/protocol/lufa/lufa.c ****     }
 541               		.loc 1 647 0
 542 007c 50E0      		ldi r21,0
 543 007e 40E0      		ldi r20,0
 544 0080 68E0      		ldi r22,lo8(8)
 545 0082 70E0      		ldi r23,0
 546               	.LVL61:
 547               	.L82:
 548 0084 CE01      		movw r24,r28
 549 0086 0E94 0000 		call Endpoint_Write_Stream_LE
 550               	.LVL62:
 551               	.LBB159:
 552               	.LBB160:
 553               		.loc 2 456 0
 554 008a 8091 E800 		lds r24,232
 555 008e 8E77      		andi r24,lo8(126)
 556 0090 8093 E800 		sts 232,r24
 557               	.LBE160:
 558               	.LBE159:
 653:./tmk_core/protocol/lufa/lufa.c **** }
 559               		.loc 1 653 0
 560 0094 80E2      		ldi r24,lo8(32)
 561 0096 FE01      		movw r30,r28
 562 0098 A0E0      		ldi r26,lo8(keyboard_report_sent)
 563 009a B0E0      		ldi r27,hi8(keyboard_report_sent)
 564               		0:
 565 009c 0190      		ld r0,Z+
 566 009e 0D92      		st X+,r0
 567 00a0 8A95      		dec r24
 568 00a2 01F4      		brne 0b
 569 00a4 00C0      		rjmp .L49
 570               		.cfi_endproc
 571               	.LFE125:
 573               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 574               	.global	EVENT_USB_Device_Connect
 576               	EVENT_USB_Device_Connect:
 577               	.LFB117:
 331:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 578               		.loc 1 331 0
 579               		.cfi_startproc
 580               	/* prologue: function */
 581               	/* frame size = 0 */
 582               	/* stack size = 0 */
 583               	.L__stack_usage = 0
 334:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 584               		.loc 1 334 0
 585 0000 8091 0000 		lds r24,USB_IsInitialized
 586 0004 8111      		cpse r24,__zero_reg__
 587 0006 00C0      		rjmp .L83
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 588               		.loc 1 335 0
 589 0008 0E94 0000 		call USB_Disable
 590               	.LVL63:
 336:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 591               		.loc 1 336 0
 592 000c 0E94 0000 		call USB_Init
 593               	.LVL64:
 594               	.LBB161:
 595               	.LBB162:
 596               	.LBB163:
 597               		.file 4 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 598               		.loc 4 113 0
 599 0010 8091 E200 		lds r24,226
 600 0014 8460      		ori r24,lo8(4)
 601 0016 8093 E200 		sts 226,r24
 602               	.LVL65:
 603               	.L83:
 604               	/* epilogue start */
 605               	.LBE163:
 606               	.LBE162:
 607               	.LBE161:
 339:./tmk_core/protocol/lufa/lufa.c **** 
 608               		.loc 1 339 0
 609 001a 0895      		ret
 610               		.cfi_endproc
 611               	.LFE117:
 613               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 614               	.global	EVENT_USB_Device_Disconnect
 616               	EVENT_USB_Device_Disconnect:
 617               	.LFB118:
 342:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 618               		.loc 1 342 0
 619               		.cfi_startproc
 620               	/* prologue: function */
 621               	/* frame size = 0 */
 622               	/* stack size = 0 */
 623               	.L__stack_usage = 0
 345:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 624               		.loc 1 345 0
 625 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 626               	/* epilogue start */
 353:./tmk_core/protocol/lufa/lufa.c **** 
 627               		.loc 1 353 0
 628 0004 0895      		ret
 629               		.cfi_endproc
 630               	.LFE118:
 632               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 633               	.global	EVENT_USB_Device_Reset
 635               	EVENT_USB_Device_Reset:
 636               	.LFB134:
 637               		.cfi_startproc
 638               	/* prologue: function */
 639               	/* frame size = 0 */
 640               	/* stack size = 0 */
 641               	.L__stack_usage = 0
 642               	/* epilogue start */
 643 0000 0895      		ret
 644               		.cfi_endproc
 645               	.LFE134:
 647               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 648               	.global	EVENT_USB_Device_Suspend
 650               	EVENT_USB_Device_Suspend:
 651               	.LFB120:
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 652               		.loc 1 361 0
 653               		.cfi_startproc
 654               	/* prologue: function */
 655               	/* frame size = 0 */
 656               	/* stack size = 0 */
 657               	.L__stack_usage = 0
 658               	/* epilogue start */
 366:./tmk_core/protocol/lufa/lufa.c **** 
 659               		.loc 1 366 0
 660 0000 0895      		ret
 661               		.cfi_endproc
 662               	.LFE120:
 664               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 665               	.global	EVENT_USB_Device_WakeUp
 667               	EVENT_USB_Device_WakeUp:
 668               	.LFB121:
 369:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 669               		.loc 1 369 0
 670               		.cfi_startproc
 671               	/* prologue: function */
 672               	/* frame size = 0 */
 673               	/* stack size = 0 */
 674               	.L__stack_usage = 0
 371:./tmk_core/protocol/lufa/lufa.c **** 
 675               		.loc 1 371 0
 676 0000 0C94 0000 		jmp suspend_wakeup_init
 677               	.LVL66:
 678               		.cfi_endproc
 679               	.LFE121:
 681               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 682               	.global	EVENT_USB_Device_ConfigurationChanged
 684               	EVENT_USB_Device_ConfigurationChanged:
 685               	.LFB122:
 411:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 686               		.loc 1 411 0
 687               		.cfi_startproc
 688               	/* prologue: function */
 689               	/* frame size = 0 */
 690               	/* stack size = 0 */
 691               	.L__stack_usage = 0
 692               	.LVL67:
 693               	.LBB164:
 694               	.LBB165:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 695               		.loc 2 210 0
 696 0000 42E0      		ldi r20,lo8(2)
 697 0002 61EC      		ldi r22,lo8(-63)
 698 0004 81E0      		ldi r24,lo8(1)
 699 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 700               	.LVL68:
 701               	.LBE165:
 702               	.LBE164:
 703               	.LBB166:
 704               	.LBB167:
 705 000a 42E0      		ldi r20,lo8(2)
 706 000c 61EC      		ldi r22,lo8(-63)
 707 000e 82E0      		ldi r24,lo8(2)
 708 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 709               	.LVL69:
 710               	.LBE167:
 711               	.LBE166:
 712               	.LBB168:
 713               	.LBB169:
 714 0014 42E0      		ldi r20,lo8(2)
 715 0016 61EC      		ldi r22,lo8(-63)
 716 0018 83E0      		ldi r24,lo8(3)
 717 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 718               	.LVL70:
 719               	.LBE169:
 720               	.LBE168:
 721               	.LBB170:
 722               	.LBB171:
 723 001e 42E2      		ldi r20,lo8(34)
 724 0020 61EC      		ldi r22,lo8(-63)
 725 0022 84E0      		ldi r24,lo8(4)
 726 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 727               	.LVL71:
 728               	.LBE171:
 729               	.LBE170:
 730               		.cfi_endproc
 731               	.LFE122:
 733               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 734               	.global	EVENT_USB_Device_ControlRequest
 736               	EVENT_USB_Device_ControlRequest:
 737               	.LFB123:
 483:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 738               		.loc 1 483 0
 739               		.cfi_startproc
 740               	/* prologue: function */
 741               	/* frame size = 0 */
 742               	/* stack size = 0 */
 743               	.L__stack_usage = 0
 744               	.LVL72:
 488:./tmk_core/protocol/lufa/lufa.c ****     {
 745               		.loc 1 488 0
 746 0000 8091 0000 		lds r24,USB_ControlRequest+1
 747 0004 8330      		cpi r24,lo8(3)
 748 0006 01F4      		brne .+2
 749 0008 00C0      		rjmp .L92
 750 000a 00F4      		brsh .L93
 751 000c 8130      		cpi r24,lo8(1)
 752 000e 01F0      		breq .L94
 753 0010 8230      		cpi r24,lo8(2)
 754 0012 01F4      		brne .+2
 755 0014 00C0      		rjmp .L95
 756 0016 0895      		ret
 757               	.L93:
 758 0018 8A30      		cpi r24,lo8(10)
 759 001a 01F4      		brne .+2
 760 001c 00C0      		rjmp .L96
 761 001e 8B30      		cpi r24,lo8(11)
 762 0020 01F4      		brne .+2
 763 0022 00C0      		rjmp .L97
 764 0024 8930      		cpi r24,lo8(9)
 765 0026 01F0      		breq .+2
 766 0028 00C0      		rjmp .L90
 511:./tmk_core/protocol/lufa/lufa.c ****             {
 767               		.loc 1 511 0
 768 002a 8091 0000 		lds r24,USB_ControlRequest
 769 002e 8132      		cpi r24,lo8(33)
 770 0030 01F0      		breq .+2
 771 0032 00C0      		rjmp .L90
 515:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 772               		.loc 1 515 0
 773 0034 8091 0000 		lds r24,USB_ControlRequest+4
 774 0038 9091 0000 		lds r25,USB_ControlRequest+4+1
 775 003c 0097      		sbiw r24,0
 776 003e 01F0      		breq .L103
 777 0040 0397      		sbiw r24,3
 778 0042 01F4      		brne .L90
 779               	.L103:
 780               	.LBB172:
 781               	.LBB173:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 782               		.loc 2 444 0
 783 0044 8091 E800 		lds r24,232
 784 0048 877F      		andi r24,lo8(-9)
 785 004a 8093 E800 		sts 232,r24
 786               	.L104:
 787               	.LBE173:
 788               	.LBE172:
 789               	.LBB174:
 790               	.LBB175:
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 791               		.loc 2 419 0
 792 004e 8091 E800 		lds r24,232
 793               	.LBE175:
 794               	.LBE174:
 522:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 795               		.loc 1 522 0
 796 0052 82FF      		sbrs r24,2
 797 0054 00C0      		rjmp .L105
 798               	.LBB176:
 799               	.LBB177:
 457:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 800               		.loc 2 542 0
 801 0056 8091 F100 		lds r24,241
 802               	.LBE177:
 803               	.LBE176:
 526:./tmk_core/protocol/lufa/lufa.c **** 
 804               		.loc 1 526 0
 805 005a 8093 0000 		sts keyboard_led_stats,r24
 806               	.LBB178:
 807               	.LBB179:
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 808               		.loc 2 471 0
 809 005e 8091 E800 		lds r24,232
 810 0062 8B77      		andi r24,lo8(123)
 811               	.L123:
 812               	.LBE179:
 813               	.LBE178:
 814               	.LBB180:
 815               	.LBB181:
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 816               		.loc 2 456 0
 817 0064 8093 E800 		sts 232,r24
 818               	.LBE181:
 819               	.LBE180:
 580:./tmk_core/protocol/lufa/lufa.c ****             }
 820               		.loc 1 580 0
 821 0068 0C94 0000 		jmp Endpoint_ClearStatusStage
 822               	.LVL73:
 823               	.L94:
 491:./tmk_core/protocol/lufa/lufa.c ****             {
 824               		.loc 1 491 0
 825 006c 8091 0000 		lds r24,USB_ControlRequest
 826 0070 813A      		cpi r24,lo8(-95)
 827 0072 01F4      		brne .L90
 828               	.LBB183:
 829               	.LBB184:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 830               		.loc 2 444 0
 831 0074 8091 E800 		lds r24,232
 832 0078 877F      		andi r24,lo8(-9)
 833 007a 8093 E800 		sts 232,r24
 834               	.LBE184:
 835               	.LBE183:
 496:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 836               		.loc 1 496 0
 837 007e 8091 0000 		lds r24,USB_ControlRequest+4
 838 0082 9091 0000 		lds r25,USB_ControlRequest+4+1
 839 0086 892B      		or r24,r25
 840 0088 01F4      		brne .L122
 500:./tmk_core/protocol/lufa/lufa.c ****                     break;
 841               		.loc 1 500 0
 842 008a 60E2      		ldi r22,lo8(32)
 499:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 843               		.loc 1 499 0
 844 008c 80E0      		ldi r24,lo8(keyboard_report_sent)
 845 008e 90E0      		ldi r25,hi8(keyboard_report_sent)
 846               	.L100:
 847               	.LVL74:
 505:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 848               		.loc 1 505 0
 849 0090 70E0      		ldi r23,0
 850 0092 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 851               	.LVL75:
 852               	.LBB185:
 853               	.LBB186:
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 854               		.loc 2 471 0
 855 0096 8091 E800 		lds r24,232
 856 009a 8B77      		andi r24,lo8(123)
 857 009c 8093 E800 		sts 232,r24
 858 00a0 0895      		ret
 859               	.LVL76:
 860               	.L122:
 861               	.LBE186:
 862               	.LBE185:
 485:./tmk_core/protocol/lufa/lufa.c **** 
 863               		.loc 1 485 0
 864 00a2 60E0      		ldi r22,0
 484:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 865               		.loc 1 484 0
 866 00a4 90E0      		ldi r25,0
 867 00a6 80E0      		ldi r24,0
 868 00a8 00C0      		rjmp .L100
 869               	.L105:
 523:./tmk_core/protocol/lufa/lufa.c ****                           return;
 870               		.loc 1 523 0
 871 00aa 8091 0000 		lds r24,USB_DeviceState
 872 00ae 8111      		cpse r24,__zero_reg__
 873 00b0 00C0      		rjmp .L104
 874               	.L90:
 875               	/* epilogue start */
 589:./tmk_core/protocol/lufa/lufa.c **** 
 876               		.loc 1 589 0
 877 00b2 0895      		ret
 878               	.L92:
 538:./tmk_core/protocol/lufa/lufa.c ****             {
 879               		.loc 1 538 0
 880 00b4 8091 0000 		lds r24,USB_ControlRequest
 881 00b8 813A      		cpi r24,lo8(-95)
 882 00ba 01F4      		brne .L90
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 883               		.loc 1 540 0
 884 00bc 8091 0000 		lds r24,USB_ControlRequest+4
 885 00c0 9091 0000 		lds r25,USB_ControlRequest+4+1
 886 00c4 892B      		or r24,r25
 887 00c6 01F4      		brne .L90
 888               	.LBB187:
 889               	.LBB188:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 890               		.loc 2 444 0
 891 00c8 8091 E800 		lds r24,232
 892 00cc 877F      		andi r24,lo8(-9)
 893 00ce 8093 E800 		sts 232,r24
 894               	.L106:
 895               	.LBE188:
 896               	.LBE187:
 897               	.LBB189:
 898               	.LBB190:
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 899               		.loc 2 407 0 discriminator 1
 900 00d2 8091 E800 		lds r24,232
 901               	.LBE190:
 902               	.LBE189:
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 903               		.loc 1 542 0 discriminator 1
 904 00d6 80FF      		sbrs r24,0
 905 00d8 00C0      		rjmp .L106
 543:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 906               		.loc 1 543 0
 907 00da 8091 0000 		lds r24,keyboard_protocol
 908               	.LVL77:
 909               	.L124:
 910               	.LBB191:
 911               	.LBB192:
 543:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 912               		.loc 2 554 0
 913 00de 8093 F100 		sts 241,r24
 914               	.LVL78:
 915               	.LBE192:
 916               	.LBE191:
 917               	.LBB193:
 918               	.LBB182:
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 919               		.loc 2 456 0
 920 00e2 8091 E800 		lds r24,232
 921 00e6 8E77      		andi r24,lo8(126)
 922 00e8 00C0      		rjmp .L123
 923               	.L97:
 924               	.LBE182:
 925               	.LBE193:
 551:./tmk_core/protocol/lufa/lufa.c ****             {
 926               		.loc 1 551 0
 927 00ea 8091 0000 		lds r24,USB_ControlRequest
 928 00ee 8132      		cpi r24,lo8(33)
 929 00f0 01F4      		brne .L90
 553:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 930               		.loc 1 553 0
 931 00f2 8091 0000 		lds r24,USB_ControlRequest+4
 932 00f6 9091 0000 		lds r25,USB_ControlRequest+4+1
 933 00fa 892B      		or r24,r25
 934 00fc 01F4      		brne .L90
 935               	.LBB194:
 936               	.LBB195:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 937               		.loc 2 444 0
 938 00fe 8091 E800 		lds r24,232
 939 0102 877F      		andi r24,lo8(-9)
 940 0104 8093 E800 		sts 232,r24
 941               	.LBE195:
 942               	.LBE194:
 555:./tmk_core/protocol/lufa/lufa.c **** 
 943               		.loc 1 555 0
 944 0108 0E94 0000 		call Endpoint_ClearStatusStage
 945               	.LVL79:
 557:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 946               		.loc 1 557 0
 947 010c 8091 0000 		lds r24,USB_ControlRequest+2
 948 0110 8093 0000 		sts keyboard_protocol,r24
 558:./tmk_core/protocol/lufa/lufa.c ****                 }
 949               		.loc 1 558 0
 950 0114 0C94 0000 		jmp clear_keyboard
 951               	.LVL80:
 952               	.L96:
 564:./tmk_core/protocol/lufa/lufa.c ****             {
 953               		.loc 1 564 0
 954 0118 8091 0000 		lds r24,USB_ControlRequest
 955 011c 8132      		cpi r24,lo8(33)
 956 011e 01F4      		brne .L90
 957               	.LBB196:
 958               	.LBB197:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 959               		.loc 2 444 0
 960 0120 8091 E800 		lds r24,232
 961 0124 877F      		andi r24,lo8(-9)
 962 0126 8093 E800 		sts 232,r24
 963               	.LBE197:
 964               	.LBE196:
 567:./tmk_core/protocol/lufa/lufa.c **** 
 965               		.loc 1 567 0
 966 012a 0E94 0000 		call Endpoint_ClearStatusStage
 967               	.LVL81:
 569:./tmk_core/protocol/lufa/lufa.c ****             }
 968               		.loc 1 569 0
 969 012e 8091 0000 		lds r24,USB_ControlRequest+3
 970 0132 8093 0000 		sts keyboard_idle,r24
 971 0136 0895      		ret
 972               	.L95:
 574:./tmk_core/protocol/lufa/lufa.c ****             {
 973               		.loc 1 574 0
 974 0138 8091 0000 		lds r24,USB_ControlRequest
 975 013c 813A      		cpi r24,lo8(-95)
 976 013e 01F0      		breq .+2
 977 0140 00C0      		rjmp .L90
 978               	.LBB198:
 979               	.LBB199:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 980               		.loc 2 444 0
 981 0142 8091 E800 		lds r24,232
 982 0146 877F      		andi r24,lo8(-9)
 983 0148 8093 E800 		sts 232,r24
 984               	.L107:
 985               	.LBE199:
 986               	.LBE198:
 987               	.LBB200:
 988               	.LBB201:
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 989               		.loc 2 407 0 discriminator 1
 990 014c 8091 E800 		lds r24,232
 991               	.LBE201:
 992               	.LBE200:
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 993               		.loc 1 577 0 discriminator 1
 994 0150 80FF      		sbrs r24,0
 995 0152 00C0      		rjmp .L107
 578:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 996               		.loc 1 578 0
 997 0154 8091 0000 		lds r24,keyboard_idle
 998 0158 00C0      		rjmp .L124
 999               		.cfi_endproc
 1000               	.LFE123:
 1002               		.section	.text.sendchar,"ax",@progbits
 1003               	.global	sendchar
 1005               	sendchar:
 1006               	.LFB129:
 769:./tmk_core/protocol/lufa/lufa.c **** 
 770:./tmk_core/protocol/lufa/lufa.c **** 
 771:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 772:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 773:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 774:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 775:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 776:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 777:./tmk_core/protocol/lufa/lufa.c **** {
 778:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 779:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 780:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 781:./tmk_core/protocol/lufa/lufa.c **** 
 782:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 783:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 784:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 785:./tmk_core/protocol/lufa/lufa.c **** 
 786:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 787:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 788:./tmk_core/protocol/lufa/lufa.c **** 
 789:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 790:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 791:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 792:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 793:./tmk_core/protocol/lufa/lufa.c ****     }
 794:./tmk_core/protocol/lufa/lufa.c **** 
 795:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 796:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 797:./tmk_core/protocol/lufa/lufa.c ****     }
 798:./tmk_core/protocol/lufa/lufa.c **** 
 799:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 800:./tmk_core/protocol/lufa/lufa.c **** 
 801:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 802:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 803:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 804:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 805:./tmk_core/protocol/lufa/lufa.c ****         }
 806:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 807:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 808:./tmk_core/protocol/lufa/lufa.c ****         }
 809:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 810:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 811:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 812:./tmk_core/protocol/lufa/lufa.c ****         }
 813:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 814:./tmk_core/protocol/lufa/lufa.c ****     }
 815:./tmk_core/protocol/lufa/lufa.c **** 
 816:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 817:./tmk_core/protocol/lufa/lufa.c **** 
 818:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 819:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 820:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 821:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 822:./tmk_core/protocol/lufa/lufa.c ****     } else {
 823:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 824:./tmk_core/protocol/lufa/lufa.c ****     }
 825:./tmk_core/protocol/lufa/lufa.c **** 
 826:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 827:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 828:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 829:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 830:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 831:./tmk_core/protocol/lufa/lufa.c **** }
 832:./tmk_core/protocol/lufa/lufa.c **** #else
 833:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 834:./tmk_core/protocol/lufa/lufa.c **** {
 1007               		.loc 1 834 0
 1008               		.cfi_startproc
 1009               	.LVL82:
 1010               	/* prologue: function */
 1011               	/* frame size = 0 */
 1012               	/* stack size = 0 */
 1013               	.L__stack_usage = 0
 835:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 836:./tmk_core/protocol/lufa/lufa.c **** }
 1014               		.loc 1 836 0
 1015 0000 80E0      		ldi r24,0
 1016               	.LVL83:
 1017               	/* epilogue start */
 1018 0002 0895      		ret
 1019               		.cfi_endproc
 1020               	.LFE129:
 1022               		.section	.text.startup.main,"ax",@progbits
 1023               		.weak	main
 1025               	main:
 1026               	.LFB132:
 837:./tmk_core/protocol/lufa/lufa.c **** #endif
 838:./tmk_core/protocol/lufa/lufa.c **** 
 839:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 840:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 841:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 842:./tmk_core/protocol/lufa/lufa.c **** 
 843:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 844:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 845:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 846:./tmk_core/protocol/lufa/lufa.c ****   event.Data1 = byte0;
 847:./tmk_core/protocol/lufa/lufa.c ****   event.Data2 = byte1;
 848:./tmk_core/protocol/lufa/lufa.c ****   event.Data3 = byte2;
 849:./tmk_core/protocol/lufa/lufa.c **** 
 850:./tmk_core/protocol/lufa/lufa.c ****   uint8_t cable = 0;
 851:./tmk_core/protocol/lufa/lufa.c **** 
 852:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);
 853:./tmk_core/protocol/lufa/lufa.c **** 
 854:./tmk_core/protocol/lufa/lufa.c ****   //if the length is undefined we assume it is a SYSEX message
 855:./tmk_core/protocol/lufa/lufa.c ****   if (midi_packet_length(byte0) == UNDEFINED) {
 856:./tmk_core/protocol/lufa/lufa.c ****     switch(cnt) {
 857:./tmk_core/protocol/lufa/lufa.c ****       case 3:
 858:./tmk_core/protocol/lufa/lufa.c ****         if (byte2 == SYSEX_END)
 859:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_3);
 860:./tmk_core/protocol/lufa/lufa.c ****         else
 861:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 862:./tmk_core/protocol/lufa/lufa.c ****         break;
 863:./tmk_core/protocol/lufa/lufa.c ****       case 2:
 864:./tmk_core/protocol/lufa/lufa.c ****         if (byte1 == SYSEX_END)
 865:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_2);
 866:./tmk_core/protocol/lufa/lufa.c ****         else
 867:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 868:./tmk_core/protocol/lufa/lufa.c ****         break;
 869:./tmk_core/protocol/lufa/lufa.c ****       case 1:
 870:./tmk_core/protocol/lufa/lufa.c ****         if (byte0 == SYSEX_END)
 871:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_1);
 872:./tmk_core/protocol/lufa/lufa.c ****         else
 873:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 874:./tmk_core/protocol/lufa/lufa.c ****         break;
 875:./tmk_core/protocol/lufa/lufa.c ****       default:
 876:./tmk_core/protocol/lufa/lufa.c ****         return; //invalid cnt
 877:./tmk_core/protocol/lufa/lufa.c ****     }
 878:./tmk_core/protocol/lufa/lufa.c ****   } else {
 879:./tmk_core/protocol/lufa/lufa.c ****     //deal with 'system common' messages
 880:./tmk_core/protocol/lufa/lufa.c ****     //TODO are there any more?
 881:./tmk_core/protocol/lufa/lufa.c ****     switch(byte0 & 0xF0){
 882:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGPOSITION:
 883:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_3);
 884:./tmk_core/protocol/lufa/lufa.c ****         break;
 885:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGSELECT:
 886:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_TC_QUARTERFRAME:
 887:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_2);
 888:./tmk_core/protocol/lufa/lufa.c ****         break;
 889:./tmk_core/protocol/lufa/lufa.c ****       default:
 890:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, byte0);
 891:./tmk_core/protocol/lufa/lufa.c ****         break;
 892:./tmk_core/protocol/lufa/lufa.c ****     }
 893:./tmk_core/protocol/lufa/lufa.c ****   }
 894:./tmk_core/protocol/lufa/lufa.c **** 
 895:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_Write_Stream_LE(&event, sizeof(event), NULL);
 896:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_ClearIN();
 897:./tmk_core/protocol/lufa/lufa.c **** 
 898:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &event);
 899:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_Flush(&USB_MIDI_Interface);
 900:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 901:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 902:./tmk_core/protocol/lufa/lufa.c **** }
 903:./tmk_core/protocol/lufa/lufa.c **** 
 904:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device) {
 905:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 906:./tmk_core/protocol/lufa/lufa.c ****   while (MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, &event)) {
 907:./tmk_core/protocol/lufa/lufa.c **** 
 908:./tmk_core/protocol/lufa/lufa.c ****     midi_packet_length_t length = midi_packet_length(event.Data1);
 909:./tmk_core/protocol/lufa/lufa.c ****     uint8_t input[3];
 910:./tmk_core/protocol/lufa/lufa.c ****     input[0] = event.Data1;
 911:./tmk_core/protocol/lufa/lufa.c ****     input[1] = event.Data2;
 912:./tmk_core/protocol/lufa/lufa.c ****     input[2] = event.Data3;
 913:./tmk_core/protocol/lufa/lufa.c ****     if (length == UNDEFINED) {
 914:./tmk_core/protocol/lufa/lufa.c ****       //sysex
 915:./tmk_core/protocol/lufa/lufa.c ****       if (event.Event == MIDI_EVENT(0, SYSEX_START_OR_CONT) || event.Event == MIDI_EVENT(0, SYSEX_E
 916:./tmk_core/protocol/lufa/lufa.c ****         length = 3;
 917:./tmk_core/protocol/lufa/lufa.c ****       } else if (event.Event == MIDI_EVENT(0, SYSEX_ENDS_IN_2)) {
 918:./tmk_core/protocol/lufa/lufa.c ****         length = 2;
 919:./tmk_core/protocol/lufa/lufa.c ****       } else if(event.Event ==  MIDI_EVENT(0, SYSEX_ENDS_IN_1)) {
 920:./tmk_core/protocol/lufa/lufa.c ****         length = 1;
 921:./tmk_core/protocol/lufa/lufa.c ****       } else {
 922:./tmk_core/protocol/lufa/lufa.c ****         //XXX what to do?
 923:./tmk_core/protocol/lufa/lufa.c ****       }
 924:./tmk_core/protocol/lufa/lufa.c ****     }
 925:./tmk_core/protocol/lufa/lufa.c **** 
 926:./tmk_core/protocol/lufa/lufa.c ****     //pass the data to the device input function
 927:./tmk_core/protocol/lufa/lufa.c ****     if (length != UNDEFINED)
 928:./tmk_core/protocol/lufa/lufa.c ****       midi_device_input(device, length, input);
 929:./tmk_core/protocol/lufa/lufa.c ****   }
 930:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 931:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 932:./tmk_core/protocol/lufa/lufa.c **** }
 933:./tmk_core/protocol/lufa/lufa.c **** 
 934:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device){
 935:./tmk_core/protocol/lufa/lufa.c ****   midi_device_init(device);
 936:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_send_func(device, usb_send_func);
 937:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_pre_input_process_func(device, usb_get_midi);
 938:./tmk_core/protocol/lufa/lufa.c **** 
 939:./tmk_core/protocol/lufa/lufa.c ****   // SetupHardware();
 940:./tmk_core/protocol/lufa/lufa.c ****   sei();
 941:./tmk_core/protocol/lufa/lufa.c **** }
 942:./tmk_core/protocol/lufa/lufa.c **** 
 943:./tmk_core/protocol/lufa/lufa.c **** void MIDI_Task(void)
 944:./tmk_core/protocol/lufa/lufa.c **** {
 945:./tmk_core/protocol/lufa/lufa.c **** 
 946:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 947:./tmk_core/protocol/lufa/lufa.c ****     dprint("in MIDI_TASK\n");
 948:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 949:./tmk_core/protocol/lufa/lufa.c ****       return;
 950:./tmk_core/protocol/lufa/lufa.c ****     dprint("continuing in MIDI_TASK\n");
 951:./tmk_core/protocol/lufa/lufa.c **** 
 952:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
 953:./tmk_core/protocol/lufa/lufa.c **** 
 954:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady())
 955:./tmk_core/protocol/lufa/lufa.c ****     {
 956:./tmk_core/protocol/lufa/lufa.c **** 
 957:./tmk_core/protocol/lufa/lufa.c ****         dprint("Endpoint is ready\n");
 958:./tmk_core/protocol/lufa/lufa.c **** 
 959:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDICommand = 0;
 960:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDIPitch;
 961:./tmk_core/protocol/lufa/lufa.c **** 
 962:./tmk_core/protocol/lufa/lufa.c ****         /* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 
 963:./tmk_core/protocol/lufa/lufa.c ****         uint8_t Channel = MIDI_CHANNEL(1);
 964:./tmk_core/protocol/lufa/lufa.c **** 
 965:./tmk_core/protocol/lufa/lufa.c ****         MIDICommand = MIDI_COMMAND_NOTE_ON;
 966:./tmk_core/protocol/lufa/lufa.c ****         MIDIPitch   = 0x3E;
 967:./tmk_core/protocol/lufa/lufa.c **** 
 968:./tmk_core/protocol/lufa/lufa.c ****         /* Check if a MIDI command is to be sent */
 969:./tmk_core/protocol/lufa/lufa.c ****         if (MIDICommand)
 970:./tmk_core/protocol/lufa/lufa.c ****         {
 971:./tmk_core/protocol/lufa/lufa.c ****             dprint("Command exists\n");
 972:./tmk_core/protocol/lufa/lufa.c ****             MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 973:./tmk_core/protocol/lufa/lufa.c ****                 {
 974:./tmk_core/protocol/lufa/lufa.c ****                     .Event       = MIDI_EVENT(0, MIDICommand),
 975:./tmk_core/protocol/lufa/lufa.c **** 
 976:./tmk_core/protocol/lufa/lufa.c ****                     .Data1       = MIDICommand | Channel,
 977:./tmk_core/protocol/lufa/lufa.c ****                     .Data2       = MIDIPitch,
 978:./tmk_core/protocol/lufa/lufa.c ****                     .Data3       = MIDI_STANDARD_VELOCITY,
 979:./tmk_core/protocol/lufa/lufa.c ****                 };
 980:./tmk_core/protocol/lufa/lufa.c **** 
 981:./tmk_core/protocol/lufa/lufa.c ****             /* Write the MIDI event packet to the endpoint */
 982:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 983:./tmk_core/protocol/lufa/lufa.c **** 
 984:./tmk_core/protocol/lufa/lufa.c ****             /* Send the data in the endpoint to the host */
 985:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
 986:./tmk_core/protocol/lufa/lufa.c ****         }
 987:./tmk_core/protocol/lufa/lufa.c ****     }
 988:./tmk_core/protocol/lufa/lufa.c **** 
 989:./tmk_core/protocol/lufa/lufa.c **** 
 990:./tmk_core/protocol/lufa/lufa.c ****     /* Select the MIDI OUT stream */
 991:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);
 992:./tmk_core/protocol/lufa/lufa.c **** 
 993:./tmk_core/protocol/lufa/lufa.c ****     /* Check if a MIDI command has been received */
 994:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 995:./tmk_core/protocol/lufa/lufa.c ****     {
 996:./tmk_core/protocol/lufa/lufa.c ****         MIDI_EventPacket_t MIDIEvent;
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c ****         /* Read the MIDI event packet from the endpoint */
 999:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
1000:./tmk_core/protocol/lufa/lufa.c **** 
1001:./tmk_core/protocol/lufa/lufa.c ****         /* If the endpoint is now empty, clear the bank */
1002:./tmk_core/protocol/lufa/lufa.c ****         if (!(Endpoint_BytesInEndpoint()))
1003:./tmk_core/protocol/lufa/lufa.c ****         {
1004:./tmk_core/protocol/lufa/lufa.c ****             /* Clear the endpoint ready for new packet */
1005:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearOUT();
1006:./tmk_core/protocol/lufa/lufa.c ****         }
1007:./tmk_core/protocol/lufa/lufa.c ****     }
1008:./tmk_core/protocol/lufa/lufa.c **** }
1009:./tmk_core/protocol/lufa/lufa.c **** 
1010:./tmk_core/protocol/lufa/lufa.c **** #endif
1011:./tmk_core/protocol/lufa/lufa.c **** 
1012:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1013:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
1014:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1015:./tmk_core/protocol/lufa/lufa.c **** 
1016:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1017:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
1018:./tmk_core/protocol/lufa/lufa.c **** {
1019:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
1020:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
1021:./tmk_core/protocol/lufa/lufa.c **** }
1022:./tmk_core/protocol/lufa/lufa.c **** 
1023:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
1024:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
1025:./tmk_core/protocol/lufa/lufa.c **** {
1026:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
1027:./tmk_core/protocol/lufa/lufa.c **** }
1028:./tmk_core/protocol/lufa/lufa.c **** 
1029:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
1030:./tmk_core/protocol/lufa/lufa.c **** {
1031:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
1032:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
1033:./tmk_core/protocol/lufa/lufa.c ****   if (count)
1034:./tmk_core/protocol/lufa/lufa.c ****   {
1035:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
1036:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
1037:./tmk_core/protocol/lufa/lufa.c ****   }
1038:./tmk_core/protocol/lufa/lufa.c **** }
1039:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
1040:./tmk_core/protocol/lufa/lufa.c **** {
1041:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
1042:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
1043:./tmk_core/protocol/lufa/lufa.c **** 
1044:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
1045:./tmk_core/protocol/lufa/lufa.c ****   {
1046:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
1047:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
1048:./tmk_core/protocol/lufa/lufa.c **** 
1049:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
1050:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
1051:./tmk_core/protocol/lufa/lufa.c ****         return;
1052:./tmk_core/protocol/lufa/lufa.c ****     }
1053:./tmk_core/protocol/lufa/lufa.c **** 
1054:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
1055:./tmk_core/protocol/lufa/lufa.c **** 
1056:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
1057:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
1058:./tmk_core/protocol/lufa/lufa.c **** 
1059:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
1060:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
1061:./tmk_core/protocol/lufa/lufa.c ****     }
1062:./tmk_core/protocol/lufa/lufa.c **** 
1063:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
1064:./tmk_core/protocol/lufa/lufa.c ****   }
1065:./tmk_core/protocol/lufa/lufa.c **** }
1066:./tmk_core/protocol/lufa/lufa.c **** #endif
1067:./tmk_core/protocol/lufa/lufa.c **** 
1068:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1069:./tmk_core/protocol/lufa/lufa.c ****  * main
1070:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1071:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
1072:./tmk_core/protocol/lufa/lufa.c **** {
1073:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
1074:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
1075:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
1076:./tmk_core/protocol/lufa/lufa.c **** 
1077:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
1078:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
1079:./tmk_core/protocol/lufa/lufa.c **** 
1080:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
1081:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
1082:./tmk_core/protocol/lufa/lufa.c **** }
1083:./tmk_core/protocol/lufa/lufa.c **** 
1084:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1085:./tmk_core/protocol/lufa/lufa.c **** {
1086:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1087:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1088:./tmk_core/protocol/lufa/lufa.c **** 
1089:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1090:./tmk_core/protocol/lufa/lufa.c **** 
1091:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1092:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1093:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1094:./tmk_core/protocol/lufa/lufa.c **** }
1095:./tmk_core/protocol/lufa/lufa.c **** 
1096:./tmk_core/protocol/lufa/lufa.c **** 
1097:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1098:./tmk_core/protocol/lufa/lufa.c **** void fallthrough_callback(MidiDevice * device,
1099:./tmk_core/protocol/lufa/lufa.c ****     uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
1100:./tmk_core/protocol/lufa/lufa.c **** void cc_callback(MidiDevice * device,
1101:./tmk_core/protocol/lufa/lufa.c ****     uint8_t chan, uint8_t num, uint8_t val);
1102:./tmk_core/protocol/lufa/lufa.c **** void sysex_callback(MidiDevice * device,
1103:./tmk_core/protocol/lufa/lufa.c ****     uint16_t start, uint8_t length, uint8_t * data);
1104:./tmk_core/protocol/lufa/lufa.c **** #endif
1105:./tmk_core/protocol/lufa/lufa.c **** 
1106:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1107:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1108:./tmk_core/protocol/lufa/lufa.c **** {
 1027               		.loc 1 1108 0
 1028               		.cfi_startproc
 1029               	/* prologue: function */
 1030               	/* frame size = 0 */
 1031               	/* stack size = 0 */
 1032               	.L__stack_usage = 0
 1033               	.LBB211:
 1034               	.LBB212:
1074:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1035               		.loc 1 1074 0
 1036 0000 84B7      		in r24,0x34
 1037 0002 877F      		andi r24,lo8(-9)
 1038 0004 84BF      		out 0x34,r24
 1039               	.LBB213:
 1040               	.LBB214:
 1041               		.file 5 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1042               		.loc 5 470 0
 1043               	/* #APP */
 1044               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 1045 0006 0FB6      		in __tmp_reg__,__SREG__
 1046 0008 F894      		cli
 1047 000a A895      		wdr
 1048 000c 8091 6000 		lds r24,96
 1049 0010 8861      		ori r24,24
 1050 0012 8093 6000 		sts 96,r24
 1051 0016 1092 6000 		sts 96,__zero_reg__
 1052 001a 0FBE      		out __SREG__,__tmp_reg__
 1053               		
 1054               	 ;  0 "" 2
 1055               	/* #NOAPP */
 1056               	.LBE214:
 1057               	.LBE213:
1080:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1058               		.loc 1 1080 0
 1059 001c 80E8      		ldi r24,lo8(-128)
 1060 001e 8093 6100 		sts 97,r24
1081:./tmk_core/protocol/lufa/lufa.c **** }
 1061               		.loc 1 1081 0
 1062 0022 1092 6100 		sts 97,__zero_reg__
 1063               	.LBE212:
 1064               	.LBE211:
1109:./tmk_core/protocol/lufa/lufa.c **** 
1110:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1111:./tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
1112:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_send_func(&midi_device, usb_send_func);
1113:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
1114:./tmk_core/protocol/lufa/lufa.c **** #endif
1115:./tmk_core/protocol/lufa/lufa.c **** 
1116:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1117:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1065               		.loc 1 1117 0
 1066 0026 0E94 0000 		call keyboard_setup
 1067               	.LVL84:
 1068               	.LBB215:
 1069               	.LBB216:
1087:./tmk_core/protocol/lufa/lufa.c **** 
 1070               		.loc 1 1087 0
 1071 002a 0E94 0000 		call USB_Disable
 1072               	.LVL85:
1089:./tmk_core/protocol/lufa/lufa.c **** 
 1073               		.loc 1 1089 0
 1074 002e 0E94 0000 		call USB_Init
 1075               	.LVL86:
 1076               	.LBB217:
 1077               	.LBB218:
 1078               	.LBB219:
 1079               		.loc 4 113 0
 1080 0032 8091 E200 		lds r24,226
 1081 0036 8460      		ori r24,lo8(4)
 1082 0038 8093 E200 		sts 226,r24
 1083               	.LVL87:
 1084               	.LBE219:
 1085               	.LBE218:
 1086               	.LBE217:
 1087               	.LBE216:
 1088               	.LBE215:
1118:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1119:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1089               		.loc 1 1119 0
 1090               	/* #APP */
 1091               	 ;  1119 "./tmk_core/protocol/lufa/lufa.c" 1
 1092 003c 7894      		sei
 1093               	 ;  0 "" 2
1120:./tmk_core/protocol/lufa/lufa.c **** 
1121:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1122:./tmk_core/protocol/lufa/lufa.c ****     midi_register_fallthrough_callback(&midi_device, fallthrough_callback);
1123:./tmk_core/protocol/lufa/lufa.c ****     midi_register_cc_callback(&midi_device, cc_callback);
1124:./tmk_core/protocol/lufa/lufa.c ****     midi_register_sysex_callback(&midi_device, sysex_callback);
1125:./tmk_core/protocol/lufa/lufa.c **** 
1126:./tmk_core/protocol/lufa/lufa.c ****     // init_notes();
1127:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 0, 1, 2);
1128:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 15, 1, 0);
1129:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteon(&midi_device, 0, 64, 127);
1130:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteoff(&midi_device, 0, 64, 127);
1131:./tmk_core/protocol/lufa/lufa.c **** #endif
1132:./tmk_core/protocol/lufa/lufa.c **** 
1133:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
1134:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1135:./tmk_core/protocol/lufa/lufa.c **** #endif
1136:./tmk_core/protocol/lufa/lufa.c **** 
1137:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1138:./tmk_core/protocol/lufa/lufa.c **** 
1139:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1140:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1141:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1142:./tmk_core/protocol/lufa/lufa.c ****             ;
1143:./tmk_core/protocol/lufa/lufa.c ****     #else
1144:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1145:./tmk_core/protocol/lufa/lufa.c ****     #endif
1146:./tmk_core/protocol/lufa/lufa.c ****     }
1147:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1148:./tmk_core/protocol/lufa/lufa.c **** #else
1149:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1094               		.loc 1 1149 0
 1095               	/* #NOAPP */
 1096 003e 0E94 0000 		call USB_USBTask
 1097               	.LVL88:
1150:./tmk_core/protocol/lufa/lufa.c **** #endif
1151:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1152:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1098               		.loc 1 1152 0
 1099 0042 0E94 0000 		call keyboard_init
 1100               	.LVL89:
1153:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1101               		.loc 1 1153 0
 1102 0046 80E0      		ldi r24,lo8(lufa_driver)
 1103 0048 90E0      		ldi r25,hi8(lufa_driver)
 1104 004a 0E94 0000 		call host_set_driver
 1105               	.LVL90:
 1106               	.L127:
1154:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1155:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1156:./tmk_core/protocol/lufa/lufa.c **** #endif
1157:./tmk_core/protocol/lufa/lufa.c **** 
1158:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1159:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1160:./tmk_core/protocol/lufa/lufa.c **** #endif
1161:./tmk_core/protocol/lufa/lufa.c **** 
1162:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1163:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1164:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(BLUETOOTH_ENABLE) && !defined(ADAFRUIT_BLE_ENABLE)
1165:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1107               		.loc 1 1165 0
 1108 004e 8091 0000 		lds r24,USB_DeviceState
 1109 0052 8530      		cpi r24,lo8(5)
 1110 0054 01F0      		breq .L131
1166:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1167:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
1168:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
1169:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
1170:./tmk_core/protocol/lufa/lufa.c ****             }
1171:./tmk_core/protocol/lufa/lufa.c ****         }
1172:./tmk_core/protocol/lufa/lufa.c ****         #endif
1173:./tmk_core/protocol/lufa/lufa.c **** 
1174:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1111               		.loc 1 1174 0
 1112 0056 0E94 0000 		call keyboard_task
 1113               	.LVL91:
1165:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1114               		.loc 1 1165 0
 1115 005a 00C0      		rjmp .L127
 1116               	.L131:
1167:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1117               		.loc 1 1167 0
 1118 005c 0E94 0000 		call suspend_power_down
 1119               	.LVL92:
1168:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1120               		.loc 1 1168 0
 1121 0060 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1122 0064 8823      		tst r24
 1123 0066 01F0      		breq .L127
1168:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1124               		.loc 1 1168 0 is_stmt 0 discriminator 1
 1125 0068 0E94 0000 		call suspend_wakeup_condition
 1126               	.LVL93:
 1127 006c 8823      		tst r24
 1128 006e 01F0      		breq .L127
1169:./tmk_core/protocol/lufa/lufa.c ****             }
 1129               		.loc 1 1169 0 is_stmt 1
 1130 0070 0E94 0000 		call USB_Device_SendRemoteWakeup
 1131               	.LVL94:
 1132 0074 00C0      		rjmp .L127
 1133               		.cfi_endproc
 1134               	.LFE132:
 1136               	.global	lufa_driver
 1137               		.section	.data.lufa_driver,"aw",@progbits
 1140               	lufa_driver:
 1141 0000 0000      		.word	gs(keyboard_leds)
 1142 0002 0000      		.word	gs(send_keyboard)
 1143 0004 0000      		.word	gs(send_mouse)
 1144 0006 0000      		.word	gs(send_system)
 1145 0008 0000      		.word	gs(send_consumer)
 1146               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1149               	keyboard_report_sent:
 1150 0000 0000 0000 		.zero	32
 1150      0000 0000 
 1150      0000 0000 
 1150      0000 0000 
 1150      0000 0000 
 1151               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1154               	keyboard_led_stats:
 1155 0000 00        		.zero	1
 1156               	.global	keyboard_protocol
 1157               		.section	.data.keyboard_protocol,"aw",@progbits
 1160               	keyboard_protocol:
 1161 0000 01        		.byte	1
 1162               	.global	keyboard_idle
 1163               		.section	.bss.keyboard_idle,"aw",@nobits
 1166               	keyboard_idle:
 1167 0000 00        		.zero	1
 1168               		.text
 1169               	.Letext0:
 1170               		.file 6 "/usr/avr/include/stdint.h"
 1171               		.file 7 "/usr/lib/gcc/avr/7.1.0/include/stddef.h"
 1172               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1173               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1174               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1175               		.file 11 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1176               		.file 12 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1177               		.file 13 "/usr/avr/include/stdio.h"
 1178               		.file 14 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon
 1179               		.file 15 "./tmk_core/common/report.h"
 1180               		.file 16 "./tmk_core/common/host_driver.h"
 1181               		.file 17 "./tmk_core/common/host.h"
 1182               		.file 18 "./tmk_core/common/debug.h"
 1183               		.file 19 "./tmk_core/protocol/lufa/lufa.h"
 1184               		.file 20 "./quantum/keycode_config.h"
 1185               		.file 21 "./quantum/keymap.h"
 1186               		.file 22 "./tmk_core/common/action_layer.h"
 1187               		.file 23 "./tmk_core/common/timer.h"
 1188               		.file 24 "./tmk_core/common/action_util.h"
 1189               		.file 25 "/usr/avr/include/stdlib.h"
 1190               		.file 26 "./tmk_core/protocol/lufa/outputselect.h"
 1191               		.file 27 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1192               		.file 28 "./quantum/process_keycode/process_unicode_common.h"
 1193               		.file 29 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1194               		.file 30 "./tmk_core/common/keyboard.h"
 1195               		.file 31 "./tmk_core/common/suspend.h"
 1196               		.file 32 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8
 1197               		.file 33 "./tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/cchEC4M2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cchEC4M2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cchEC4M2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cchEC4M2.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cchEC4M2.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cchEC4M2.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/cchEC4M2.s:1154   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/cchEC4M2.s:30     .text.send_consumer:0000000000000000 send_consumer
     /tmp/cchEC4M2.s:165    .text.send_system:0000000000000000 send_system
     /tmp/cchEC4M2.s:286    .text.send_mouse:0000000000000000 send_mouse
     /tmp/cchEC4M2.s:393    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/cchEC4M2.s:1160   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/cchEC4M2.s:1149   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/cchEC4M2.s:576    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/cchEC4M2.s:616    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/cchEC4M2.s:635    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/cchEC4M2.s:650    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/cchEC4M2.s:667    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/cchEC4M2.s:684    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/cchEC4M2.s:736    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/cchEC4M2.s:1166   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/cchEC4M2.s:1005   .text.sendchar:0000000000000000 sendchar
     /tmp/cchEC4M2.s:1025   .text.startup.main:0000000000000000 main
     /tmp/cchEC4M2.s:1140   .data.lufa_driver:0000000000000000 lufa_driver

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
__do_copy_data
__do_clear_bss
