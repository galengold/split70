   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB107:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
   3:quantum/quantum.c **** #include "outputselect.h"
   4:quantum/quantum.c **** #endif
   5:quantum/quantum.c **** 
   6:quantum/quantum.c **** #ifndef TAPPING_TERM
   7:quantum/quantum.c **** #define TAPPING_TERM 200
   8:quantum/quantum.c **** #endif
   9:quantum/quantum.c **** 
  10:quantum/quantum.c **** #include "backlight.h"
  11:quantum/quantum.c **** extern backlight_config_t backlight_config;
  12:quantum/quantum.c **** 
  13:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  14:quantum/quantum.c **** #include "fauxclicky.h"
  15:quantum/quantum.c **** #endif
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  15               		.loc 1 17 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  38 0008 8C01      		movw r16,r24
  39 000a EB01      		movw r28,r22
  18:quantum/quantum.c ****   switch (code) {
  40               		.loc 1 18 0
  41 000c 9A95      		dec r25
  42               	.LVL1:
  43 000e 8115      		cp r24,__zero_reg__
  44 0010 9F41      		sbci r25,31
  45 0012 00F4      		brsh .L1
  19:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  20:quantum/quantum.c ****     break;
  21:quantum/quantum.c ****   default:
  22:quantum/quantum.c ****     return;
  23:quantum/quantum.c ****   }
  24:quantum/quantum.c **** 
  25:quantum/quantum.c ****   if (code & QK_LCTL)
  46               		.loc 1 25 0
  47 0014 10FF      		sbrs r17,0
  48 0016 00C0      		rjmp .L4
  26:quantum/quantum.c ****     f(KC_LCTL);
  49               		.loc 1 26 0
  50 0018 80EE      		ldi r24,lo8(-32)
  51 001a FB01      		movw r30,r22
  52 001c 0995      		icall
  53               	.LVL2:
  54               	.L4:
  27:quantum/quantum.c ****   if (code & QK_LSFT)
  55               		.loc 1 27 0
  56 001e 11FF      		sbrs r17,1
  57 0020 00C0      		rjmp .L5
  28:quantum/quantum.c ****     f(KC_LSFT);
  58               		.loc 1 28 0
  59 0022 81EE      		ldi r24,lo8(-31)
  60 0024 FE01      		movw r30,r28
  61 0026 0995      		icall
  62               	.LVL3:
  63               	.L5:
  29:quantum/quantum.c ****   if (code & QK_LALT)
  64               		.loc 1 29 0
  65 0028 12FF      		sbrs r17,2
  66 002a 00C0      		rjmp .L6
  30:quantum/quantum.c ****     f(KC_LALT);
  67               		.loc 1 30 0
  68 002c 82EE      		ldi r24,lo8(-30)
  69 002e FE01      		movw r30,r28
  70 0030 0995      		icall
  71               	.LVL4:
  72               	.L6:
  31:quantum/quantum.c ****   if (code & QK_LGUI)
  73               		.loc 1 31 0
  74 0032 13FF      		sbrs r17,3
  75 0034 00C0      		rjmp .L7
  32:quantum/quantum.c ****     f(KC_LGUI);
  76               		.loc 1 32 0
  77 0036 83EE      		ldi r24,lo8(-29)
  78 0038 FE01      		movw r30,r28
  79 003a 0995      		icall
  80               	.LVL5:
  81               	.L7:
  33:quantum/quantum.c **** 
  34:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  82               		.loc 1 34 0
  83 003c 0115      		cp r16,__zero_reg__
  84 003e 1041      		sbci r17,16
  85 0040 00F4      		brsh .L21
  86               	.L1:
  87               	/* epilogue start */
  35:quantum/quantum.c **** 
  36:quantum/quantum.c ****   if (code & QK_RCTL)
  37:quantum/quantum.c ****     f(KC_RCTL);
  38:quantum/quantum.c ****   if (code & QK_RSFT)
  39:quantum/quantum.c ****     f(KC_RSFT);
  40:quantum/quantum.c ****   if (code & QK_RALT)
  41:quantum/quantum.c ****     f(KC_RALT);
  42:quantum/quantum.c ****   if (code & QK_RGUI)
  43:quantum/quantum.c ****     f(KC_RGUI);
  44:quantum/quantum.c **** }
  88               		.loc 1 44 0
  89 0042 DF91      		pop r29
  90 0044 CF91      		pop r28
  91               	.LVL6:
  92 0046 1F91      		pop r17
  93 0048 0F91      		pop r16
  94               	.LVL7:
  95 004a 0895      		ret
  96               	.LVL8:
  97               	.L21:
  37:quantum/quantum.c ****   if (code & QK_RSFT)
  98               		.loc 1 37 0
  99 004c 84EE      		ldi r24,lo8(-28)
 100 004e FE01      		movw r30,r28
 101 0050 0995      		icall
 102               	.LVL9:
  39:quantum/quantum.c ****   if (code & QK_RALT)
 103               		.loc 1 39 0
 104 0052 85EE      		ldi r24,lo8(-27)
 105 0054 FE01      		movw r30,r28
 106 0056 0995      		icall
 107               	.LVL10:
  41:quantum/quantum.c ****   if (code & QK_RGUI)
 108               		.loc 1 41 0
 109 0058 86EE      		ldi r24,lo8(-26)
 110 005a FE01      		movw r30,r28
 111 005c 0995      		icall
 112               	.LVL11:
  43:quantum/quantum.c **** }
 113               		.loc 1 43 0
 114 005e 87EE      		ldi r24,lo8(-25)
 115 0060 FE01      		movw r30,r28
 116               	/* epilogue start */
 117               		.loc 1 44 0
 118 0062 DF91      		pop r29
 119 0064 CF91      		pop r28
 120               	.LVL12:
 121 0066 1F91      		pop r17
 122 0068 0F91      		pop r16
 123               	.LVL13:
  43:quantum/quantum.c **** }
 124               		.loc 1 43 0
 125 006a 0994      		ijmp
 126               	.LVL14:
 127               		.cfi_endproc
 128               	.LFE107:
 130               		.section	.text.qk_register_weak_mods,"ax",@progbits
 132               	qk_register_weak_mods:
 133               	.LFB108:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 134               		.loc 1 46 0
 135               		.cfi_startproc
 136               	.LVL15:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  47:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 141               		.loc 1 47 0
 142 0000 8770      		andi r24,lo8(7)
 143               	.LVL16:
 144 0002 91E0      		ldi r25,lo8(1)
 145 0004 00C0      		rjmp 2f
 146               		1:
 147 0006 990F      		lsl r25
 148               		2:
 149 0008 8A95      		dec r24
 150 000a 02F4      		brpl 1b
 151 000c 892F      		mov r24,r25
 152 000e 0E94 0000 		call add_weak_mods
 153               	.LVL17:
  48:quantum/quantum.c ****     send_keyboard_report();
 154               		.loc 1 48 0
 155 0012 0C94 0000 		jmp send_keyboard_report
 156               	.LVL18:
 157               		.cfi_endproc
 158               	.LFE108:
 160               		.section	.text.qk_register_mods,"ax",@progbits
 162               	qk_register_mods:
 163               	.LFB147:
 164               		.cfi_startproc
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
 169 0000 0C94 0000 		jmp qk_register_weak_mods
 170               		.cfi_endproc
 171               	.LFE147:
 173               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 175               	qk_unregister_weak_mods:
 176               	.LFB109:
  49:quantum/quantum.c **** }
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 177               		.loc 1 51 0
 178               		.cfi_startproc
 179               	.LVL19:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  52:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 184               		.loc 1 52 0
 185 0000 8770      		andi r24,lo8(7)
 186               	.LVL20:
 187 0002 91E0      		ldi r25,lo8(1)
 188 0004 00C0      		rjmp 2f
 189               		1:
 190 0006 990F      		lsl r25
 191               		2:
 192 0008 8A95      		dec r24
 193 000a 02F4      		brpl 1b
 194 000c 892F      		mov r24,r25
 195 000e 0E94 0000 		call del_weak_mods
 196               	.LVL21:
  53:quantum/quantum.c ****     send_keyboard_report();
 197               		.loc 1 53 0
 198 0012 0C94 0000 		jmp send_keyboard_report
 199               	.LVL22:
 200               		.cfi_endproc
 201               	.LFE109:
 203               		.section	.text.qk_unregister_mods,"ax",@progbits
 205               	qk_unregister_mods:
 206               	.LFB149:
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212 0000 0C94 0000 		jmp qk_unregister_weak_mods
 213               		.cfi_endproc
 214               	.LFE149:
 216               		.section	.text.register_code16,"ax",@progbits
 217               	.global	register_code16
 219               	register_code16:
 220               	.LFB112:
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
  57:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
  58:quantum/quantum.c ****     send_keyboard_report();
  59:quantum/quantum.c **** }
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
  62:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
  63:quantum/quantum.c ****     send_keyboard_report();
  64:quantum/quantum.c **** }
  65:quantum/quantum.c **** 
  66:quantum/quantum.c **** void register_code16 (uint16_t code) {
 221               		.loc 1 66 0
 222               		.cfi_startproc
 223               	.LVL23:
 224               		.loc 1 66 0
 225 0000 CF93      		push r28
 226               	.LCFI4:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 28, -2
 229 0002 DF93      		push r29
 230               	.LCFI5:
 231               		.cfi_def_cfa_offset 4
 232               		.cfi_offset 29, -3
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 2 */
 236               	.L__stack_usage = 2
 237 0004 EC01      		movw r28,r24
  67:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 238               		.loc 1 67 0
 239 0006 805E      		subi r24,-32
 240 0008 9109      		sbc r25,__zero_reg__
 241               	.LVL24:
 242 000a 0897      		sbiw r24,8
 243 000c 00F0      		brlo .L27
  68:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
  69:quantum/quantum.c ****   } else {
  70:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 244               		.loc 1 70 0 discriminator 1
 245 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 246 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
  67:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 247               		.loc 1 67 0 discriminator 1
 248 0012 2097      		sbiw r28,0
 249 0014 01F4      		brne .L30
 250               	.L27:
  68:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 251               		.loc 1 68 0
 252 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 253 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 254               	.L30:
 255               		.loc 1 70 0
 256 001a CE01      		movw r24,r28
 257 001c 0E94 0000 		call do_code16
 258               	.LVL25:
  71:quantum/quantum.c ****   }
  72:quantum/quantum.c ****   register_code (code);
 259               		.loc 1 72 0
 260 0020 8C2F      		mov r24,r28
 261               	/* epilogue start */
  73:quantum/quantum.c **** }
 262               		.loc 1 73 0
 263 0022 DF91      		pop r29
 264 0024 CF91      		pop r28
 265               	.LVL26:
  72:quantum/quantum.c **** }
 266               		.loc 1 72 0
 267 0026 0C94 0000 		jmp register_code
 268               	.LVL27:
 269               		.cfi_endproc
 270               	.LFE112:
 272               		.section	.text.unregister_code16,"ax",@progbits
 273               	.global	unregister_code16
 275               	unregister_code16:
 276               	.LFB113:
  74:quantum/quantum.c **** 
  75:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 277               		.loc 1 75 0
 278               		.cfi_startproc
 279               	.LVL28:
 280 0000 CF93      		push r28
 281               	.LCFI6:
 282               		.cfi_def_cfa_offset 3
 283               		.cfi_offset 28, -2
 284 0002 DF93      		push r29
 285               	.LCFI7:
 286               		.cfi_def_cfa_offset 4
 287               		.cfi_offset 29, -3
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 2 */
 291               	.L__stack_usage = 2
 292 0004 EC01      		movw r28,r24
  76:quantum/quantum.c ****   unregister_code (code);
 293               		.loc 1 76 0
 294 0006 0E94 0000 		call unregister_code
 295               	.LVL29:
  77:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 296               		.loc 1 77 0
 297 000a CE01      		movw r24,r28
 298 000c 805E      		subi r24,-32
 299 000e 9109      		sbc r25,__zero_reg__
 300 0010 0897      		sbiw r24,8
 301 0012 00F0      		brlo .L32
  78:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
  79:quantum/quantum.c ****   } else {
  80:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 302               		.loc 1 80 0 discriminator 1
 303 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 304 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
  77:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 305               		.loc 1 77 0 discriminator 1
 306 0018 2097      		sbiw r28,0
 307 001a 01F4      		brne .L34
 308               	.L32:
  78:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 309               		.loc 1 78 0
 310 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 311 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 312               	.L34:
 313               		.loc 1 80 0
 314 0020 CE01      		movw r24,r28
 315               	/* epilogue start */
  81:quantum/quantum.c ****   }
  82:quantum/quantum.c **** }
 316               		.loc 1 82 0
 317 0022 DF91      		pop r29
 318 0024 CF91      		pop r28
 319               	.LVL30:
  80:quantum/quantum.c ****   }
 320               		.loc 1 80 0
 321 0026 0C94 0000 		jmp do_code16
 322               	.LVL31:
 323               		.cfi_endproc
 324               	.LFE113:
 326               		.section	.text.process_action_kb,"ax",@progbits
 327               		.weak	process_action_kb
 329               	process_action_kb:
 330               	.LFB114:
  83:quantum/quantum.c **** 
  84:quantum/quantum.c **** __attribute__ ((weak))
  85:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 331               		.loc 1 85 0
 332               		.cfi_startproc
 333               	.LVL32:
 334               	/* prologue: function */
 335               	/* frame size = 0 */
 336               	/* stack size = 0 */
 337               	.L__stack_usage = 0
  86:quantum/quantum.c ****   return true;
  87:quantum/quantum.c **** }
 338               		.loc 1 87 0
 339 0000 81E0      		ldi r24,lo8(1)
 340               	.LVL33:
 341               	/* epilogue start */
 342 0002 0895      		ret
 343               		.cfi_endproc
 344               	.LFE114:
 346               		.section	.text.process_record_user,"ax",@progbits
 347               		.weak	process_record_user
 349               	process_record_user:
 350               	.LFB116:
  88:quantum/quantum.c **** 
  89:quantum/quantum.c **** __attribute__ ((weak))
  90:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  91:quantum/quantum.c ****   return process_record_user(keycode, record);
  92:quantum/quantum.c **** }
  93:quantum/quantum.c **** 
  94:quantum/quantum.c **** __attribute__ ((weak))
  95:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 351               		.loc 1 95 0
 352               		.cfi_startproc
 353               	.LVL34:
 354               	/* prologue: function */
 355               	/* frame size = 0 */
 356               	/* stack size = 0 */
 357               	.L__stack_usage = 0
  96:quantum/quantum.c ****   return true;
  97:quantum/quantum.c **** }
 358               		.loc 1 97 0
 359 0000 81E0      		ldi r24,lo8(1)
 360               	.LVL35:
 361               	/* epilogue start */
 362 0002 0895      		ret
 363               		.cfi_endproc
 364               	.LFE116:
 366               		.section	.text.process_record_kb,"ax",@progbits
 367               		.weak	process_record_kb
 369               	process_record_kb:
 370               	.LFB115:
  90:quantum/quantum.c ****   return process_record_user(keycode, record);
 371               		.loc 1 90 0
 372               		.cfi_startproc
 373               	.LVL36:
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
  91:quantum/quantum.c **** }
 378               		.loc 1 91 0
 379 0000 0C94 0000 		jmp process_record_user
 380               	.LVL37:
 381               		.cfi_endproc
 382               	.LFE115:
 384               		.section	.text.reset_keyboard,"ax",@progbits
 385               	.global	reset_keyboard
 387               	reset_keyboard:
 388               	.LFB117:
  98:quantum/quantum.c **** 
  99:quantum/quantum.c **** void reset_keyboard(void) {
 389               		.loc 1 99 0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
 100:quantum/quantum.c ****   clear_keyboard();
 395               		.loc 1 100 0
 396 0000 0E94 0000 		call clear_keyboard
 397               	.LVL38:
 398               	.LBB4:
 399               	.LBB5:
 400               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 401               		.loc 2 187 0
 402 0004 2FEF      		ldi r18,lo8(799999)
 403 0006 84E3      		ldi r24,hi8(799999)
 404 0008 9CE0      		ldi r25,hlo8(799999)
 405 000a 2150      	1:	subi r18,1
 406 000c 8040      		sbci r24,0
 407 000e 9040      		sbci r25,0
 408 0010 01F4      		brne 1b
 409 0012 00C0      		rjmp .
 410 0014 0000      		nop
 411               	.LVL39:
 412               	.LBE5:
 413               	.LBE4:
 101:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 102:quantum/quantum.c ****   stop_all_notes();
 103:quantum/quantum.c ****   shutdown_user();
 104:quantum/quantum.c **** #endif
 105:quantum/quantum.c ****   wait_ms(250);
 106:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
 107:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 108:quantum/quantum.c **** #endif
 109:quantum/quantum.c ****   bootloader_jump();
 414               		.loc 1 109 0
 415 0016 0C94 0000 		jmp bootloader_jump
 416               	.LVL40:
 417               		.cfi_endproc
 418               	.LFE117:
 420               		.section	.text.process_record_quantum,"ax",@progbits
 421               	.global	process_record_quantum
 423               	process_record_quantum:
 424               	.LFB118:
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** // Shift / paren setup
 113:quantum/quantum.c **** 
 114:quantum/quantum.c **** #ifndef LSPO_KEY
 115:quantum/quantum.c ****   #define LSPO_KEY KC_9
 116:quantum/quantum.c **** #endif
 117:quantum/quantum.c **** #ifndef RSPC_KEY
 118:quantum/quantum.c ****   #define RSPC_KEY KC_0
 119:quantum/quantum.c **** #endif
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 122:quantum/quantum.c **** static uint16_t scs_timer = 0;
 123:quantum/quantum.c **** 
 124:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 425               		.loc 1 124 0
 426               		.cfi_startproc
 427               	.LVL41:
 428 0000 0F93      		push r16
 429               	.LCFI8:
 430               		.cfi_def_cfa_offset 3
 431               		.cfi_offset 16, -2
 432 0002 1F93      		push r17
 433               	.LCFI9:
 434               		.cfi_def_cfa_offset 4
 435               		.cfi_offset 17, -3
 436 0004 CF93      		push r28
 437               	.LCFI10:
 438               		.cfi_def_cfa_offset 5
 439               		.cfi_offset 28, -4
 440 0006 DF93      		push r29
 441               	.LCFI11:
 442               		.cfi_def_cfa_offset 6
 443               		.cfi_offset 29, -5
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 4 */
 447               	.L__stack_usage = 4
 448 0008 8C01      		movw r16,r24
 125:quantum/quantum.c **** 
 126:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 127:quantum/quantum.c ****   keypos_t key = record->event.key;
 449               		.loc 1 127 0
 450 000a FC01      		movw r30,r24
 451 000c C081      		ld r28,Z
 452 000e D181      		ldd r29,Z+1
 453               	.LVL42:
 128:quantum/quantum.c ****   uint16_t keycode;
 129:quantum/quantum.c **** 
 130:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 131:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 132:quantum/quantum.c ****     if (!disable_action_cache) {
 133:quantum/quantum.c ****       uint8_t layer;
 134:quantum/quantum.c **** 
 135:quantum/quantum.c ****       if (record->event.pressed) {
 136:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 137:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 138:quantum/quantum.c ****       } else {
 139:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 140:quantum/quantum.c ****       }
 141:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 142:quantum/quantum.c ****     } else
 143:quantum/quantum.c ****   #endif
 144:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 454               		.loc 1 144 0
 455 0010 CE01      		movw r24,r28
 456               	.LVL43:
 457 0012 0E94 0000 		call layer_switch_get_layer
 458               	.LVL44:
 459 0016 BE01      		movw r22,r28
 460 0018 0E94 0000 		call keymap_key_to_keycode
 461               	.LVL45:
 462 001c EC01      		movw r28,r24
 463               	.LVL46:
 145:quantum/quantum.c **** 
 146:quantum/quantum.c ****     // This is how you use actions here
 147:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 148:quantum/quantum.c ****     //   action_t action;
 149:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 150:quantum/quantum.c ****     //   process_action(record, action);
 151:quantum/quantum.c ****     //   return false;
 152:quantum/quantum.c ****     // }
 153:quantum/quantum.c **** 
 154:quantum/quantum.c ****   if (!(
 155:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 464               		.loc 1 155 0
 465 001e B801      		movw r22,r16
 466 0020 0E94 0000 		call process_record_kb
 467               	.LVL47:
 156:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 157:quantum/quantum.c ****     process_midi(keycode, record) &&
 158:quantum/quantum.c ****   #endif
 159:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 160:quantum/quantum.c ****     process_music(keycode, record) &&
 161:quantum/quantum.c ****   #endif
 162:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 163:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 164:quantum/quantum.c ****   #endif
 165:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 166:quantum/quantum.c ****     process_leader(keycode, record) &&
 468               		.loc 1 166 0
 469 0024 8823      		tst r24
 470 0026 01F4      		brne .+2
 471 0028 00C0      		rjmp .L39
 472               		.loc 1 166 0 is_stmt 0 discriminator 2
 473 002a B801      		movw r22,r16
 474 002c CE01      		movw r24,r28
 475 002e 0E94 0000 		call process_leader
 476               	.LVL48:
 155:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 477               		.loc 1 155 0 is_stmt 1 discriminator 2
 478 0032 8823      		tst r24
 479 0034 01F4      		brne .+2
 480 0036 00C0      		rjmp .L39
 167:quantum/quantum.c ****   #endif
 168:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 169:quantum/quantum.c ****     process_chording(keycode, record) &&
 170:quantum/quantum.c ****   #endif
 171:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 172:quantum/quantum.c ****     process_combo(keycode, record) &&
 173:quantum/quantum.c ****   #endif
 174:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 175:quantum/quantum.c ****     process_unicode(keycode, record) &&
 481               		.loc 1 175 0 discriminator 3
 482 0038 B801      		movw r22,r16
 483 003a CE01      		movw r24,r28
 484 003c 0E94 0000 		call process_unicode
 485               	.LVL49:
 166:quantum/quantum.c ****   #endif
 486               		.loc 1 166 0 discriminator 3
 487 0040 8823      		tst r24
 488 0042 01F4      		brne .+2
 489 0044 00C0      		rjmp .L39
 176:quantum/quantum.c ****   #endif
 177:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 178:quantum/quantum.c ****     process_ucis(keycode, record) &&
 179:quantum/quantum.c ****   #endif
 180:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 181:quantum/quantum.c ****     process_printer(keycode, record) &&
 182:quantum/quantum.c ****   #endif
 183:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 184:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 185:quantum/quantum.c ****   #endif
 186:quantum/quantum.c ****       true)) {
 187:quantum/quantum.c ****     return false;
 188:quantum/quantum.c ****   }
 189:quantum/quantum.c **** 
 190:quantum/quantum.c ****   // Shift / paren setup
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   switch(keycode) {
 490               		.loc 1 192 0
 491 0046 C531      		cpi r28,21
 492 0048 FCE5      		ldi r31,92
 493 004a DF07      		cpc r29,r31
 494 004c 00F4      		brsh .L44
 495 004e C230      		cpi r28,2
 496 0050 8CE5      		ldi r24,92
 497 0052 D807      		cpc r29,r24
 498 0054 00F0      		brlo .+2
 499 0056 00C0      		rjmp .L45
 500 0058 C115      		cp r28,__zero_reg__
 501 005a ECE5      		ldi r30,92
 502 005c DE07      		cpc r29,r30
 503 005e 01F0      		breq .L46
 504 0060 C130      		cpi r28,1
 505 0062 DC45      		sbci r29,92
 506 0064 01F4      		brne .+2
 507 0066 00C0      		rjmp .L47
 508               	.L43:
 193:quantum/quantum.c ****     case RESET:
 194:quantum/quantum.c ****       if (record->event.pressed) {
 195:quantum/quantum.c ****         reset_keyboard();
 196:quantum/quantum.c ****       }
 197:quantum/quantum.c **** 	  return false;
 198:quantum/quantum.c ****       break;
 199:quantum/quantum.c ****     case DEBUG:
 200:quantum/quantum.c ****       if (record->event.pressed) {
 201:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 202:quantum/quantum.c ****           debug_enable = true;
 203:quantum/quantum.c ****       }
 204:quantum/quantum.c **** 	  return false;
 205:quantum/quantum.c ****       break;
 206:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 207:quantum/quantum.c ****   case FC_TOG:
 208:quantum/quantum.c ****     if (record->event.pressed) {
 209:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 210:quantum/quantum.c ****     }
 211:quantum/quantum.c ****     return false;
 212:quantum/quantum.c ****     break;
 213:quantum/quantum.c ****   case FC_ON:
 214:quantum/quantum.c ****     if (record->event.pressed) {
 215:quantum/quantum.c ****       FAUXCLICKY_ON;
 216:quantum/quantum.c ****     }
 217:quantum/quantum.c ****     return false;
 218:quantum/quantum.c ****     break;
 219:quantum/quantum.c ****   case FC_OFF:
 220:quantum/quantum.c ****     if (record->event.pressed) {
 221:quantum/quantum.c ****       FAUXCLICKY_OFF;
 222:quantum/quantum.c ****     }
 223:quantum/quantum.c ****     return false;
 224:quantum/quantum.c ****     break;
 225:quantum/quantum.c ****   #endif
 226:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 227:quantum/quantum.c **** 	case RGB_TOG:
 228:quantum/quantum.c **** 		if (record->event.pressed) {
 229:quantum/quantum.c **** 			rgblight_toggle();
 230:quantum/quantum.c ****       }
 231:quantum/quantum.c **** 	  return false;
 232:quantum/quantum.c ****       break;
 233:quantum/quantum.c **** 	case RGB_MOD:
 234:quantum/quantum.c **** 		if (record->event.pressed) {
 235:quantum/quantum.c **** 			rgblight_step();
 236:quantum/quantum.c ****       }
 237:quantum/quantum.c **** 	  return false;
 238:quantum/quantum.c ****       break;
 239:quantum/quantum.c **** 	case RGB_HUI:
 240:quantum/quantum.c **** 		if (record->event.pressed) {
 241:quantum/quantum.c **** 			rgblight_increase_hue();
 242:quantum/quantum.c ****       }
 243:quantum/quantum.c **** 	  return false;
 244:quantum/quantum.c ****       break;
 245:quantum/quantum.c **** 	case RGB_HUD:
 246:quantum/quantum.c **** 		if (record->event.pressed) {
 247:quantum/quantum.c **** 			rgblight_decrease_hue();
 248:quantum/quantum.c ****       }
 249:quantum/quantum.c **** 	  return false;
 250:quantum/quantum.c ****       break;
 251:quantum/quantum.c **** 	case RGB_SAI:
 252:quantum/quantum.c **** 		if (record->event.pressed) {
 253:quantum/quantum.c **** 			rgblight_increase_sat();
 254:quantum/quantum.c ****       }
 255:quantum/quantum.c **** 	  return false;
 256:quantum/quantum.c ****       break;
 257:quantum/quantum.c **** 	case RGB_SAD:
 258:quantum/quantum.c **** 		if (record->event.pressed) {
 259:quantum/quantum.c **** 			rgblight_decrease_sat();
 260:quantum/quantum.c ****       }
 261:quantum/quantum.c **** 	  return false;
 262:quantum/quantum.c ****       break;
 263:quantum/quantum.c **** 	case RGB_VAI:
 264:quantum/quantum.c **** 		if (record->event.pressed) {
 265:quantum/quantum.c **** 			rgblight_increase_val();
 266:quantum/quantum.c ****       }
 267:quantum/quantum.c **** 	  return false;
 268:quantum/quantum.c ****       break;
 269:quantum/quantum.c **** 	case RGB_VAD:
 270:quantum/quantum.c **** 		if (record->event.pressed) {
 271:quantum/quantum.c **** 			rgblight_decrease_val();
 272:quantum/quantum.c ****       }
 273:quantum/quantum.c **** 	  return false;
 274:quantum/quantum.c ****       break;
 275:quantum/quantum.c **** 	#endif
 276:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 277:quantum/quantum.c ****     case OUT_AUTO:
 278:quantum/quantum.c ****       if (record->event.pressed) {
 279:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 280:quantum/quantum.c ****       }
 281:quantum/quantum.c ****       return false;
 282:quantum/quantum.c ****       break;
 283:quantum/quantum.c ****     case OUT_USB:
 284:quantum/quantum.c ****       if (record->event.pressed) {
 285:quantum/quantum.c ****         set_output(OUTPUT_USB);
 286:quantum/quantum.c ****       }
 287:quantum/quantum.c ****       return false;
 288:quantum/quantum.c ****       break;
 289:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 290:quantum/quantum.c ****     case OUT_BT:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 293:quantum/quantum.c ****       }
 294:quantum/quantum.c ****       return false;
 295:quantum/quantum.c ****       break;
 296:quantum/quantum.c ****     #endif
 297:quantum/quantum.c ****     #ifdef ADAFRUIT_BLE_ENABLE
 298:quantum/quantum.c ****     case OUT_BLE:
 299:quantum/quantum.c ****       if (record->event.pressed) {
 300:quantum/quantum.c ****         set_output(OUTPUT_ADAFRUIT_BLE);
 301:quantum/quantum.c ****       }
 302:quantum/quantum.c ****       return false;
 303:quantum/quantum.c ****       break;
 304:quantum/quantum.c ****     #endif
 305:quantum/quantum.c ****     #endif
 306:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 307:quantum/quantum.c ****       if (record->event.pressed) {
 308:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 309:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 310:quantum/quantum.c ****             eeconfig_init();
 311:quantum/quantum.c ****         }
 312:quantum/quantum.c ****         /* keymap config */
 313:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 314:quantum/quantum.c ****         switch (keycode)
 315:quantum/quantum.c ****         {
 316:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 317:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 318:quantum/quantum.c ****             break;
 319:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 320:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 321:quantum/quantum.c ****             break;
 322:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 323:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 324:quantum/quantum.c ****             break;
 325:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 326:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 327:quantum/quantum.c ****             break;
 328:quantum/quantum.c ****           case MAGIC_NO_GUI:
 329:quantum/quantum.c ****             keymap_config.no_gui = true;
 330:quantum/quantum.c ****             break;
 331:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 332:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 333:quantum/quantum.c ****             break;
 334:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 335:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 336:quantum/quantum.c ****             break;
 337:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 338:quantum/quantum.c ****             keymap_config.nkro = true;
 339:quantum/quantum.c ****             break;
 340:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 341:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 342:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 343:quantum/quantum.c ****             break;
 344:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 345:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 346:quantum/quantum.c ****             break;
 347:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 348:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 349:quantum/quantum.c ****             break;
 350:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 351:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 352:quantum/quantum.c ****             break;
 353:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 354:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 355:quantum/quantum.c ****             break;
 356:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 357:quantum/quantum.c ****             keymap_config.no_gui = false;
 358:quantum/quantum.c ****             break;
 359:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 360:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 361:quantum/quantum.c ****             break;
 362:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 363:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 364:quantum/quantum.c ****             break;
 365:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 366:quantum/quantum.c ****             keymap_config.nkro = false;
 367:quantum/quantum.c ****             break;
 368:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 369:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 370:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 371:quantum/quantum.c ****             break;
 372:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 373:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 374:quantum/quantum.c ****             break;
 375:quantum/quantum.c ****           default:
 376:quantum/quantum.c ****             break;
 377:quantum/quantum.c ****         }
 378:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 379:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 380:quantum/quantum.c **** 
 381:quantum/quantum.c ****         return false;
 382:quantum/quantum.c ****       }
 383:quantum/quantum.c ****       break;
 384:quantum/quantum.c ****     case KC_LSPO: {
 385:quantum/quantum.c ****       if (record->event.pressed) {
 386:quantum/quantum.c ****         shift_interrupted[0] = false;
 387:quantum/quantum.c ****         scs_timer = timer_read ();
 388:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 389:quantum/quantum.c ****       }
 390:quantum/quantum.c ****       else {
 391:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 392:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 393:quantum/quantum.c ****             shift_interrupted[0] = true;
 394:quantum/quantum.c ****             shift_interrupted[1] = true;
 395:quantum/quantum.c ****           }
 396:quantum/quantum.c ****         #endif
 397:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 398:quantum/quantum.c ****           register_code(LSPO_KEY);
 399:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 400:quantum/quantum.c ****         }
 401:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 402:quantum/quantum.c ****       }
 403:quantum/quantum.c ****       return false;
 404:quantum/quantum.c ****       // break;
 405:quantum/quantum.c ****     }
 406:quantum/quantum.c **** 
 407:quantum/quantum.c ****     case KC_RSPC: {
 408:quantum/quantum.c ****       if (record->event.pressed) {
 409:quantum/quantum.c ****         shift_interrupted[1] = false;
 410:quantum/quantum.c ****         scs_timer = timer_read ();
 411:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 412:quantum/quantum.c ****       }
 413:quantum/quantum.c ****       else {
 414:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 415:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 416:quantum/quantum.c ****             shift_interrupted[0] = true;
 417:quantum/quantum.c ****             shift_interrupted[1] = true;
 418:quantum/quantum.c ****           }
 419:quantum/quantum.c ****         #endif
 420:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 421:quantum/quantum.c ****           register_code(RSPC_KEY);
 422:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 423:quantum/quantum.c ****         }
 424:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 425:quantum/quantum.c ****       }
 426:quantum/quantum.c ****       return false;
 427:quantum/quantum.c ****       // break;
 428:quantum/quantum.c ****     }
 429:quantum/quantum.c ****     default: {
 430:quantum/quantum.c ****       shift_interrupted[0] = true;
 509               		.loc 1 430 0
 510 0068 81E0      		ldi r24,lo8(1)
 511 006a 8093 0000 		sts shift_interrupted,r24
 431:quantum/quantum.c ****       shift_interrupted[1] = true;
 512               		.loc 1 431 0
 513 006e 8093 0000 		sts shift_interrupted+1,r24
 514               	.L53:
 432:quantum/quantum.c ****       break;
 433:quantum/quantum.c ****     }
 434:quantum/quantum.c ****   }
 435:quantum/quantum.c **** 
 436:quantum/quantum.c ****   return process_action_kb(record);
 515               		.loc 1 436 0
 516 0072 C801      		movw r24,r16
 517               	/* epilogue start */
 437:quantum/quantum.c **** }
 518               		.loc 1 437 0
 519 0074 DF91      		pop r29
 520 0076 CF91      		pop r28
 521               	.LVL50:
 522 0078 1F91      		pop r17
 523 007a 0F91      		pop r16
 524               	.LVL51:
 436:quantum/quantum.c **** }
 525               		.loc 1 436 0
 526 007c 0C94 0000 		jmp process_action_kb
 527               	.LVL52:
 528               	.L44:
 192:quantum/quantum.c ****     case RESET:
 529               		.loc 1 192 0
 530 0080 CD33      		cpi r28,61
 531 0082 8CE5      		ldi r24,92
 532 0084 D807      		cpc r29,r24
 533 0086 01F4      		brne .+2
 534 0088 00C0      		rjmp .L48
 535 008a 00F4      		brsh .L49
 536 008c CC33      		cpi r28,60
 537 008e DC45      		sbci r29,92
 538 0090 01F4      		brne .L43
 385:quantum/quantum.c ****         shift_interrupted[0] = false;
 539               		.loc 1 385 0
 540 0092 F801      		movw r30,r16
 541 0094 8281      		ldd r24,Z+2
 542 0096 8823      		tst r24
 543 0098 01F4      		brne .+2
 544 009a 00C0      		rjmp .L76
 386:quantum/quantum.c ****         scs_timer = timer_read ();
 545               		.loc 1 386 0
 546 009c 1092 0000 		sts shift_interrupted,__zero_reg__
 387:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 547               		.loc 1 387 0
 548 00a0 0E94 0000 		call timer_read
 549               	.LVL53:
 550 00a4 9093 0000 		sts scs_timer+1,r25
 551 00a8 8093 0000 		sts scs_timer,r24
 388:quantum/quantum.c ****       }
 552               		.loc 1 388 0
 553 00ac 82E0      		ldi r24,lo8(2)
 554               	.L107:
 411:quantum/quantum.c ****       }
 555               		.loc 1 411 0
 556 00ae 0E94 0000 		call register_mods
 557               	.LVL54:
 558 00b2 00C0      		rjmp .L39
 559               	.L49:
 192:quantum/quantum.c ****     case RESET:
 560               		.loc 1 192 0
 561 00b4 C034      		cpi r28,64
 562 00b6 8CE5      		ldi r24,92
 563 00b8 D807      		cpc r29,r24
 564 00ba 01F0      		breq .L51
 565 00bc C134      		cpi r28,65
 566 00be DC45      		sbci r29,92
 567 00c0 01F4      		brne .L43
 284:quantum/quantum.c ****         set_output(OUTPUT_USB);
 568               		.loc 1 284 0
 569 00c2 F801      		movw r30,r16
 570 00c4 8281      		ldd r24,Z+2
 571 00c6 8823      		tst r24
 572 00c8 01F0      		breq .L39
 285:quantum/quantum.c ****       }
 573               		.loc 1 285 0
 574 00ca 82E0      		ldi r24,lo8(2)
 575 00cc 00C0      		rjmp .L106
 576               	.L46:
 194:quantum/quantum.c ****         reset_keyboard();
 577               		.loc 1 194 0
 578 00ce F801      		movw r30,r16
 579 00d0 8281      		ldd r24,Z+2
 580 00d2 8111      		cpse r24,__zero_reg__
 195:quantum/quantum.c ****       }
 581               		.loc 1 195 0
 582 00d4 0E94 0000 		call reset_keyboard
 583               	.LVL55:
 584               	.L39:
 585               		.loc 1 437 0
 586 00d8 80E0      		ldi r24,0
 587               	/* epilogue start */
 588 00da DF91      		pop r29
 589 00dc CF91      		pop r28
 590               	.LVL56:
 591 00de 1F91      		pop r17
 592 00e0 0F91      		pop r16
 593               	.LVL57:
 594 00e2 0895      		ret
 595               	.LVL58:
 596               	.L47:
 200:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 597               		.loc 1 200 0
 598 00e4 F801      		movw r30,r16
 599 00e6 8281      		ldd r24,Z+2
 600 00e8 8823      		tst r24
 601 00ea 01F0      		breq .L39
 202:quantum/quantum.c ****       }
 602               		.loc 1 202 0
 603 00ec 8091 0000 		lds r24,debug_config
 604 00f0 8160      		ori r24,lo8(1<<0)
 605 00f2 8093 0000 		sts debug_config,r24
 606 00f6 00C0      		rjmp .L39
 607               	.L51:
 278:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 608               		.loc 1 278 0
 609 00f8 F801      		movw r30,r16
 610 00fa 8281      		ldd r24,Z+2
 611 00fc 8823      		tst r24
 612 00fe 01F0      		breq .L39
 279:quantum/quantum.c ****       }
 613               		.loc 1 279 0
 614 0100 80E0      		ldi r24,0
 615               	.L106:
 285:quantum/quantum.c ****       }
 616               		.loc 1 285 0
 617 0102 0E94 0000 		call set_output
 618               	.LVL59:
 619 0106 00C0      		rjmp .L39
 620               	.L45:
 307:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 621               		.loc 1 307 0
 622 0108 F801      		movw r30,r16
 623 010a 8281      		ldd r24,Z+2
 624 010c 8823      		tst r24
 625 010e 01F4      		brne .+2
 626 0110 00C0      		rjmp .L53
 309:quantum/quantum.c ****             eeconfig_init();
 627               		.loc 1 309 0
 628 0112 0E94 0000 		call eeconfig_is_enabled
 629               	.LVL60:
 630 0116 8111      		cpse r24,__zero_reg__
 631 0118 00C0      		rjmp .L54
 310:quantum/quantum.c ****         }
 632               		.loc 1 310 0
 633 011a 0E94 0000 		call eeconfig_init
 634               	.LVL61:
 635               	.L54:
 313:quantum/quantum.c ****         switch (keycode)
 636               		.loc 1 313 0
 637 011e 0E94 0000 		call eeconfig_read_keymap
 638               	.LVL62:
 639 0122 90E0      		ldi r25,0
 640 0124 9093 0000 		sts keymap_config+1,r25
 641 0128 8093 0000 		sts keymap_config,r24
 314:quantum/quantum.c ****         {
 642               		.loc 1 314 0
 643 012c FE01      		movw r30,r28
 644 012e E350      		subi r30,3
 645 0130 FC45      		sbci r31,92
 317:quantum/quantum.c ****             break;
 646               		.loc 1 317 0
 647 0132 8091 0000 		lds r24,keymap_config
 648 0136 8160      		ori r24,lo8(1<<0)
 314:quantum/quantum.c ****         {
 649               		.loc 1 314 0
 650 0138 E231      		cpi r30,18
 651 013a F105      		cpc r31,__zero_reg__
 652 013c 00F4      		brsh .L105
 653 013e E050      		subi r30,lo8(-(gs(.L57)))
 654 0140 F040      		sbci r31,hi8(-(gs(.L57)))
 655 0142 0C94 0000 		jmp __tablejump2__
 656               		.p2align	1
 657               	.L57:
 658 0146 0000      		.word gs(.L56)
 659 0148 0000      		.word gs(.L58)
 660 014a 0000      		.word gs(.L59)
 661 014c 0000      		.word gs(.L60)
 662 014e 0000      		.word gs(.L61)
 663 0150 0000      		.word gs(.L62)
 664 0152 0000      		.word gs(.L63)
 665 0154 0000      		.word gs(.L64)
 666 0156 0000      		.word gs(.L65)
 667 0158 0000      		.word gs(.L66)
 668 015a 0000      		.word gs(.L67)
 669 015c 0000      		.word gs(.L68)
 670 015e 0000      		.word gs(.L69)
 671 0160 0000      		.word gs(.L70)
 672 0162 0000      		.word gs(.L71)
 673 0164 0000      		.word gs(.L72)
 674 0166 0000      		.word gs(.L73)
 675 0168 0000      		.word gs(.L74)
 676               	.L56:
 320:quantum/quantum.c ****             break;
 677               		.loc 1 320 0
 678 016a 8091 0000 		lds r24,keymap_config
 679 016e 8260      		ori r24,lo8(1<<1)
 680               	.L105:
 373:quantum/quantum.c ****             break;
 681               		.loc 1 373 0
 682 0170 8093 0000 		sts keymap_config,r24
 378:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 683               		.loc 1 378 0
 684 0174 8091 0000 		lds r24,keymap_config
 685 0178 0E94 0000 		call eeconfig_update_keymap
 686               	.LVL63:
 379:quantum/quantum.c **** 
 687               		.loc 1 379 0
 688 017c 0E94 0000 		call clear_keyboard
 689               	.LVL64:
 381:quantum/quantum.c ****       }
 690               		.loc 1 381 0
 691 0180 00C0      		rjmp .L39
 692               	.L58:
 323:quantum/quantum.c ****             break;
 693               		.loc 1 323 0
 694 0182 8091 0000 		lds r24,keymap_config
 695 0186 8460      		ori r24,lo8(1<<2)
 696 0188 00C0      		rjmp .L105
 697               	.L59:
 326:quantum/quantum.c ****             break;
 698               		.loc 1 326 0
 699 018a 8091 0000 		lds r24,keymap_config
 700               	.L110:
 342:quantum/quantum.c ****             break;
 701               		.loc 1 342 0
 702 018e 8860      		ori r24,lo8(1<<3)
 703 0190 00C0      		rjmp .L105
 704               	.L60:
 329:quantum/quantum.c ****             break;
 705               		.loc 1 329 0
 706 0192 8091 0000 		lds r24,keymap_config
 707 0196 8061      		ori r24,lo8(1<<4)
 708 0198 00C0      		rjmp .L105
 709               	.L61:
 332:quantum/quantum.c ****             break;
 710               		.loc 1 332 0
 711 019a 8091 0000 		lds r24,keymap_config
 712 019e 8062      		ori r24,lo8(1<<5)
 713 01a0 00C0      		rjmp .L105
 714               	.L62:
 335:quantum/quantum.c ****             break;
 715               		.loc 1 335 0
 716 01a2 8091 0000 		lds r24,keymap_config
 717 01a6 8064      		ori r24,lo8(1<<6)
 718 01a8 00C0      		rjmp .L105
 719               	.L63:
 338:quantum/quantum.c ****             break;
 720               		.loc 1 338 0
 721 01aa 8091 0000 		lds r24,keymap_config
 722 01ae 8068      		ori r24,lo8(1<<7)
 723 01b0 00C0      		rjmp .L105
 724               	.L64:
 341:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 725               		.loc 1 341 0
 726 01b2 8091 0000 		lds r24,keymap_config
 342:quantum/quantum.c ****             break;
 727               		.loc 1 342 0
 728 01b6 8460      		ori r24,lo8(4)
 729 01b8 00C0      		rjmp .L110
 730               	.L65:
 345:quantum/quantum.c ****             break;
 731               		.loc 1 345 0
 732 01ba 8091 0000 		lds r24,keymap_config
 733 01be 8E7F      		andi r24,lo8(~(1<<0))
 734 01c0 00C0      		rjmp .L105
 735               	.L66:
 348:quantum/quantum.c ****             break;
 736               		.loc 1 348 0
 737 01c2 8091 0000 		lds r24,keymap_config
 738 01c6 8D7F      		andi r24,lo8(~(1<<1))
 739 01c8 00C0      		rjmp .L105
 740               	.L67:
 351:quantum/quantum.c ****             break;
 741               		.loc 1 351 0
 742 01ca 8091 0000 		lds r24,keymap_config
 743 01ce 8B7F      		andi r24,lo8(~(1<<2))
 744 01d0 00C0      		rjmp .L105
 745               	.L68:
 354:quantum/quantum.c ****             break;
 746               		.loc 1 354 0
 747 01d2 8091 0000 		lds r24,keymap_config
 748               	.L109:
 370:quantum/quantum.c ****             break;
 749               		.loc 1 370 0
 750 01d6 877F      		andi r24,lo8(~(1<<3))
 751 01d8 00C0      		rjmp .L105
 752               	.L69:
 357:quantum/quantum.c ****             break;
 753               		.loc 1 357 0
 754 01da 8091 0000 		lds r24,keymap_config
 755 01de 8F7E      		andi r24,lo8(~(1<<4))
 756 01e0 00C0      		rjmp .L105
 757               	.L70:
 360:quantum/quantum.c ****             break;
 758               		.loc 1 360 0
 759 01e2 8091 0000 		lds r24,keymap_config
 760 01e6 8F7D      		andi r24,lo8(~(1<<5))
 761 01e8 00C0      		rjmp .L105
 762               	.L71:
 363:quantum/quantum.c ****             break;
 763               		.loc 1 363 0
 764 01ea 8091 0000 		lds r24,keymap_config
 765 01ee 8F7B      		andi r24,lo8(~(1<<6))
 766 01f0 00C0      		rjmp .L105
 767               	.L72:
 366:quantum/quantum.c ****             break;
 768               		.loc 1 366 0
 769 01f2 8091 0000 		lds r24,keymap_config
 770 01f6 8F77      		andi r24,lo8(~(1<<7))
 771 01f8 00C0      		rjmp .L105
 772               	.L73:
 369:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 773               		.loc 1 369 0
 774 01fa 8091 0000 		lds r24,keymap_config
 370:quantum/quantum.c ****             break;
 775               		.loc 1 370 0
 776 01fe 8B7F      		andi r24,lo8(-5)
 777 0200 00C0      		rjmp .L109
 778               	.L74:
 373:quantum/quantum.c ****             break;
 779               		.loc 1 373 0
 780 0202 9091 0000 		lds r25,keymap_config
 781 0206 892F      		mov r24,r25
 782 0208 97FB      		bst r25,7
 783 020a 87F9      		bld r24,7
 784 020c 8058      		subi r24,0x80
 785 020e 00C0      		rjmp .L105
 786               	.L76:
 397:quantum/quantum.c ****           register_code(LSPO_KEY);
 787               		.loc 1 397 0
 788 0210 8091 0000 		lds r24,shift_interrupted
 789 0214 8111      		cpse r24,__zero_reg__
 790 0216 00C0      		rjmp .L78
 397:quantum/quantum.c ****           register_code(LSPO_KEY);
 791               		.loc 1 397 0 is_stmt 0 discriminator 1
 792 0218 8091 0000 		lds r24,scs_timer
 793 021c 9091 0000 		lds r25,scs_timer+1
 794 0220 0E94 0000 		call timer_elapsed
 795               	.LVL65:
 796 0224 883C      		cpi r24,-56
 797 0226 9105      		cpc r25,__zero_reg__
 798 0228 00F4      		brsh .L78
 398:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 799               		.loc 1 398 0 is_stmt 1
 800 022a 86E2      		ldi r24,lo8(38)
 801 022c 0E94 0000 		call register_code
 802               	.LVL66:
 399:quantum/quantum.c ****         }
 803               		.loc 1 399 0
 804 0230 86E2      		ldi r24,lo8(38)
 805 0232 0E94 0000 		call unregister_code
 806               	.LVL67:
 807               	.L78:
 401:quantum/quantum.c ****       }
 808               		.loc 1 401 0
 809 0236 82E0      		ldi r24,lo8(2)
 810               	.L108:
 424:quantum/quantum.c ****       }
 811               		.loc 1 424 0
 812 0238 0E94 0000 		call unregister_mods
 813               	.LVL68:
 814 023c 00C0      		rjmp .L39
 815               	.L48:
 408:quantum/quantum.c ****         shift_interrupted[1] = false;
 816               		.loc 1 408 0
 817 023e F801      		movw r30,r16
 818 0240 8281      		ldd r24,Z+2
 819 0242 8823      		tst r24
 820 0244 01F0      		breq .L80
 409:quantum/quantum.c ****         scs_timer = timer_read ();
 821               		.loc 1 409 0
 822 0246 1092 0000 		sts shift_interrupted+1,__zero_reg__
 410:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 823               		.loc 1 410 0
 824 024a 0E94 0000 		call timer_read
 825               	.LVL69:
 826 024e 9093 0000 		sts scs_timer+1,r25
 827 0252 8093 0000 		sts scs_timer,r24
 411:quantum/quantum.c ****       }
 828               		.loc 1 411 0
 829 0256 80E2      		ldi r24,lo8(32)
 830 0258 00C0      		rjmp .L107
 831               	.L80:
 420:quantum/quantum.c ****           register_code(RSPC_KEY);
 832               		.loc 1 420 0
 833 025a 8091 0000 		lds r24,shift_interrupted+1
 834 025e 8111      		cpse r24,__zero_reg__
 835 0260 00C0      		rjmp .L82
 420:quantum/quantum.c ****           register_code(RSPC_KEY);
 836               		.loc 1 420 0 is_stmt 0 discriminator 1
 837 0262 8091 0000 		lds r24,scs_timer
 838 0266 9091 0000 		lds r25,scs_timer+1
 839 026a 0E94 0000 		call timer_elapsed
 840               	.LVL70:
 841 026e 883C      		cpi r24,-56
 842 0270 9105      		cpc r25,__zero_reg__
 843 0272 00F4      		brsh .L82
 421:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 844               		.loc 1 421 0 is_stmt 1
 845 0274 87E2      		ldi r24,lo8(39)
 846 0276 0E94 0000 		call register_code
 847               	.LVL71:
 422:quantum/quantum.c ****         }
 848               		.loc 1 422 0
 849 027a 87E2      		ldi r24,lo8(39)
 850 027c 0E94 0000 		call unregister_code
 851               	.LVL72:
 852               	.L82:
 424:quantum/quantum.c ****       }
 853               		.loc 1 424 0
 854 0280 80E2      		ldi r24,lo8(32)
 855 0282 00C0      		rjmp .L108
 856               		.cfi_endproc
 857               	.LFE118:
 859               		.section	.text.send_string,"ax",@progbits
 860               	.global	send_string
 862               	send_string:
 863               	.LFB119:
 438:quantum/quantum.c **** 
 439:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 440:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 441:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 442:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 443:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 444:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 445:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 446:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 447:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 448:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 449:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 450:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 451:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 452:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 453:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 454:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 455:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 456:quantum/quantum.c **** };
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 459:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 460:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 461:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 462:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 463:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 464:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 465:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 466:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 467:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 468:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 469:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 470:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 471:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 472:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 473:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 474:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 475:quantum/quantum.c **** };
 476:quantum/quantum.c **** 
 477:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 478:quantum/quantum.c **** #if 0
 479:quantum/quantum.c **** #include "keymap_colemak.h"
 480:quantum/quantum.c **** 
 481:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 482:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 483:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 484:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 485:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 486:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 487:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 488:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 489:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 490:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 491:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 492:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 493:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 494:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 495:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 496:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 497:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 498:quantum/quantum.c **** };
 499:quantum/quantum.c **** 
 500:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 501:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 502:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 503:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 504:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 505:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 506:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 507:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 508:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 509:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 510:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 511:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 512:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 513:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 514:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 515:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 516:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 517:quantum/quantum.c **** };
 518:quantum/quantum.c **** 
 519:quantum/quantum.c **** #endif
 520:quantum/quantum.c **** 
 521:quantum/quantum.c **** void send_string(const char *str) {
 864               		.loc 1 521 0
 865               		.cfi_startproc
 866               	.LVL73:
 867 0000 0F93      		push r16
 868               	.LCFI12:
 869               		.cfi_def_cfa_offset 3
 870               		.cfi_offset 16, -2
 871 0002 1F93      		push r17
 872               	.LCFI13:
 873               		.cfi_def_cfa_offset 4
 874               		.cfi_offset 17, -3
 875 0004 CF93      		push r28
 876               	.LCFI14:
 877               		.cfi_def_cfa_offset 5
 878               		.cfi_offset 28, -4
 879               	/* prologue: function */
 880               	/* frame size = 0 */
 881               	/* stack size = 3 */
 882               	.L__stack_usage = 3
 883 0006 8C01      		movw r16,r24
 884               	.LVL74:
 885               	.L115:
 886               	.LBB6:
 887               	.LBB7:
 522:quantum/quantum.c ****     while (1) {
 523:quantum/quantum.c ****         uint8_t keycode;
 524:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 888               		.loc 1 524 0
 889 0008 F801      		movw r30,r16
 890               	/* #APP */
 891               	 ;  524 "quantum/quantum.c" 1
 892 000a 2491      		lpm r18, Z
 893               		
 894               	 ;  0 "" 2
 895               	.LVL75:
 896               	/* #NOAPP */
 897               	.LBE7:
 525:quantum/quantum.c ****         if (!ascii_code) break;
 898               		.loc 1 525 0
 899 000c 2223      		tst r18
 900 000e 01F0      		breq .L111
 901 0010 30E0      		ldi r19,0
 902               	.LVL76:
 903               	.LBB8:
 526:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 904               		.loc 1 526 0
 905 0012 F901      		movw r30,r18
 906 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 907 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 908               	.LVL77:
 909               	/* #APP */
 910               	 ;  526 "quantum/quantum.c" 1
 911 0018 C491      		lpm r28, Z
 912               		
 913               	 ;  0 "" 2
 914               	.LVL78:
 915               	/* #NOAPP */
 916               	.LBE8:
 917               	.LBB9:
 527:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 918               		.loc 1 527 0
 919 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 920 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 921               	.LVL79:
 922 001e F901      		movw r30,r18
 923               	.LVL80:
 924               	/* #APP */
 925               	 ;  527 "quantum/quantum.c" 1
 926 0020 2491      		lpm r18, Z
 927               		
 928               	 ;  0 "" 2
 929               	.LVL81:
 930               	/* #NOAPP */
 931               	.LBE9:
 932 0022 2223      		tst r18
 933 0024 01F0      		breq .L113
 528:quantum/quantum.c ****             register_code(KC_LSFT);
 934               		.loc 1 528 0
 935 0026 81EE      		ldi r24,lo8(-31)
 936 0028 0E94 0000 		call register_code
 937               	.LVL82:
 529:quantum/quantum.c ****             register_code(keycode);
 938               		.loc 1 529 0
 939 002c 8C2F      		mov r24,r28
 940 002e 0E94 0000 		call register_code
 941               	.LVL83:
 530:quantum/quantum.c ****             unregister_code(keycode);
 942               		.loc 1 530 0
 943 0032 8C2F      		mov r24,r28
 944 0034 0E94 0000 		call unregister_code
 945               	.LVL84:
 531:quantum/quantum.c ****             unregister_code(KC_LSFT);
 946               		.loc 1 531 0
 947 0038 81EE      		ldi r24,lo8(-31)
 948               	.L116:
 532:quantum/quantum.c ****         }
 533:quantum/quantum.c ****         else {
 534:quantum/quantum.c ****             register_code(keycode);
 535:quantum/quantum.c ****             unregister_code(keycode);
 949               		.loc 1 535 0
 950 003a 0E94 0000 		call unregister_code
 951               	.LVL85:
 536:quantum/quantum.c ****         }
 537:quantum/quantum.c ****         ++str;
 952               		.loc 1 537 0
 953 003e 0F5F      		subi r16,-1
 954 0040 1F4F      		sbci r17,-1
 955               	.LVL86:
 956               	.LBE6:
 522:quantum/quantum.c ****         uint8_t keycode;
 957               		.loc 1 522 0
 958 0042 00C0      		rjmp .L115
 959               	.LVL87:
 960               	.L113:
 961               	.LBB10:
 534:quantum/quantum.c ****             unregister_code(keycode);
 962               		.loc 1 534 0
 963 0044 8C2F      		mov r24,r28
 964 0046 0E94 0000 		call register_code
 965               	.LVL88:
 535:quantum/quantum.c ****         }
 966               		.loc 1 535 0
 967 004a 8C2F      		mov r24,r28
 968 004c 00C0      		rjmp .L116
 969               	.LVL89:
 970               	.L111:
 971               	/* epilogue start */
 972               	.LBE10:
 538:quantum/quantum.c ****     }
 539:quantum/quantum.c **** }
 973               		.loc 1 539 0
 974 004e CF91      		pop r28
 975 0050 1F91      		pop r17
 976 0052 0F91      		pop r16
 977               	.LVL90:
 978 0054 0895      		ret
 979               		.cfi_endproc
 980               	.LFE119:
 982               		.section	.text.update_tri_layer,"ax",@progbits
 983               	.global	update_tri_layer
 985               	update_tri_layer:
 986               	.LFB120:
 540:quantum/quantum.c **** 
 541:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 987               		.loc 1 541 0
 988               		.cfi_startproc
 989               	.LVL91:
 990 0000 8F92      		push r8
 991               	.LCFI15:
 992               		.cfi_def_cfa_offset 3
 993               		.cfi_offset 8, -2
 994 0002 9F92      		push r9
 995               	.LCFI16:
 996               		.cfi_def_cfa_offset 4
 997               		.cfi_offset 9, -3
 998 0004 AF92      		push r10
 999               	.LCFI17:
 1000               		.cfi_def_cfa_offset 5
 1001               		.cfi_offset 10, -4
 1002 0006 BF92      		push r11
 1003               	.LCFI18:
 1004               		.cfi_def_cfa_offset 6
 1005               		.cfi_offset 11, -5
 1006 0008 CF92      		push r12
 1007               	.LCFI19:
 1008               		.cfi_def_cfa_offset 7
 1009               		.cfi_offset 12, -6
 1010 000a DF92      		push r13
 1011               	.LCFI20:
 1012               		.cfi_def_cfa_offset 8
 1013               		.cfi_offset 13, -7
 1014 000c EF92      		push r14
 1015               	.LCFI21:
 1016               		.cfi_def_cfa_offset 9
 1017               		.cfi_offset 14, -8
 1018 000e FF92      		push r15
 1019               	.LCFI22:
 1020               		.cfi_def_cfa_offset 10
 1021               		.cfi_offset 15, -9
 1022 0010 0F93      		push r16
 1023               	.LCFI23:
 1024               		.cfi_def_cfa_offset 11
 1025               		.cfi_offset 16, -10
 1026 0012 1F93      		push r17
 1027               	.LCFI24:
 1028               		.cfi_def_cfa_offset 12
 1029               		.cfi_offset 17, -11
 1030               	/* prologue: function */
 1031               	/* frame size = 0 */
 1032               	/* stack size = 10 */
 1033               	.L__stack_usage = 10
 1034 0014 C12C      		mov r12,__zero_reg__
 1035 0016 D12C      		mov r13,__zero_reg__
 1036 0018 7601      		movw r14,r12
 1037 001a C394      		inc r12
 1038 001c 9701      		movw r18,r14
 1039 001e 8601      		movw r16,r12
 1040 0020 00C0      		rjmp 2f
 1041               		1:
 1042 0022 000F      		lsl r16
 1043 0024 111F      		rol r17
 1044 0026 221F      		rol r18
 1045 0028 331F      		rol r19
 1046               		2:
 1047 002a 6A95      		dec r22
 1048 002c 02F4      		brpl 1b
 1049 002e 4601      		movw r8,r12
 1050 0030 5701      		movw r10,r14
 1051 0032 00C0      		rjmp 2f
 1052               		1:
 1053 0034 880C      		lsl r8
 1054 0036 991C      		rol r9
 1055 0038 AA1C      		rol r10
 1056 003a BB1C      		rol r11
 1057               		2:
 1058 003c 8A95      		dec r24
 1059 003e 02F4      		brpl 1b
 1060 0040 D501      		movw r26,r10
 1061 0042 C401      		movw r24,r8
 1062               	.LVL92:
 1063 0044 802B      		or r24,r16
 1064 0046 912B      		or r25,r17
 1065 0048 A22B      		or r26,r18
 1066 004a B32B      		or r27,r19
 542:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1067               		.loc 1 542 0
 1068 004c 0091 0000 		lds r16,layer_state
 1069 0050 1091 0000 		lds r17,layer_state+1
 1070 0054 2091 0000 		lds r18,layer_state+2
 1071 0058 3091 0000 		lds r19,layer_state+3
 1072 005c 0823      		and r16,r24
 1073 005e 1923      		and r17,r25
 1074 0060 2A23      		and r18,r26
 1075 0062 3B23      		and r19,r27
 1076 0064 8017      		cp r24,r16
 1077 0066 9107      		cpc r25,r17
 1078 0068 A207      		cpc r26,r18
 1079 006a B307      		cpc r27,r19
 1080 006c 01F4      		brne .L118
 543:quantum/quantum.c ****     layer_on(layer3);
 1081               		.loc 1 543 0
 1082 006e 842F      		mov r24,r20
 1083               	/* epilogue start */
 544:quantum/quantum.c ****   } else {
 545:quantum/quantum.c ****     layer_off(layer3);
 546:quantum/quantum.c ****   }
 547:quantum/quantum.c **** }
 1084               		.loc 1 547 0
 1085 0070 1F91      		pop r17
 1086 0072 0F91      		pop r16
 1087 0074 FF90      		pop r15
 1088 0076 EF90      		pop r14
 1089 0078 DF90      		pop r13
 1090 007a CF90      		pop r12
 1091 007c BF90      		pop r11
 1092 007e AF90      		pop r10
 1093 0080 9F90      		pop r9
 1094 0082 8F90      		pop r8
 543:quantum/quantum.c ****     layer_on(layer3);
 1095               		.loc 1 543 0
 1096 0084 0C94 0000 		jmp layer_on
 1097               	.LVL93:
 1098               	.L118:
 545:quantum/quantum.c ****   }
 1099               		.loc 1 545 0
 1100 0088 842F      		mov r24,r20
 1101               	/* epilogue start */
 1102               		.loc 1 547 0
 1103 008a 1F91      		pop r17
 1104 008c 0F91      		pop r16
 1105 008e FF90      		pop r15
 1106 0090 EF90      		pop r14
 1107 0092 DF90      		pop r13
 1108 0094 CF90      		pop r12
 1109 0096 BF90      		pop r11
 1110 0098 AF90      		pop r10
 1111 009a 9F90      		pop r9
 1112 009c 8F90      		pop r8
 545:quantum/quantum.c ****   }
 1113               		.loc 1 545 0
 1114 009e 0C94 0000 		jmp layer_off
 1115               	.LVL94:
 1116               		.cfi_endproc
 1117               	.LFE120:
 1119               		.section	.text.tap_random_base64,"ax",@progbits
 1120               	.global	tap_random_base64
 1122               	tap_random_base64:
 1123               	.LFB121:
 548:quantum/quantum.c **** 
 549:quantum/quantum.c **** void tap_random_base64(void) {
 1124               		.loc 1 549 0
 1125               		.cfi_startproc
 1126 0000 CF93      		push r28
 1127               	.LCFI25:
 1128               		.cfi_def_cfa_offset 3
 1129               		.cfi_offset 28, -2
 1130 0002 DF93      		push r29
 1131               	.LCFI26:
 1132               		.cfi_def_cfa_offset 4
 1133               		.cfi_offset 29, -3
 1134               	/* prologue: function */
 1135               	/* frame size = 0 */
 1136               	/* stack size = 2 */
 1137               	.L__stack_usage = 2
 550:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 551:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1138               		.loc 1 551 0
 1139 0004 46B5      		in r20,0x26
 1140 0006 2091 8400 		lds r18,132
 1141 000a 3091 8500 		lds r19,132+1
 1142 000e C091 9400 		lds r28,148
 1143 0012 D091 9500 		lds r29,148+1
 1144 0016 8091 BE00 		lds r24,190
 1145 001a 9091 BF00 		lds r25,190+1
 1146 001e C20F      		add r28,r18
 1147 0020 C40F      		add r28,r20
 1148 0022 C80F      		add r28,r24
 1149 0024 CF73      		andi r28,lo8(63)
 1150               	.LVL95:
 552:quantum/quantum.c ****   #else
 553:quantum/quantum.c ****     uint8_t key = rand() % 64;
 554:quantum/quantum.c ****   #endif
 555:quantum/quantum.c ****   switch (key) {
 1151               		.loc 1 555 0
 1152 0026 CE33      		cpi r28,lo8(62)
 1153 0028 00F4      		brsh .L121
 1154 002a C533      		cpi r28,lo8(53)
 1155 002c 00F4      		brsh .L122
 1156 002e CA31      		cpi r28,lo8(26)
 1157 0030 00F0      		brlo .L120
 1158 0032 C433      		cpi r28,lo8(52)
 1159 0034 00F4      		brsh .L127
 556:quantum/quantum.c ****     case 0 ... 25:
 557:quantum/quantum.c ****       register_code(KC_LSFT);
 558:quantum/quantum.c ****       register_code(key + KC_A);
 559:quantum/quantum.c ****       unregister_code(key + KC_A);
 560:quantum/quantum.c ****       unregister_code(KC_LSFT);
 561:quantum/quantum.c ****       break;
 562:quantum/quantum.c ****     case 26 ... 51:
 563:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1160               		.loc 1 563 0
 1161 0036 C651      		subi r28,lo8(-(-22))
 1162               	.LVL96:
 1163               	.L130:
 564:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 565:quantum/quantum.c ****       break;
 566:quantum/quantum.c ****     case 52:
 567:quantum/quantum.c ****       register_code(KC_0);
 568:quantum/quantum.c ****       unregister_code(KC_0);
 569:quantum/quantum.c ****       break;
 570:quantum/quantum.c ****     case 53 ... 61:
 571:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1164               		.loc 1 571 0
 1165 0038 8C2F      		mov r24,r28
 1166 003a 0E94 0000 		call register_code
 1167               	.LVL97:
 572:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1168               		.loc 1 572 0
 1169 003e 8C2F      		mov r24,r28
 1170 0040 00C0      		rjmp .L128
 1171               	.LVL98:
 1172               	.L121:
 555:quantum/quantum.c ****     case 0 ... 25:
 1173               		.loc 1 555 0
 1174 0042 CE33      		cpi r28,lo8(62)
 1175 0044 01F0      		breq .L125
 1176 0046 CF33      		cpi r28,lo8(63)
 1177 0048 01F0      		breq .L126
 1178               	.L120:
 557:quantum/quantum.c ****       register_code(key + KC_A);
 1179               		.loc 1 557 0
 1180 004a 81EE      		ldi r24,lo8(-31)
 1181 004c 0E94 0000 		call register_code
 1182               	.LVL99:
 558:quantum/quantum.c ****       unregister_code(key + KC_A);
 1183               		.loc 1 558 0
 1184 0050 CC5F      		subi r28,lo8(-(4))
 1185               	.LVL100:
 1186 0052 8C2F      		mov r24,r28
 1187 0054 0E94 0000 		call register_code
 1188               	.LVL101:
 559:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1189               		.loc 1 559 0
 1190 0058 8C2F      		mov r24,r28
 1191               	.LVL102:
 1192               	.L129:
 573:quantum/quantum.c ****       break;
 574:quantum/quantum.c ****     case 62:
 575:quantum/quantum.c ****       register_code(KC_LSFT);
 576:quantum/quantum.c ****       register_code(KC_EQL);
 577:quantum/quantum.c ****       unregister_code(KC_EQL);
 1193               		.loc 1 577 0
 1194 005a 0E94 0000 		call unregister_code
 1195               	.LVL103:
 578:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1196               		.loc 1 578 0
 1197 005e 81EE      		ldi r24,lo8(-31)
 1198 0060 00C0      		rjmp .L128
 1199               	.LVL104:
 1200               	.L127:
 567:quantum/quantum.c ****       unregister_code(KC_0);
 1201               		.loc 1 567 0
 1202 0062 87E2      		ldi r24,lo8(39)
 1203 0064 0E94 0000 		call register_code
 1204               	.LVL105:
 568:quantum/quantum.c ****       break;
 1205               		.loc 1 568 0
 1206 0068 87E2      		ldi r24,lo8(39)
 1207               	.LVL106:
 1208               	.L128:
 1209               	/* epilogue start */
 579:quantum/quantum.c ****       break;
 580:quantum/quantum.c ****     case 63:
 581:quantum/quantum.c ****       register_code(KC_SLSH);
 582:quantum/quantum.c ****       unregister_code(KC_SLSH);
 583:quantum/quantum.c ****       break;
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** }
 1210               		.loc 1 585 0
 1211 006a DF91      		pop r29
 1212 006c CF91      		pop r28
 582:quantum/quantum.c ****       break;
 1213               		.loc 1 582 0
 1214 006e 0C94 0000 		jmp unregister_code
 1215               	.LVL107:
 1216               	.L122:
 571:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1217               		.loc 1 571 0
 1218 0072 C751      		subi r28,lo8(-(-23))
 1219               	.LVL108:
 1220 0074 00C0      		rjmp .L130
 1221               	.LVL109:
 1222               	.L125:
 575:quantum/quantum.c ****       register_code(KC_EQL);
 1223               		.loc 1 575 0
 1224 0076 81EE      		ldi r24,lo8(-31)
 1225 0078 0E94 0000 		call register_code
 1226               	.LVL110:
 576:quantum/quantum.c ****       unregister_code(KC_EQL);
 1227               		.loc 1 576 0
 1228 007c 8EE2      		ldi r24,lo8(46)
 1229 007e 0E94 0000 		call register_code
 1230               	.LVL111:
 577:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1231               		.loc 1 577 0
 1232 0082 8EE2      		ldi r24,lo8(46)
 1233 0084 00C0      		rjmp .L129
 1234               	.L126:
 581:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1235               		.loc 1 581 0
 1236 0086 88E3      		ldi r24,lo8(56)
 1237 0088 0E94 0000 		call register_code
 1238               	.LVL112:
 582:quantum/quantum.c ****       break;
 1239               		.loc 1 582 0
 1240 008c 88E3      		ldi r24,lo8(56)
 1241 008e 00C0      		rjmp .L128
 1242               		.cfi_endproc
 1243               	.LFE121:
 1245               		.section	.text.matrix_init_quantum,"ax",@progbits
 1246               	.global	matrix_init_quantum
 1248               	matrix_init_quantum:
 1249               	.LFB122:
 586:quantum/quantum.c **** 
 587:quantum/quantum.c **** void matrix_init_quantum() {
 1250               		.loc 1 587 0
 1251               		.cfi_startproc
 1252               	/* prologue: function */
 1253               	/* frame size = 0 */
 1254               	/* stack size = 0 */
 1255               	.L__stack_usage = 0
 588:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 589:quantum/quantum.c ****     backlight_init_ports();
 590:quantum/quantum.c ****   #endif
 591:quantum/quantum.c ****   matrix_init_kb();
 1256               		.loc 1 591 0
 1257 0000 0C94 0000 		jmp matrix_init_kb
 1258               	.LVL113:
 1259               		.cfi_endproc
 1260               	.LFE122:
 1262               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1263               	.global	matrix_scan_quantum
 1265               	matrix_scan_quantum:
 1266               	.LFB123:
 592:quantum/quantum.c **** }
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** void matrix_scan_quantum() {
 1267               		.loc 1 594 0
 1268               		.cfi_startproc
 1269               	/* prologue: function */
 1270               	/* frame size = 0 */
 1271               	/* stack size = 0 */
 1272               	.L__stack_usage = 0
 595:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 596:quantum/quantum.c ****     matrix_scan_music();
 597:quantum/quantum.c ****   #endif
 598:quantum/quantum.c **** 
 599:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 600:quantum/quantum.c ****     matrix_scan_tap_dance();
 601:quantum/quantum.c ****   #endif
 602:quantum/quantum.c **** 
 603:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 604:quantum/quantum.c ****     matrix_scan_combo();
 605:quantum/quantum.c ****   #endif
 606:quantum/quantum.c **** 
 607:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 608:quantum/quantum.c ****     backlight_task();
 609:quantum/quantum.c ****   #endif
 610:quantum/quantum.c **** 
 611:quantum/quantum.c ****   matrix_scan_kb();
 1273               		.loc 1 611 0
 1274 0000 0C94 0000 		jmp matrix_scan_kb
 1275               	.LVL114:
 1276               		.cfi_endproc
 1277               	.LFE123:
 1279               		.section	.text.backlight_init_ports,"ax",@progbits
 1280               		.weak	backlight_init_ports
 1282               	backlight_init_ports:
 1283               	.LFB143:
 1284               		.cfi_startproc
 1285               	/* prologue: function */
 1286               	/* frame size = 0 */
 1287               	/* stack size = 0 */
 1288               	.L__stack_usage = 0
 1289               	/* epilogue start */
 1290 0000 0895      		ret
 1291               		.cfi_endproc
 1292               	.LFE143:
 1294               		.section	.text.send_nibble,"ax",@progbits
 1295               	.global	send_nibble
 1297               	send_nibble:
 1298               	.LFB129:
 612:quantum/quantum.c **** }
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 615:quantum/quantum.c **** 
 616:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 617:quantum/quantum.c **** 
 618:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 619:quantum/quantum.c **** #  define COM1x1 COM1C1
 620:quantum/quantum.c **** #  define OCR1x  OCR1C
 621:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 622:quantum/quantum.c **** #  define COM1x1 COM1B1
 623:quantum/quantum.c **** #  define OCR1x  OCR1B
 624:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 625:quantum/quantum.c **** #  define COM1x1 COM1A1
 626:quantum/quantum.c **** #  define OCR1x  OCR1A
 627:quantum/quantum.c **** #else
 628:quantum/quantum.c **** #  define NO_BACKLIGHT_CLOCK
 629:quantum/quantum.c **** #endif
 630:quantum/quantum.c **** 
 631:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 632:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 633:quantum/quantum.c **** #endif
 634:quantum/quantum.c **** 
 635:quantum/quantum.c **** __attribute__ ((weak))
 636:quantum/quantum.c **** void backlight_init_ports(void)
 637:quantum/quantum.c **** {
 638:quantum/quantum.c **** 
 639:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 640:quantum/quantum.c ****   // DDRx |= n
 641:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 642:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 643:quantum/quantum.c ****     // PORTx &= ~n
 644:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 645:quantum/quantum.c ****   #else
 646:quantum/quantum.c ****     // PORTx |= n
 647:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 648:quantum/quantum.c ****   #endif
 649:quantum/quantum.c **** 
 650:quantum/quantum.c ****   #ifndef NO_BACKLIGHT_CLOCK
 651:quantum/quantum.c ****     // Use full 16-bit resolution.
 652:quantum/quantum.c ****     ICR1 = 0xFFFF;
 653:quantum/quantum.c **** 
 654:quantum/quantum.c ****     // I could write a wall of text here to explain... but TL;DW
 655:quantum/quantum.c ****     // Go read the ATmega32u4 datasheet.
 656:quantum/quantum.c ****     // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolut
 657:quantum/quantum.c **** 
 658:quantum/quantum.c ****     // Pin PB7 = OCR1C (Timer 1, Channel C)
 659:quantum/quantum.c ****     // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 660:quantum/quantum.c ****     // (i.e. start high, go low when counter matches.)
 661:quantum/quantum.c ****     // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 662:quantum/quantum.c ****     // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 665:quantum/quantum.c ****     TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 666:quantum/quantum.c ****   #endif
 667:quantum/quantum.c **** 
 668:quantum/quantum.c ****   backlight_init();
 669:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 670:quantum/quantum.c ****     breathing_defaults();
 671:quantum/quantum.c ****   #endif
 672:quantum/quantum.c **** }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** void backlight_set(uint8_t level)
 676:quantum/quantum.c **** {
 677:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 678:quantum/quantum.c ****   // #if BACKLIGHT_ON_STATE == 0
 679:quantum/quantum.c ****   //   // PORTx &= ~n
 680:quantum/quantum.c ****   //   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 681:quantum/quantum.c ****   // #else
 682:quantum/quantum.c ****   //   // PORTx |= n
 683:quantum/quantum.c ****   //   _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 684:quantum/quantum.c ****   // #endif
 685:quantum/quantum.c **** 
 686:quantum/quantum.c ****   if ( level == 0 ) {
 687:quantum/quantum.c ****     #ifndef NO_BACKLIGHT_CLOCK
 688:quantum/quantum.c ****       // Turn off PWM control on backlight pin, revert to output low.
 689:quantum/quantum.c ****       TCCR1A &= ~(_BV(COM1x1));
 690:quantum/quantum.c ****       OCR1x = 0x0;
 691:quantum/quantum.c ****     #else
 692:quantum/quantum.c ****       // #if BACKLIGHT_ON_STATE == 0
 693:quantum/quantum.c ****       //   // PORTx |= n
 694:quantum/quantum.c ****       //   _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 695:quantum/quantum.c ****       // #else
 696:quantum/quantum.c ****       //   // PORTx &= ~n
 697:quantum/quantum.c ****       //   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 698:quantum/quantum.c ****       // #endif
 699:quantum/quantum.c ****     #endif
 700:quantum/quantum.c ****   } 
 701:quantum/quantum.c ****   #ifndef NO_BACKLIGHT_CLOCK
 702:quantum/quantum.c ****     else if ( level == BACKLIGHT_LEVELS ) {
 703:quantum/quantum.c ****       // Turn on PWM control of backlight pin
 704:quantum/quantum.c ****       TCCR1A |= _BV(COM1x1);
 705:quantum/quantum.c ****       // Set the brightness
 706:quantum/quantum.c ****       OCR1x = 0xFFFF;
 707:quantum/quantum.c ****     } 
 708:quantum/quantum.c ****     else {
 709:quantum/quantum.c ****       // Turn on PWM control of backlight pin
 710:quantum/quantum.c ****       TCCR1A |= _BV(COM1x1);
 711:quantum/quantum.c ****       // Set the brightness
 712:quantum/quantum.c ****       OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 713:quantum/quantum.c ****     }
 714:quantum/quantum.c ****   #endif
 715:quantum/quantum.c **** 
 716:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 717:quantum/quantum.c ****     breathing_intensity_default();
 718:quantum/quantum.c ****   #endif
 719:quantum/quantum.c **** }
 720:quantum/quantum.c **** 
 721:quantum/quantum.c **** uint8_t backlight_tick = 0;
 722:quantum/quantum.c **** 
 723:quantum/quantum.c **** void backlight_task(void) {
 724:quantum/quantum.c ****   #ifdef NO_BACKLIGHT_CLOCK
 725:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - backlight_config.level) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1
 726:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 727:quantum/quantum.c ****       // PORTx &= ~n
 728:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 729:quantum/quantum.c ****     #else
 730:quantum/quantum.c ****       // PORTx |= n
 731:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 732:quantum/quantum.c ****     #endif
 733:quantum/quantum.c ****   } else {
 734:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 735:quantum/quantum.c ****       // PORTx |= n
 736:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 737:quantum/quantum.c ****     #else
 738:quantum/quantum.c ****       // PORTx &= ~n
 739:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 740:quantum/quantum.c ****     #endif
 741:quantum/quantum.c ****   }
 742:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 743:quantum/quantum.c ****   #endif
 744:quantum/quantum.c **** }
 745:quantum/quantum.c **** 
 746:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 749:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 750:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 751:quantum/quantum.c **** 
 752:quantum/quantum.c **** static uint8_t breath_intensity;
 753:quantum/quantum.c **** static uint8_t breath_speed;
 754:quantum/quantum.c **** static uint16_t breathing_index;
 755:quantum/quantum.c **** static uint8_t breathing_halt;
 756:quantum/quantum.c **** 
 757:quantum/quantum.c **** void breathing_enable(void)
 758:quantum/quantum.c **** {
 759:quantum/quantum.c ****     if (get_backlight_level() == 0)
 760:quantum/quantum.c ****     {
 761:quantum/quantum.c ****         breathing_index = 0;
 762:quantum/quantum.c ****     }
 763:quantum/quantum.c ****     else
 764:quantum/quantum.c ****     {
 765:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 766:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 767:quantum/quantum.c ****     }
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 770:quantum/quantum.c **** 
 771:quantum/quantum.c ****     // Enable breathing interrupt
 772:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 773:quantum/quantum.c **** }
 774:quantum/quantum.c **** 
 775:quantum/quantum.c **** void breathing_pulse(void)
 776:quantum/quantum.c **** {
 777:quantum/quantum.c ****     if (get_backlight_level() == 0)
 778:quantum/quantum.c ****     {
 779:quantum/quantum.c ****         breathing_index = 0;
 780:quantum/quantum.c ****     }
 781:quantum/quantum.c ****     else
 782:quantum/quantum.c ****     {
 783:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 784:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 785:quantum/quantum.c ****     }
 786:quantum/quantum.c **** 
 787:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     // Enable breathing interrupt
 790:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** void breathing_disable(void)
 794:quantum/quantum.c **** {
 795:quantum/quantum.c ****     // Disable breathing interrupt
 796:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 797:quantum/quantum.c ****     backlight_set(get_backlight_level());
 798:quantum/quantum.c **** }
 799:quantum/quantum.c **** 
 800:quantum/quantum.c **** void breathing_self_disable(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c ****     if (get_backlight_level() == 0)
 803:quantum/quantum.c ****     {
 804:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 805:quantum/quantum.c ****     }
 806:quantum/quantum.c ****     else
 807:quantum/quantum.c ****     {
 808:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 809:quantum/quantum.c ****     }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 812:quantum/quantum.c **** }
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** void breathing_toggle(void)
 815:quantum/quantum.c **** {
 816:quantum/quantum.c ****     if (!is_breathing())
 817:quantum/quantum.c ****     {
 818:quantum/quantum.c ****         if (get_backlight_level() == 0)
 819:quantum/quantum.c ****         {
 820:quantum/quantum.c ****             breathing_index = 0;
 821:quantum/quantum.c ****         }
 822:quantum/quantum.c ****         else
 823:quantum/quantum.c ****         {
 824:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 825:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 826:quantum/quantum.c ****         }
 827:quantum/quantum.c **** 
 828:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 829:quantum/quantum.c ****     }
 830:quantum/quantum.c **** 
 831:quantum/quantum.c ****     // Toggle breathing interrupt
 832:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 833:quantum/quantum.c **** 
 834:quantum/quantum.c ****     // Restore backlight level
 835:quantum/quantum.c ****     if (!is_breathing())
 836:quantum/quantum.c ****     {
 837:quantum/quantum.c ****         backlight_set(get_backlight_level());
 838:quantum/quantum.c ****     }
 839:quantum/quantum.c **** }
 840:quantum/quantum.c **** 
 841:quantum/quantum.c **** bool is_breathing(void)
 842:quantum/quantum.c **** {
 843:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 844:quantum/quantum.c **** }
 845:quantum/quantum.c **** 
 846:quantum/quantum.c **** void breathing_intensity_default(void)
 847:quantum/quantum.c **** {
 848:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 849:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 850:quantum/quantum.c **** }
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 853:quantum/quantum.c **** {
 854:quantum/quantum.c ****     breath_intensity = value;
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** void breathing_speed_default(void)
 858:quantum/quantum.c **** {
 859:quantum/quantum.c ****     breath_speed = 4;
 860:quantum/quantum.c **** }
 861:quantum/quantum.c **** 
 862:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 863:quantum/quantum.c **** {
 864:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 865:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 866:quantum/quantum.c **** 
 867:quantum/quantum.c ****     if (is_breathing_now)
 868:quantum/quantum.c ****     {
 869:quantum/quantum.c ****         // Disable breathing interrupt
 870:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 871:quantum/quantum.c ****     }
 872:quantum/quantum.c **** 
 873:quantum/quantum.c ****     breath_speed = value;
 874:quantum/quantum.c **** 
 875:quantum/quantum.c ****     if (is_breathing_now)
 876:quantum/quantum.c ****     {
 877:quantum/quantum.c ****         // Adjust index to account for new speed
 878:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****         // Enable breathing interrupt
 881:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 882:quantum/quantum.c ****     }
 883:quantum/quantum.c **** 
 884:quantum/quantum.c **** }
 885:quantum/quantum.c **** 
 886:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 887:quantum/quantum.c **** {
 888:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 889:quantum/quantum.c ****     {
 890:quantum/quantum.c ****         breathing_speed_set(0);
 891:quantum/quantum.c ****     }
 892:quantum/quantum.c ****     else
 893:quantum/quantum.c ****     {
 894:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 895:quantum/quantum.c ****     }
 896:quantum/quantum.c **** }
 897:quantum/quantum.c **** 
 898:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 899:quantum/quantum.c **** {
 900:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 901:quantum/quantum.c ****     {
 902:quantum/quantum.c ****         breathing_speed_set(10);
 903:quantum/quantum.c ****     }
 904:quantum/quantum.c ****     else
 905:quantum/quantum.c ****     {
 906:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 907:quantum/quantum.c ****     }
 908:quantum/quantum.c **** }
 909:quantum/quantum.c **** 
 910:quantum/quantum.c **** void breathing_defaults(void)
 911:quantum/quantum.c **** {
 912:quantum/quantum.c ****     breathing_intensity_default();
 913:quantum/quantum.c ****     breathing_speed_default();
 914:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 915:quantum/quantum.c **** }
 916:quantum/quantum.c **** 
 917:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 918:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 919:quantum/quantum.c ****  *
 920:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 921:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 922:quantum/quantum.c ****  */
 923:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 924:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 925:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 926:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 927:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 928:quantum/quantum.c **** };
 929:quantum/quantum.c **** 
 930:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 931:quantum/quantum.c **** {
 932:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** 
 935:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 936:quantum/quantum.c **** 
 937:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 938:quantum/quantum.c ****     {
 939:quantum/quantum.c ****         // Disable breathing interrupt
 940:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 941:quantum/quantum.c ****     }
 942:quantum/quantum.c **** 
 943:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 944:quantum/quantum.c **** 
 945:quantum/quantum.c **** }
 946:quantum/quantum.c **** 
 947:quantum/quantum.c **** 
 948:quantum/quantum.c **** 
 949:quantum/quantum.c **** #endif // breathing
 950:quantum/quantum.c **** 
 951:quantum/quantum.c **** #else // backlight
 952:quantum/quantum.c **** 
 953:quantum/quantum.c **** __attribute__ ((weak))
 954:quantum/quantum.c **** void backlight_init_ports(void)
 955:quantum/quantum.c **** {
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** }
 958:quantum/quantum.c **** 
 959:quantum/quantum.c **** __attribute__ ((weak))
 960:quantum/quantum.c **** void backlight_set(uint8_t level)
 961:quantum/quantum.c **** {
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** }
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #endif // backlight
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** 
 968:quantum/quantum.c **** // Functions for spitting out values
 969:quantum/quantum.c **** //
 970:quantum/quantum.c **** 
 971:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 972:quantum/quantum.c ****     uint16_t word = (number >> 16);
 973:quantum/quantum.c ****     send_word(word);
 974:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 975:quantum/quantum.c **** }
 976:quantum/quantum.c **** 
 977:quantum/quantum.c **** void send_word(uint16_t number) {
 978:quantum/quantum.c ****     uint8_t byte = number >> 8;
 979:quantum/quantum.c ****     send_byte(byte);
 980:quantum/quantum.c ****     send_byte(number & 0xFF);
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** void send_byte(uint8_t number) {
 984:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 985:quantum/quantum.c ****     send_nibble(nibble);
 986:quantum/quantum.c ****     send_nibble(number & 0xF);
 987:quantum/quantum.c **** }
 988:quantum/quantum.c **** 
 989:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1299               		.loc 1 989 0
 1300               		.cfi_startproc
 1301               	.LVL115:
 1302               		.loc 1 989 0
 1303 0000 CF93      		push r28
 1304               	.LCFI27:
 1305               		.cfi_def_cfa_offset 3
 1306               		.cfi_offset 28, -2
 1307               	/* prologue: function */
 1308               	/* frame size = 0 */
 1309               	/* stack size = 1 */
 1310               	.L__stack_usage = 1
 990:quantum/quantum.c ****     switch (number) {
 1311               		.loc 1 990 0
 1312 0002 8A30      		cpi r24,lo8(10)
 1313 0004 00F4      		brsh .L136
 1314 0006 8130      		cpi r24,lo8(1)
 1315 0008 00F0      		brlo .L140
 991:quantum/quantum.c ****         case 0:
 992:quantum/quantum.c ****             register_code(KC_0);
 993:quantum/quantum.c ****             unregister_code(KC_0);
 994:quantum/quantum.c ****             break;
 995:quantum/quantum.c ****         case 1 ... 9:
 996:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1316               		.loc 1 996 0
 1317 000a CDE1      		ldi r28,lo8(29)
 1318               	.L143:
 997:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 998:quantum/quantum.c ****             break;
 999:quantum/quantum.c ****         case 0xA ... 0xF:
1000:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1319               		.loc 1 1000 0
 1320 000c C80F      		add r28,r24
 1321 000e 8C2F      		mov r24,r28
 1322               	.LVL116:
 1323 0010 0E94 0000 		call register_code
 1324               	.LVL117:
1001:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1325               		.loc 1 1001 0
 1326 0014 8C2F      		mov r24,r28
 1327 0016 00C0      		rjmp .L142
 1328               	.LVL118:
 1329               	.L136:
1000:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1330               		.loc 1 1000 0
 1331 0018 CAEF      		ldi r28,lo8(-6)
 990:quantum/quantum.c ****         case 0:
 1332               		.loc 1 990 0
 1333 001a 8031      		cpi r24,lo8(16)
 1334 001c 00F0      		brlo .L143
 1335               	/* epilogue start */
1002:quantum/quantum.c ****             break;
1003:quantum/quantum.c ****     }
1004:quantum/quantum.c **** }
 1336               		.loc 1 1004 0
 1337 001e CF91      		pop r28
 1338 0020 0895      		ret
 1339               	.L140:
 992:quantum/quantum.c ****             unregister_code(KC_0);
 1340               		.loc 1 992 0
 1341 0022 87E2      		ldi r24,lo8(39)
 1342               	.LVL119:
 1343 0024 0E94 0000 		call register_code
 1344               	.LVL120:
 993:quantum/quantum.c ****             break;
 1345               		.loc 1 993 0
 1346 0028 87E2      		ldi r24,lo8(39)
 1347               	.L142:
 1348               	/* epilogue start */
 1349               		.loc 1 1004 0
 1350 002a CF91      		pop r28
1001:quantum/quantum.c ****             break;
 1351               		.loc 1 1001 0
 1352 002c 0C94 0000 		jmp unregister_code
 1353               	.LVL121:
 1354               		.cfi_endproc
 1355               	.LFE129:
 1357               		.section	.text.send_byte,"ax",@progbits
 1358               	.global	send_byte
 1360               	send_byte:
 1361               	.LFB128:
 983:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1362               		.loc 1 983 0
 1363               		.cfi_startproc
 1364               	.LVL122:
 1365 0000 CF93      		push r28
 1366               	.LCFI28:
 1367               		.cfi_def_cfa_offset 3
 1368               		.cfi_offset 28, -2
 1369               	/* prologue: function */
 1370               	/* frame size = 0 */
 1371               	/* stack size = 1 */
 1372               	.L__stack_usage = 1
 1373 0002 C82F      		mov r28,r24
 1374               	.LVL123:
 985:quantum/quantum.c ****     send_nibble(number & 0xF);
 1375               		.loc 1 985 0
 1376 0004 8295      		swap r24
 1377               	.LVL124:
 1378 0006 8F70      		andi r24,lo8(15)
 1379 0008 0E94 0000 		call send_nibble
 1380               	.LVL125:
 986:quantum/quantum.c **** }
 1381               		.loc 1 986 0
 1382 000c 8C2F      		mov r24,r28
 1383 000e 8F70      		andi r24,lo8(15)
 1384               	/* epilogue start */
 987:quantum/quantum.c **** 
 1385               		.loc 1 987 0
 1386 0010 CF91      		pop r28
 1387               	.LVL126:
 986:quantum/quantum.c **** }
 1388               		.loc 1 986 0
 1389 0012 0C94 0000 		jmp send_nibble
 1390               	.LVL127:
 1391               		.cfi_endproc
 1392               	.LFE128:
 1394               		.section	.text.send_word,"ax",@progbits
 1395               	.global	send_word
 1397               	send_word:
 1398               	.LFB127:
 977:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1399               		.loc 1 977 0
 1400               		.cfi_startproc
 1401               	.LVL128:
 1402 0000 CF93      		push r28
 1403               	.LCFI29:
 1404               		.cfi_def_cfa_offset 3
 1405               		.cfi_offset 28, -2
 1406               	/* prologue: function */
 1407               	/* frame size = 0 */
 1408               	/* stack size = 1 */
 1409               	.L__stack_usage = 1
 1410 0002 C82F      		mov r28,r24
 1411               	.LVL129:
 979:quantum/quantum.c ****     send_byte(number & 0xFF);
 1412               		.loc 1 979 0
 1413 0004 892F      		mov r24,r25
 1414               	.LVL130:
 1415 0006 0E94 0000 		call send_byte
 1416               	.LVL131:
 980:quantum/quantum.c **** }
 1417               		.loc 1 980 0
 1418 000a 8C2F      		mov r24,r28
 1419               	/* epilogue start */
 981:quantum/quantum.c **** 
 1420               		.loc 1 981 0
 1421 000c CF91      		pop r28
 980:quantum/quantum.c **** }
 1422               		.loc 1 980 0
 1423 000e 0C94 0000 		jmp send_byte
 1424               	.LVL132:
 1425               		.cfi_endproc
 1426               	.LFE127:
 1428               		.section	.text.send_dword,"ax",@progbits
 1429               	.global	send_dword
 1431               	send_dword:
 1432               	.LFB126:
 971:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1433               		.loc 1 971 0
 1434               		.cfi_startproc
 1435               	.LVL133:
 1436 0000 CF92      		push r12
 1437               	.LCFI30:
 1438               		.cfi_def_cfa_offset 3
 1439               		.cfi_offset 12, -2
 1440 0002 DF92      		push r13
 1441               	.LCFI31:
 1442               		.cfi_def_cfa_offset 4
 1443               		.cfi_offset 13, -3
 1444 0004 EF92      		push r14
 1445               	.LCFI32:
 1446               		.cfi_def_cfa_offset 5
 1447               		.cfi_offset 14, -4
 1448 0006 FF92      		push r15
 1449               	.LCFI33:
 1450               		.cfi_def_cfa_offset 6
 1451               		.cfi_offset 15, -5
 1452               	/* prologue: function */
 1453               	/* frame size = 0 */
 1454               	/* stack size = 4 */
 1455               	.L__stack_usage = 4
 1456 0008 6B01      		movw r12,r22
 973:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1457               		.loc 1 973 0
 1458 000a 0E94 0000 		call send_word
 1459               	.LVL134:
 974:quantum/quantum.c **** }
 1460               		.loc 1 974 0
 1461 000e C601      		movw r24,r12
 1462               	/* epilogue start */
 975:quantum/quantum.c **** 
 1463               		.loc 1 975 0
 1464 0010 FF90      		pop r15
 1465 0012 EF90      		pop r14
 1466 0014 DF90      		pop r13
 1467 0016 CF90      		pop r12
 974:quantum/quantum.c **** }
 1468               		.loc 1 974 0
 1469 0018 0C94 0000 		jmp send_word
 1470               	.LVL135:
 1471               		.cfi_endproc
 1472               	.LFE126:
 1474               		.section	.text.hex_to_keycode,"ax",@progbits
 1475               		.weak	hex_to_keycode
 1477               	hex_to_keycode:
 1478               	.LFB130:
1005:quantum/quantum.c **** 
1006:quantum/quantum.c **** 
1007:quantum/quantum.c **** __attribute__((weak))
1008:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1009:quantum/quantum.c **** {
 1479               		.loc 1 1009 0
 1480               		.cfi_startproc
 1481               	.LVL136:
 1482               	/* prologue: function */
 1483               	/* frame size = 0 */
 1484               	/* stack size = 0 */
 1485               	.L__stack_usage = 0
1010:quantum/quantum.c ****   if (hex == 0x0) {
 1486               		.loc 1 1010 0
 1487 0000 8823      		tst r24
 1488 0002 01F0      		breq .L150
 1489 0004 90E0      		ldi r25,0
1011:quantum/quantum.c ****     return KC_0;
1012:quantum/quantum.c ****   } else if (hex < 0xA) {
 1490               		.loc 1 1012 0
 1491 0006 8A30      		cpi r24,lo8(10)
 1492 0008 00F4      		brsh .L149
1013:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 1493               		.loc 1 1013 0
 1494 000a 4D96      		adiw r24,29
 1495               	.LVL137:
 1496 000c 0895      		ret
 1497               	.LVL138:
 1498               	.L149:
1014:quantum/quantum.c ****   } else {
1015:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 1499               		.loc 1 1015 0
 1500 000e 0697      		sbiw r24,6
 1501               	.LVL139:
 1502 0010 0895      		ret
 1503               	.LVL140:
 1504               	.L150:
1011:quantum/quantum.c ****   } else if (hex < 0xA) {
 1505               		.loc 1 1011 0
 1506 0012 87E2      		ldi r24,lo8(39)
 1507 0014 90E0      		ldi r25,0
 1508               	.LVL141:
 1509               	/* epilogue start */
1016:quantum/quantum.c ****   }
1017:quantum/quantum.c **** }
 1510               		.loc 1 1017 0
 1511 0016 0895      		ret
 1512               		.cfi_endproc
 1513               	.LFE130:
 1515               		.section	.text.api_send_unicode,"ax",@progbits
 1516               	.global	api_send_unicode
 1518               	api_send_unicode:
 1519               	.LFB131:
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1520               		.loc 1 1019 0
 1521               		.cfi_startproc
 1522               	.LVL142:
 1523               	/* prologue: function */
 1524               	/* frame size = 0 */
 1525               	/* stack size = 0 */
 1526               	.L__stack_usage = 0
 1527               	/* epilogue start */
1020:quantum/quantum.c **** #ifdef API_ENABLE
1021:quantum/quantum.c ****     uint8_t chunk[4];
1022:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1023:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1024:quantum/quantum.c **** #endif
1025:quantum/quantum.c **** }
 1528               		.loc 1 1025 0
 1529 0000 0895      		ret
 1530               		.cfi_endproc
 1531               	.LFE131:
 1533               		.section	.text.led_set_user,"ax",@progbits
 1534               		.weak	led_set_user
 1536               	led_set_user:
 1537               	.LFB132:
1026:quantum/quantum.c **** 
1027:quantum/quantum.c **** __attribute__ ((weak))
1028:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1538               		.loc 1 1028 0
 1539               		.cfi_startproc
 1540               	.LVL143:
 1541               	/* prologue: function */
 1542               	/* frame size = 0 */
 1543               	/* stack size = 0 */
 1544               	.L__stack_usage = 0
 1545               	/* epilogue start */
1029:quantum/quantum.c **** 
1030:quantum/quantum.c **** }
 1546               		.loc 1 1030 0
 1547 0000 0895      		ret
 1548               		.cfi_endproc
 1549               	.LFE132:
 1551               		.set	led_set_user.localalias.1,led_set_user
 1552               		.section	.text.backlight_set,"ax",@progbits
 1553               		.weak	backlight_set
 1555               	backlight_set:
 1556               	.LFB145:
 1557               		.cfi_startproc
 1558               	/* prologue: function */
 1559               	/* frame size = 0 */
 1560               	/* stack size = 0 */
 1561               	.L__stack_usage = 0
 1562               	/* epilogue start */
 1563 0000 0895      		ret
 1564               		.cfi_endproc
 1565               	.LFE145:
 1567               		.section	.text.led_set_kb,"ax",@progbits
 1568               		.weak	led_set_kb
 1570               	led_set_kb:
 1571               	.LFB133:
1031:quantum/quantum.c **** 
1032:quantum/quantum.c **** __attribute__ ((weak))
1033:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1572               		.loc 1 1033 0
 1573               		.cfi_startproc
 1574               	.LVL144:
 1575               	/* prologue: function */
 1576               	/* frame size = 0 */
 1577               	/* stack size = 0 */
 1578               	.L__stack_usage = 0
1034:quantum/quantum.c ****     led_set_user(usb_led);
 1579               		.loc 1 1034 0
 1580 0000 0C94 0000 		jmp led_set_user
 1581               	.LVL145:
 1582               		.cfi_endproc
 1583               	.LFE133:
 1585               		.section	.text.led_init_ports,"ax",@progbits
 1586               		.weak	led_init_ports
 1588               	led_init_ports:
 1589               	.LFB134:
1035:quantum/quantum.c **** }
1036:quantum/quantum.c **** 
1037:quantum/quantum.c **** __attribute__ ((weak))
1038:quantum/quantum.c **** void led_init_ports(void)
1039:quantum/quantum.c **** {
 1590               		.loc 1 1039 0
 1591               		.cfi_startproc
 1592               	/* prologue: function */
 1593               	/* frame size = 0 */
 1594               	/* stack size = 0 */
 1595               	.L__stack_usage = 0
 1596               	/* epilogue start */
1040:quantum/quantum.c **** 
1041:quantum/quantum.c **** }
 1597               		.loc 1 1041 0
 1598 0000 0895      		ret
 1599               		.cfi_endproc
 1600               	.LFE134:
 1602               		.section	.text.led_set,"ax",@progbits
 1603               		.weak	led_set
 1605               	led_set:
 1606               	.LFB135:
1042:quantum/quantum.c **** 
1043:quantum/quantum.c **** __attribute__ ((weak))
1044:quantum/quantum.c **** void led_set(uint8_t usb_led)
1045:quantum/quantum.c **** {
 1607               		.loc 1 1045 0
 1608               		.cfi_startproc
 1609               	.LVL146:
 1610               	/* prologue: function */
 1611               	/* frame size = 0 */
 1612               	/* stack size = 0 */
 1613               	.L__stack_usage = 0
1046:quantum/quantum.c **** 
1047:quantum/quantum.c ****   // Example LED Code
1048:quantum/quantum.c ****   //
1049:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1050:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1051:quantum/quantum.c ****     // {
1052:quantum/quantum.c ****     //     // Output high.
1053:quantum/quantum.c ****     //     DDRE |= (1<<6);
1054:quantum/quantum.c ****     //     PORTE |= (1<<6);
1055:quantum/quantum.c ****     // }
1056:quantum/quantum.c ****     // else
1057:quantum/quantum.c ****     // {
1058:quantum/quantum.c ****     //     // Output low.
1059:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1060:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1061:quantum/quantum.c ****     // }
1062:quantum/quantum.c **** 
1063:quantum/quantum.c ****   led_set_kb(usb_led);
 1614               		.loc 1 1063 0
 1615 0000 0C94 0000 		jmp led_set_kb
 1616               	.LVL147:
 1617               		.cfi_endproc
 1618               	.LFE135:
 1620               		.section	.text.startup_user,"ax",@progbits
 1621               		.weak	startup_user
 1623               	startup_user:
 1624               	.LFB139:
 1625               		.cfi_startproc
 1626               	/* prologue: function */
 1627               	/* frame size = 0 */
 1628               	/* stack size = 0 */
 1629               	.L__stack_usage = 0
 1630               	/* epilogue start */
 1631 0000 0895      		ret
 1632               		.cfi_endproc
 1633               	.LFE139:
 1635               		.section	.text.shutdown_user,"ax",@progbits
 1636               		.weak	shutdown_user
 1638               	shutdown_user:
 1639               	.LFB141:
 1640               		.cfi_startproc
 1641               	/* prologue: function */
 1642               	/* frame size = 0 */
 1643               	/* stack size = 0 */
 1644               	.L__stack_usage = 0
 1645               	/* epilogue start */
 1646 0000 0895      		ret
 1647               		.cfi_endproc
 1648               	.LFE141:
 1650               	.global	ascii_to_qwerty_keycode_lut
 1651               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a",@progbits
 1654               	ascii_to_qwerty_keycode_lut:
 1655 0000 00        		.byte	0
 1656 0001 00        		.byte	0
 1657 0002 00        		.byte	0
 1658 0003 00        		.byte	0
 1659 0004 00        		.byte	0
 1660 0005 00        		.byte	0
 1661 0006 00        		.byte	0
 1662 0007 00        		.byte	0
 1663 0008 2A        		.byte	42
 1664 0009 2B        		.byte	43
 1665 000a 28        		.byte	40
 1666 000b 00        		.byte	0
 1667 000c 00        		.byte	0
 1668 000d 00        		.byte	0
 1669 000e 00        		.byte	0
 1670 000f 00        		.byte	0
 1671 0010 00        		.byte	0
 1672 0011 00        		.byte	0
 1673 0012 00        		.byte	0
 1674 0013 00        		.byte	0
 1675 0014 00        		.byte	0
 1676 0015 00        		.byte	0
 1677 0016 00        		.byte	0
 1678 0017 00        		.byte	0
 1679 0018 00        		.byte	0
 1680 0019 00        		.byte	0
 1681 001a 00        		.byte	0
 1682 001b 29        		.byte	41
 1683 001c 00        		.byte	0
 1684 001d 00        		.byte	0
 1685 001e 00        		.byte	0
 1686 001f 00        		.byte	0
 1687 0020 2C        		.byte	44
 1688 0021 1E        		.byte	30
 1689 0022 34        		.byte	52
 1690 0023 20        		.byte	32
 1691 0024 21        		.byte	33
 1692 0025 22        		.byte	34
 1693 0026 24        		.byte	36
 1694 0027 34        		.byte	52
 1695 0028 26        		.byte	38
 1696 0029 27        		.byte	39
 1697 002a 25        		.byte	37
 1698 002b 2E        		.byte	46
 1699 002c 36        		.byte	54
 1700 002d 2D        		.byte	45
 1701 002e 37        		.byte	55
 1702 002f 38        		.byte	56
 1703 0030 27        		.byte	39
 1704 0031 1E        		.byte	30
 1705 0032 1F        		.byte	31
 1706 0033 20        		.byte	32
 1707 0034 21        		.byte	33
 1708 0035 22        		.byte	34
 1709 0036 23        		.byte	35
 1710 0037 24        		.byte	36
 1711 0038 25        		.byte	37
 1712 0039 26        		.byte	38
 1713 003a 33        		.byte	51
 1714 003b 33        		.byte	51
 1715 003c 36        		.byte	54
 1716 003d 2E        		.byte	46
 1717 003e 37        		.byte	55
 1718 003f 38        		.byte	56
 1719 0040 1F        		.byte	31
 1720 0041 04        		.byte	4
 1721 0042 05        		.byte	5
 1722 0043 06        		.byte	6
 1723 0044 07        		.byte	7
 1724 0045 08        		.byte	8
 1725 0046 09        		.byte	9
 1726 0047 0A        		.byte	10
 1727 0048 0B        		.byte	11
 1728 0049 0C        		.byte	12
 1729 004a 0D        		.byte	13
 1730 004b 0E        		.byte	14
 1731 004c 0F        		.byte	15
 1732 004d 10        		.byte	16
 1733 004e 11        		.byte	17
 1734 004f 12        		.byte	18
 1735 0050 13        		.byte	19
 1736 0051 14        		.byte	20
 1737 0052 15        		.byte	21
 1738 0053 16        		.byte	22
 1739 0054 17        		.byte	23
 1740 0055 18        		.byte	24
 1741 0056 19        		.byte	25
 1742 0057 1A        		.byte	26
 1743 0058 1B        		.byte	27
 1744 0059 1C        		.byte	28
 1745 005a 1D        		.byte	29
 1746 005b 2F        		.byte	47
 1747 005c 31        		.byte	49
 1748 005d 30        		.byte	48
 1749 005e 23        		.byte	35
 1750 005f 2D        		.byte	45
 1751 0060 35        		.byte	53
 1752 0061 04        		.byte	4
 1753 0062 05        		.byte	5
 1754 0063 06        		.byte	6
 1755 0064 07        		.byte	7
 1756 0065 08        		.byte	8
 1757 0066 09        		.byte	9
 1758 0067 0A        		.byte	10
 1759 0068 0B        		.byte	11
 1760 0069 0C        		.byte	12
 1761 006a 0D        		.byte	13
 1762 006b 0E        		.byte	14
 1763 006c 0F        		.byte	15
 1764 006d 10        		.byte	16
 1765 006e 11        		.byte	17
 1766 006f 12        		.byte	18
 1767 0070 13        		.byte	19
 1768 0071 14        		.byte	20
 1769 0072 15        		.byte	21
 1770 0073 16        		.byte	22
 1771 0074 17        		.byte	23
 1772 0075 18        		.byte	24
 1773 0076 19        		.byte	25
 1774 0077 1A        		.byte	26
 1775 0078 1B        		.byte	27
 1776 0079 1C        		.byte	28
 1777 007a 1D        		.byte	29
 1778 007b 2F        		.byte	47
 1779 007c 31        		.byte	49
 1780 007d 30        		.byte	48
 1781 007e 35        		.byte	53
 1782 007f 4C        		.byte	76
 1783               	.global	ascii_to_qwerty_shift_lut
 1784               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a",@progbits
 1787               	ascii_to_qwerty_shift_lut:
 1788 0000 00        		.byte	0
 1789 0001 00        		.byte	0
 1790 0002 00        		.byte	0
 1791 0003 00        		.byte	0
 1792 0004 00        		.byte	0
 1793 0005 00        		.byte	0
 1794 0006 00        		.byte	0
 1795 0007 00        		.byte	0
 1796 0008 00        		.byte	0
 1797 0009 00        		.byte	0
 1798 000a 00        		.byte	0
 1799 000b 00        		.byte	0
 1800 000c 00        		.byte	0
 1801 000d 00        		.byte	0
 1802 000e 00        		.byte	0
 1803 000f 00        		.byte	0
 1804 0010 00        		.byte	0
 1805 0011 00        		.byte	0
 1806 0012 00        		.byte	0
 1807 0013 00        		.byte	0
 1808 0014 00        		.byte	0
 1809 0015 00        		.byte	0
 1810 0016 00        		.byte	0
 1811 0017 00        		.byte	0
 1812 0018 00        		.byte	0
 1813 0019 00        		.byte	0
 1814 001a 00        		.byte	0
 1815 001b 00        		.byte	0
 1816 001c 00        		.byte	0
 1817 001d 00        		.byte	0
 1818 001e 00        		.byte	0
 1819 001f 00        		.byte	0
 1820 0020 00        		.byte	0
 1821 0021 01        		.byte	1
 1822 0022 01        		.byte	1
 1823 0023 01        		.byte	1
 1824 0024 01        		.byte	1
 1825 0025 01        		.byte	1
 1826 0026 01        		.byte	1
 1827 0027 00        		.byte	0
 1828 0028 01        		.byte	1
 1829 0029 01        		.byte	1
 1830 002a 01        		.byte	1
 1831 002b 01        		.byte	1
 1832 002c 00        		.byte	0
 1833 002d 00        		.byte	0
 1834 002e 00        		.byte	0
 1835 002f 00        		.byte	0
 1836 0030 00        		.byte	0
 1837 0031 00        		.byte	0
 1838 0032 00        		.byte	0
 1839 0033 00        		.byte	0
 1840 0034 00        		.byte	0
 1841 0035 00        		.byte	0
 1842 0036 00        		.byte	0
 1843 0037 00        		.byte	0
 1844 0038 00        		.byte	0
 1845 0039 00        		.byte	0
 1846 003a 01        		.byte	1
 1847 003b 00        		.byte	0
 1848 003c 01        		.byte	1
 1849 003d 00        		.byte	0
 1850 003e 01        		.byte	1
 1851 003f 01        		.byte	1
 1852 0040 01        		.byte	1
 1853 0041 01        		.byte	1
 1854 0042 01        		.byte	1
 1855 0043 01        		.byte	1
 1856 0044 01        		.byte	1
 1857 0045 01        		.byte	1
 1858 0046 01        		.byte	1
 1859 0047 01        		.byte	1
 1860 0048 01        		.byte	1
 1861 0049 01        		.byte	1
 1862 004a 01        		.byte	1
 1863 004b 01        		.byte	1
 1864 004c 01        		.byte	1
 1865 004d 01        		.byte	1
 1866 004e 01        		.byte	1
 1867 004f 01        		.byte	1
 1868 0050 01        		.byte	1
 1869 0051 01        		.byte	1
 1870 0052 01        		.byte	1
 1871 0053 01        		.byte	1
 1872 0054 01        		.byte	1
 1873 0055 01        		.byte	1
 1874 0056 01        		.byte	1
 1875 0057 01        		.byte	1
 1876 0058 01        		.byte	1
 1877 0059 01        		.byte	1
 1878 005a 01        		.byte	1
 1879 005b 00        		.byte	0
 1880 005c 00        		.byte	0
 1881 005d 00        		.byte	0
 1882 005e 01        		.byte	1
 1883 005f 01        		.byte	1
 1884 0060 00        		.byte	0
 1885 0061 00        		.byte	0
 1886 0062 00        		.byte	0
 1887 0063 00        		.byte	0
 1888 0064 00        		.byte	0
 1889 0065 00        		.byte	0
 1890 0066 00        		.byte	0
 1891 0067 00        		.byte	0
 1892 0068 00        		.byte	0
 1893 0069 00        		.byte	0
 1894 006a 00        		.byte	0
 1895 006b 00        		.byte	0
 1896 006c 00        		.byte	0
 1897 006d 00        		.byte	0
 1898 006e 00        		.byte	0
 1899 006f 00        		.byte	0
 1900 0070 00        		.byte	0
 1901 0071 00        		.byte	0
 1902 0072 00        		.byte	0
 1903 0073 00        		.byte	0
 1904 0074 00        		.byte	0
 1905 0075 00        		.byte	0
 1906 0076 00        		.byte	0
 1907 0077 00        		.byte	0
 1908 0078 00        		.byte	0
 1909 0079 00        		.byte	0
 1910 007a 00        		.byte	0
 1911 007b 01        		.byte	1
 1912 007c 01        		.byte	1
 1913 007d 01        		.byte	1
 1914 007e 01        		.byte	1
 1915 007f 00        		.byte	0
 1916               		.section	.bss.scs_timer,"aw",@nobits
 1919               	scs_timer:
 1920 0000 0000      		.zero	2
 1921               		.section	.bss.shift_interrupted,"aw",@nobits
 1924               	shift_interrupted:
 1925 0000 0000      		.zero	2
 1926               		.text
 1927               	.Letext0:
 1928               		.file 3 "/usr/avr/include/stdint.h"
 1929               		.file 4 "/usr/lib/gcc/avr/7.1.0/include/stddef.h"
 1930               		.file 5 "./tmk_core/common/keyboard.h"
 1931               		.file 6 "./tmk_core/common/action.h"
 1932               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1933               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1934               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1935               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1936               		.file 11 "/usr/avr/include/stdio.h"
 1937               		.file 12 "./tmk_core/common/report.h"
 1938               		.file 13 "./tmk_core/common/host.h"
 1939               		.file 14 "./tmk_core/common/debug.h"
 1940               		.file 15 "quantum/keycode_config.h"
 1941               		.file 16 "./tmk_core/common/keycode.h"
 1942               		.file 17 "quantum/quantum_keycodes.h"
 1943               		.file 18 "quantum/keymap.h"
 1944               		.file 19 "./tmk_core/common/action_layer.h"
 1945               		.file 20 "./tmk_core/common/timer.h"
 1946               		.file 21 "./tmk_core/common/action_util.h"
 1947               		.file 22 "/usr/avr/include/stdlib.h"
 1948               		.file 23 "./tmk_core/protocol/lufa/outputselect.h"
 1949               		.file 24 "./tmk_core/common/backlight.h"
 1950               		.file 25 "./quantum/process_keycode/process_unicode_common.h"
 1951               		.file 26 "quantum/quantum.h"
 1952               		.file 27 "./quantum/process_keycode/process_leader.h"
 1953               		.file 28 "./quantum/process_keycode/process_unicode.h"
 1954               		.file 29 "./tmk_core/common/eeconfig.h"
 1955               		.file 30 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccGkjImF.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGkjImF.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGkjImF.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGkjImF.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGkjImF.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGkjImF.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccGkjImF.s:132    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
     /tmp/ccGkjImF.s:162    .text.qk_register_mods:0000000000000000 qk_register_mods
     /tmp/ccGkjImF.s:175    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
     /tmp/ccGkjImF.s:205    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
     /tmp/ccGkjImF.s:219    .text.register_code16:0000000000000000 register_code16
     /tmp/ccGkjImF.s:275    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccGkjImF.s:329    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccGkjImF.s:349    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccGkjImF.s:369    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccGkjImF.s:387    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccGkjImF.s:423    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccGkjImF.s:1924   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccGkjImF.s:1919   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccGkjImF.s:862    .text.send_string:0000000000000000 send_string
     /tmp/ccGkjImF.s:1654   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccGkjImF.s:1787   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccGkjImF.s:985    .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccGkjImF.s:1122   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccGkjImF.s:1248   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccGkjImF.s:1265   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccGkjImF.s:1282   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccGkjImF.s:1297   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccGkjImF.s:1360   .text.send_byte:0000000000000000 send_byte
     /tmp/ccGkjImF.s:1397   .text.send_word:0000000000000000 send_word
     /tmp/ccGkjImF.s:1431   .text.send_dword:0000000000000000 send_dword
     /tmp/ccGkjImF.s:1477   .text.hex_to_keycode:0000000000000000 hex_to_keycode
     /tmp/ccGkjImF.s:1518   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccGkjImF.s:1536   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccGkjImF.s:1536   .text.led_set_user:0000000000000000 led_set_user.localalias.1
     /tmp/ccGkjImF.s:1555   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccGkjImF.s:1570   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccGkjImF.s:1588   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccGkjImF.s:1605   .text.led_set:0000000000000000 led_set
     /tmp/ccGkjImF.s:1623   .text.startup_user:0000000000000000 startup_user
     /tmp/ccGkjImF.s:1638   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
process_leader
process_unicode
timer_read
register_mods
debug_config
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
