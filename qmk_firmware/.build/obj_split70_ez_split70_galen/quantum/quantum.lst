   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB107:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
   3:quantum/quantum.c **** #include "outputselect.h"
   4:quantum/quantum.c **** #endif
   5:quantum/quantum.c **** 
   6:quantum/quantum.c **** #ifndef TAPPING_TERM
   7:quantum/quantum.c **** #define TAPPING_TERM 200
   8:quantum/quantum.c **** #endif
   9:quantum/quantum.c **** 
  10:quantum/quantum.c **** #include "backlight.h"
  11:quantum/quantum.c **** extern backlight_config_t backlight_config;
  12:quantum/quantum.c **** 
  13:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  14:quantum/quantum.c **** #include "fauxclicky.h"
  15:quantum/quantum.c **** #endif
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  15               		.loc 1 17 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  38 0008 8C01      		movw r16,r24
  39 000a EB01      		movw r28,r22
  18:quantum/quantum.c ****   switch (code) {
  40               		.loc 1 18 0
  41 000c 9A95      		dec r25
  42               	.LVL1:
  43 000e 8115      		cp r24,__zero_reg__
  44 0010 9F41      		sbci r25,31
  45 0012 00F4      		brsh .L1
  19:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  20:quantum/quantum.c ****     break;
  21:quantum/quantum.c ****   default:
  22:quantum/quantum.c ****     return;
  23:quantum/quantum.c ****   }
  24:quantum/quantum.c **** 
  25:quantum/quantum.c ****   if (code & QK_LCTL)
  46               		.loc 1 25 0
  47 0014 10FF      		sbrs r17,0
  48 0016 00C0      		rjmp .L4
  26:quantum/quantum.c ****     f(KC_LCTL);
  49               		.loc 1 26 0
  50 0018 80EE      		ldi r24,lo8(-32)
  51 001a FB01      		movw r30,r22
  52 001c 0995      		icall
  53               	.LVL2:
  54               	.L4:
  27:quantum/quantum.c ****   if (code & QK_LSFT)
  55               		.loc 1 27 0
  56 001e 11FF      		sbrs r17,1
  57 0020 00C0      		rjmp .L5
  28:quantum/quantum.c ****     f(KC_LSFT);
  58               		.loc 1 28 0
  59 0022 81EE      		ldi r24,lo8(-31)
  60 0024 FE01      		movw r30,r28
  61 0026 0995      		icall
  62               	.LVL3:
  63               	.L5:
  29:quantum/quantum.c ****   if (code & QK_LALT)
  64               		.loc 1 29 0
  65 0028 12FF      		sbrs r17,2
  66 002a 00C0      		rjmp .L6
  30:quantum/quantum.c ****     f(KC_LALT);
  67               		.loc 1 30 0
  68 002c 82EE      		ldi r24,lo8(-30)
  69 002e FE01      		movw r30,r28
  70 0030 0995      		icall
  71               	.LVL4:
  72               	.L6:
  31:quantum/quantum.c ****   if (code & QK_LGUI)
  73               		.loc 1 31 0
  74 0032 13FF      		sbrs r17,3
  75 0034 00C0      		rjmp .L7
  32:quantum/quantum.c ****     f(KC_LGUI);
  76               		.loc 1 32 0
  77 0036 83EE      		ldi r24,lo8(-29)
  78 0038 FE01      		movw r30,r28
  79 003a 0995      		icall
  80               	.LVL5:
  81               	.L7:
  33:quantum/quantum.c **** 
  34:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  82               		.loc 1 34 0
  83 003c 0115      		cp r16,__zero_reg__
  84 003e 1041      		sbci r17,16
  85 0040 00F4      		brsh .L21
  86               	.L1:
  87               	/* epilogue start */
  35:quantum/quantum.c **** 
  36:quantum/quantum.c ****   if (code & QK_RCTL)
  37:quantum/quantum.c ****     f(KC_RCTL);
  38:quantum/quantum.c ****   if (code & QK_RSFT)
  39:quantum/quantum.c ****     f(KC_RSFT);
  40:quantum/quantum.c ****   if (code & QK_RALT)
  41:quantum/quantum.c ****     f(KC_RALT);
  42:quantum/quantum.c ****   if (code & QK_RGUI)
  43:quantum/quantum.c ****     f(KC_RGUI);
  44:quantum/quantum.c **** }
  88               		.loc 1 44 0
  89 0042 DF91      		pop r29
  90 0044 CF91      		pop r28
  91               	.LVL6:
  92 0046 1F91      		pop r17
  93 0048 0F91      		pop r16
  94               	.LVL7:
  95 004a 0895      		ret
  96               	.LVL8:
  97               	.L21:
  37:quantum/quantum.c ****   if (code & QK_RSFT)
  98               		.loc 1 37 0
  99 004c 84EE      		ldi r24,lo8(-28)
 100 004e FE01      		movw r30,r28
 101 0050 0995      		icall
 102               	.LVL9:
  39:quantum/quantum.c ****   if (code & QK_RALT)
 103               		.loc 1 39 0
 104 0052 85EE      		ldi r24,lo8(-27)
 105 0054 FE01      		movw r30,r28
 106 0056 0995      		icall
 107               	.LVL10:
  41:quantum/quantum.c ****   if (code & QK_RGUI)
 108               		.loc 1 41 0
 109 0058 86EE      		ldi r24,lo8(-26)
 110 005a FE01      		movw r30,r28
 111 005c 0995      		icall
 112               	.LVL11:
  43:quantum/quantum.c **** }
 113               		.loc 1 43 0
 114 005e 87EE      		ldi r24,lo8(-25)
 115 0060 FE01      		movw r30,r28
 116               	/* epilogue start */
 117               		.loc 1 44 0
 118 0062 DF91      		pop r29
 119 0064 CF91      		pop r28
 120               	.LVL12:
 121 0066 1F91      		pop r17
 122 0068 0F91      		pop r16
 123               	.LVL13:
  43:quantum/quantum.c **** }
 124               		.loc 1 43 0
 125 006a 0994      		ijmp
 126               	.LVL14:
 127               		.cfi_endproc
 128               	.LFE107:
 130               		.section	.text.qk_register_mods,"ax",@progbits
 132               	qk_register_mods:
 133               	.LFB110:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
  47:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
  48:quantum/quantum.c ****     send_keyboard_report();
  49:quantum/quantum.c **** }
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
  52:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
  53:quantum/quantum.c ****     send_keyboard_report();
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 134               		.loc 1 56 0
 135               		.cfi_startproc
 136               	.LVL15:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  57:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 141               		.loc 1 57 0
 142 0000 8770      		andi r24,lo8(7)
 143               	.LVL16:
 144 0002 91E0      		ldi r25,lo8(1)
 145 0004 00C0      		rjmp 2f
 146               		1:
 147 0006 990F      		lsl r25
 148               		2:
 149 0008 8A95      		dec r24
 150 000a 02F4      		brpl 1b
 151 000c 892F      		mov r24,r25
 152 000e 0E94 0000 		call add_weak_mods
 153               	.LVL17:
  58:quantum/quantum.c ****     send_keyboard_report();
 154               		.loc 1 58 0
 155 0012 0C94 0000 		jmp send_keyboard_report
 156               	.LVL18:
 157               		.cfi_endproc
 158               	.LFE110:
 160               		.section	.text.qk_register_weak_mods,"ax",@progbits
 162               	qk_register_weak_mods:
 163               	.LFB149:
 164               		.cfi_startproc
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
 169 0000 0C94 0000 		jmp qk_register_mods
 170               		.cfi_endproc
 171               	.LFE149:
 173               		.section	.text.qk_unregister_mods,"ax",@progbits
 175               	qk_unregister_mods:
 176               	.LFB111:
  59:quantum/quantum.c **** }
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 177               		.loc 1 61 0
 178               		.cfi_startproc
 179               	.LVL19:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  62:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 184               		.loc 1 62 0
 185 0000 8770      		andi r24,lo8(7)
 186               	.LVL20:
 187 0002 91E0      		ldi r25,lo8(1)
 188 0004 00C0      		rjmp 2f
 189               		1:
 190 0006 990F      		lsl r25
 191               		2:
 192 0008 8A95      		dec r24
 193 000a 02F4      		brpl 1b
 194 000c 892F      		mov r24,r25
 195 000e 0E94 0000 		call del_weak_mods
 196               	.LVL21:
  63:quantum/quantum.c ****     send_keyboard_report();
 197               		.loc 1 63 0
 198 0012 0C94 0000 		jmp send_keyboard_report
 199               	.LVL22:
 200               		.cfi_endproc
 201               	.LFE111:
 203               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 205               	qk_unregister_weak_mods:
 206               	.LFB147:
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212 0000 0C94 0000 		jmp qk_unregister_mods
 213               		.cfi_endproc
 214               	.LFE147:
 216               		.section	.text.register_code16,"ax",@progbits
 217               	.global	register_code16
 219               	register_code16:
 220               	.LFB112:
  64:quantum/quantum.c **** }
  65:quantum/quantum.c **** 
  66:quantum/quantum.c **** void register_code16 (uint16_t code) {
 221               		.loc 1 66 0
 222               		.cfi_startproc
 223               	.LVL23:
 224               		.loc 1 66 0
 225 0000 CF93      		push r28
 226               	.LCFI4:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 28, -2
 229 0002 DF93      		push r29
 230               	.LCFI5:
 231               		.cfi_def_cfa_offset 4
 232               		.cfi_offset 29, -3
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 2 */
 236               	.L__stack_usage = 2
 237 0004 EC01      		movw r28,r24
  67:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 238               		.loc 1 67 0
 239 0006 805E      		subi r24,-32
 240 0008 9109      		sbc r25,__zero_reg__
 241               	.LVL24:
 242 000a 0897      		sbiw r24,8
 243 000c 00F0      		brlo .L27
 244               		.loc 1 67 0 is_stmt 0 discriminator 1
 245 000e 2097      		sbiw r28,0
 246 0010 01F4      		brne .L28
 247               	.L27:
  68:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 248               		.loc 1 68 0 is_stmt 1
 249 0012 60E0      		ldi r22,lo8(gs(qk_register_mods))
 250 0014 70E0      		ldi r23,hi8(gs(qk_register_mods))
 251               	.L30:
  69:quantum/quantum.c ****   } else {
  70:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 252               		.loc 1 70 0
 253 0016 CE01      		movw r24,r28
 254 0018 0E94 0000 		call do_code16
 255               	.LVL25:
  71:quantum/quantum.c ****   }
  72:quantum/quantum.c ****   register_code (code);
 256               		.loc 1 72 0
 257 001c 8C2F      		mov r24,r28
 258               	/* epilogue start */
  73:quantum/quantum.c **** }
 259               		.loc 1 73 0
 260 001e DF91      		pop r29
 261 0020 CF91      		pop r28
 262               	.LVL26:
  72:quantum/quantum.c **** }
 263               		.loc 1 72 0
 264 0022 0C94 0000 		jmp register_code
 265               	.LVL27:
 266               	.L28:
  70:quantum/quantum.c ****   }
 267               		.loc 1 70 0
 268 0026 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 269 0028 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 270 002a 00C0      		rjmp .L30
 271               		.cfi_endproc
 272               	.LFE112:
 274               		.section	.text.unregister_code16,"ax",@progbits
 275               	.global	unregister_code16
 277               	unregister_code16:
 278               	.LFB113:
  74:quantum/quantum.c **** 
  75:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 279               		.loc 1 75 0
 280               		.cfi_startproc
 281               	.LVL28:
 282 0000 CF93      		push r28
 283               	.LCFI6:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 28, -2
 286 0002 DF93      		push r29
 287               	.LCFI7:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 29, -3
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 2 */
 293               	.L__stack_usage = 2
 294 0004 EC01      		movw r28,r24
  76:quantum/quantum.c ****   unregister_code (code);
 295               		.loc 1 76 0
 296 0006 0E94 0000 		call unregister_code
 297               	.LVL29:
  77:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 298               		.loc 1 77 0
 299 000a CE01      		movw r24,r28
 300 000c 805E      		subi r24,-32
 301 000e 9109      		sbc r25,__zero_reg__
 302 0010 0897      		sbiw r24,8
 303 0012 00F0      		brlo .L32
 304               		.loc 1 77 0 is_stmt 0 discriminator 1
 305 0014 2097      		sbiw r28,0
 306 0016 01F4      		brne .L33
 307               	.L32:
  78:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 308               		.loc 1 78 0 is_stmt 1
 309 0018 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 310 001a 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 311               	.L34:
  79:quantum/quantum.c ****   } else {
  80:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 312               		.loc 1 80 0
 313 001c CE01      		movw r24,r28
 314               	/* epilogue start */
  81:quantum/quantum.c ****   }
  82:quantum/quantum.c **** }
 315               		.loc 1 82 0
 316 001e DF91      		pop r29
 317 0020 CF91      		pop r28
 318               	.LVL30:
  80:quantum/quantum.c ****   }
 319               		.loc 1 80 0
 320 0022 0C94 0000 		jmp do_code16
 321               	.LVL31:
 322               	.L33:
 323 0026 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 324 0028 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 325 002a 00C0      		rjmp .L34
 326               		.cfi_endproc
 327               	.LFE113:
 329               		.section	.text.process_action_kb,"ax",@progbits
 330               		.weak	process_action_kb
 332               	process_action_kb:
 333               	.LFB114:
  83:quantum/quantum.c **** 
  84:quantum/quantum.c **** __attribute__ ((weak))
  85:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 334               		.loc 1 85 0
 335               		.cfi_startproc
 336               	.LVL32:
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
  86:quantum/quantum.c ****   return true;
  87:quantum/quantum.c **** }
 341               		.loc 1 87 0
 342 0000 81E0      		ldi r24,lo8(1)
 343               	.LVL33:
 344 0002 0895      		ret
 345               		.cfi_endproc
 346               	.LFE114:
 348               		.section	.text.process_record_user,"ax",@progbits
 349               		.weak	process_record_user
 351               	process_record_user:
 352               	.LFB116:
  88:quantum/quantum.c **** 
  89:quantum/quantum.c **** __attribute__ ((weak))
  90:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  91:quantum/quantum.c ****   return process_record_user(keycode, record);
  92:quantum/quantum.c **** }
  93:quantum/quantum.c **** 
  94:quantum/quantum.c **** __attribute__ ((weak))
  95:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 353               		.loc 1 95 0
 354               		.cfi_startproc
 355               	.LVL34:
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 358               	/* stack size = 0 */
 359               	.L__stack_usage = 0
  96:quantum/quantum.c ****   return true;
  97:quantum/quantum.c **** }
 360               		.loc 1 97 0
 361 0000 81E0      		ldi r24,lo8(1)
 362               	.LVL35:
 363 0002 0895      		ret
 364               		.cfi_endproc
 365               	.LFE116:
 367               		.section	.text.process_record_kb,"ax",@progbits
 368               		.weak	process_record_kb
 370               	process_record_kb:
 371               	.LFB115:
  90:quantum/quantum.c ****   return process_record_user(keycode, record);
 372               		.loc 1 90 0
 373               		.cfi_startproc
 374               	.LVL36:
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 0 */
 378               	.L__stack_usage = 0
  91:quantum/quantum.c **** }
 379               		.loc 1 91 0
 380 0000 0C94 0000 		jmp process_record_user
 381               	.LVL37:
 382               		.cfi_endproc
 383               	.LFE115:
 385               		.section	.text.reset_keyboard,"ax",@progbits
 386               	.global	reset_keyboard
 388               	reset_keyboard:
 389               	.LFB117:
  98:quantum/quantum.c **** 
  99:quantum/quantum.c **** void reset_keyboard(void) {
 390               		.loc 1 99 0
 391               		.cfi_startproc
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 0 */
 395               	.L__stack_usage = 0
 100:quantum/quantum.c ****   clear_keyboard();
 396               		.loc 1 100 0
 397 0000 0E94 0000 		call clear_keyboard
 398               	.LVL38:
 399               	.LBB4:
 400               	.LBB5:
 401               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 402               		.loc 2 187 0
 403 0004 2FEF      		ldi r18,lo8(799999)
 404 0006 84E3      		ldi r24,hi8(799999)
 405 0008 9CE0      		ldi r25,hlo8(799999)
 406 000a 2150      	1:	subi r18,1
 407 000c 8040      		sbci r24,0
 408 000e 9040      		sbci r25,0
 409 0010 01F4      		brne 1b
 410 0012 00C0      		rjmp .
 411 0014 0000      		nop
 412               	.LVL39:
 413               	.LBE5:
 414               	.LBE4:
 101:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 102:quantum/quantum.c ****   stop_all_notes();
 103:quantum/quantum.c ****   shutdown_user();
 104:quantum/quantum.c **** #endif
 105:quantum/quantum.c ****   wait_ms(250);
 106:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
 107:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 108:quantum/quantum.c **** #endif
 109:quantum/quantum.c ****   bootloader_jump();
 415               		.loc 1 109 0
 416 0016 0C94 0000 		jmp bootloader_jump
 417               	.LVL40:
 418               		.cfi_endproc
 419               	.LFE117:
 421               		.section	.text.process_record_quantum,"ax",@progbits
 422               	.global	process_record_quantum
 424               	process_record_quantum:
 425               	.LFB118:
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** // Shift / paren setup
 113:quantum/quantum.c **** 
 114:quantum/quantum.c **** #ifndef LSPO_KEY
 115:quantum/quantum.c ****   #define LSPO_KEY KC_9
 116:quantum/quantum.c **** #endif
 117:quantum/quantum.c **** #ifndef RSPC_KEY
 118:quantum/quantum.c ****   #define RSPC_KEY KC_0
 119:quantum/quantum.c **** #endif
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 122:quantum/quantum.c **** static uint16_t scs_timer = 0;
 123:quantum/quantum.c **** 
 124:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 426               		.loc 1 124 0
 427               		.cfi_startproc
 428               	.LVL41:
 429 0000 0F93      		push r16
 430               	.LCFI8:
 431               		.cfi_def_cfa_offset 3
 432               		.cfi_offset 16, -2
 433 0002 1F93      		push r17
 434               	.LCFI9:
 435               		.cfi_def_cfa_offset 4
 436               		.cfi_offset 17, -3
 437 0004 CF93      		push r28
 438               	.LCFI10:
 439               		.cfi_def_cfa_offset 5
 440               		.cfi_offset 28, -4
 441 0006 DF93      		push r29
 442               	.LCFI11:
 443               		.cfi_def_cfa_offset 6
 444               		.cfi_offset 29, -5
 445               	/* prologue: function */
 446               	/* frame size = 0 */
 447               	/* stack size = 4 */
 448               	.L__stack_usage = 4
 449 0008 8C01      		movw r16,r24
 125:quantum/quantum.c **** 
 126:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 127:quantum/quantum.c ****   keypos_t key = record->event.key;
 450               		.loc 1 127 0
 451 000a FC01      		movw r30,r24
 452 000c C081      		ld r28,Z
 453 000e D181      		ldd r29,Z+1
 454               	.LVL42:
 128:quantum/quantum.c ****   uint16_t keycode;
 129:quantum/quantum.c **** 
 130:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 131:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 132:quantum/quantum.c ****     if (!disable_action_cache) {
 133:quantum/quantum.c ****       uint8_t layer;
 134:quantum/quantum.c **** 
 135:quantum/quantum.c ****       if (record->event.pressed) {
 136:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 137:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 138:quantum/quantum.c ****       } else {
 139:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 140:quantum/quantum.c ****       }
 141:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 142:quantum/quantum.c ****     } else
 143:quantum/quantum.c ****   #endif
 144:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 455               		.loc 1 144 0
 456 0010 CE01      		movw r24,r28
 457               	.LVL43:
 458 0012 0E94 0000 		call layer_switch_get_layer
 459               	.LVL44:
 460 0016 BE01      		movw r22,r28
 461 0018 0E94 0000 		call keymap_key_to_keycode
 462               	.LVL45:
 463 001c EC01      		movw r28,r24
 464               	.LVL46:
 145:quantum/quantum.c **** 
 146:quantum/quantum.c ****     // This is how you use actions here
 147:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 148:quantum/quantum.c ****     //   action_t action;
 149:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 150:quantum/quantum.c ****     //   process_action(record, action);
 151:quantum/quantum.c ****     //   return false;
 152:quantum/quantum.c ****     // }
 153:quantum/quantum.c **** 
 154:quantum/quantum.c ****   if (!(
 155:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 465               		.loc 1 155 0
 466 001e B801      		movw r22,r16
 467 0020 0E94 0000 		call process_record_kb
 468               	.LVL47:
 156:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 157:quantum/quantum.c ****     process_midi(keycode, record) &&
 158:quantum/quantum.c ****   #endif
 159:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 160:quantum/quantum.c ****     process_music(keycode, record) &&
 161:quantum/quantum.c ****   #endif
 162:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 163:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 164:quantum/quantum.c ****   #endif
 165:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 166:quantum/quantum.c ****     process_leader(keycode, record) &&
 469               		.loc 1 166 0
 470 0024 8823      		tst r24
 471 0026 01F0      		breq .L39
 472               		.loc 1 166 0 is_stmt 0 discriminator 2
 473 0028 B801      		movw r22,r16
 474 002a CE01      		movw r24,r28
 475 002c 0E94 0000 		call process_leader
 476               	.LVL48:
 155:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 477               		.loc 1 155 0 is_stmt 1 discriminator 2
 478 0030 8823      		tst r24
 479 0032 01F0      		breq .L39
 167:quantum/quantum.c ****   #endif
 168:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 169:quantum/quantum.c ****     process_chording(keycode, record) &&
 170:quantum/quantum.c ****   #endif
 171:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 172:quantum/quantum.c ****     process_combo(keycode, record) &&
 173:quantum/quantum.c ****   #endif
 174:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 175:quantum/quantum.c ****     process_unicode(keycode, record) &&
 480               		.loc 1 175 0 discriminator 3
 481 0034 B801      		movw r22,r16
 482 0036 CE01      		movw r24,r28
 483 0038 0E94 0000 		call process_unicode
 484               	.LVL49:
 166:quantum/quantum.c ****   #endif
 485               		.loc 1 166 0 discriminator 3
 486 003c 8111      		cpse r24,__zero_reg__
 487 003e 00C0      		rjmp .L43
 488               	.L39:
 176:quantum/quantum.c ****   #endif
 177:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 178:quantum/quantum.c ****     process_ucis(keycode, record) &&
 179:quantum/quantum.c ****   #endif
 180:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 181:quantum/quantum.c ****     process_printer(keycode, record) &&
 182:quantum/quantum.c ****   #endif
 183:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 184:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 185:quantum/quantum.c ****   #endif
 186:quantum/quantum.c ****       true)) {
 187:quantum/quantum.c ****     return false;
 188:quantum/quantum.c ****   }
 189:quantum/quantum.c **** 
 190:quantum/quantum.c ****   // Shift / paren setup
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   switch(keycode) {
 193:quantum/quantum.c ****     case RESET:
 194:quantum/quantum.c ****       if (record->event.pressed) {
 195:quantum/quantum.c ****         reset_keyboard();
 196:quantum/quantum.c ****       }
 197:quantum/quantum.c **** 	  return false;
 198:quantum/quantum.c ****       break;
 199:quantum/quantum.c ****     case DEBUG:
 200:quantum/quantum.c ****       if (record->event.pressed) {
 201:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 202:quantum/quantum.c ****           debug_enable = true;
 203:quantum/quantum.c ****       }
 204:quantum/quantum.c **** 	  return false;
 205:quantum/quantum.c ****       break;
 206:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 207:quantum/quantum.c ****   case FC_TOG:
 208:quantum/quantum.c ****     if (record->event.pressed) {
 209:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 210:quantum/quantum.c ****     }
 211:quantum/quantum.c ****     return false;
 212:quantum/quantum.c ****     break;
 213:quantum/quantum.c ****   case FC_ON:
 214:quantum/quantum.c ****     if (record->event.pressed) {
 215:quantum/quantum.c ****       FAUXCLICKY_ON;
 216:quantum/quantum.c ****     }
 217:quantum/quantum.c ****     return false;
 218:quantum/quantum.c ****     break;
 219:quantum/quantum.c ****   case FC_OFF:
 220:quantum/quantum.c ****     if (record->event.pressed) {
 221:quantum/quantum.c ****       FAUXCLICKY_OFF;
 222:quantum/quantum.c ****     }
 223:quantum/quantum.c ****     return false;
 224:quantum/quantum.c ****     break;
 225:quantum/quantum.c ****   #endif
 226:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 227:quantum/quantum.c **** 	case RGB_TOG:
 228:quantum/quantum.c **** 		if (record->event.pressed) {
 229:quantum/quantum.c **** 			rgblight_toggle();
 230:quantum/quantum.c ****       }
 231:quantum/quantum.c **** 	  return false;
 232:quantum/quantum.c ****       break;
 233:quantum/quantum.c **** 	case RGB_MOD:
 234:quantum/quantum.c **** 		if (record->event.pressed) {
 235:quantum/quantum.c **** 			rgblight_step();
 236:quantum/quantum.c ****       }
 237:quantum/quantum.c **** 	  return false;
 238:quantum/quantum.c ****       break;
 239:quantum/quantum.c **** 	case RGB_HUI:
 240:quantum/quantum.c **** 		if (record->event.pressed) {
 241:quantum/quantum.c **** 			rgblight_increase_hue();
 242:quantum/quantum.c ****       }
 243:quantum/quantum.c **** 	  return false;
 244:quantum/quantum.c ****       break;
 245:quantum/quantum.c **** 	case RGB_HUD:
 246:quantum/quantum.c **** 		if (record->event.pressed) {
 247:quantum/quantum.c **** 			rgblight_decrease_hue();
 248:quantum/quantum.c ****       }
 249:quantum/quantum.c **** 	  return false;
 250:quantum/quantum.c ****       break;
 251:quantum/quantum.c **** 	case RGB_SAI:
 252:quantum/quantum.c **** 		if (record->event.pressed) {
 253:quantum/quantum.c **** 			rgblight_increase_sat();
 254:quantum/quantum.c ****       }
 255:quantum/quantum.c **** 	  return false;
 256:quantum/quantum.c ****       break;
 257:quantum/quantum.c **** 	case RGB_SAD:
 258:quantum/quantum.c **** 		if (record->event.pressed) {
 259:quantum/quantum.c **** 			rgblight_decrease_sat();
 260:quantum/quantum.c ****       }
 261:quantum/quantum.c **** 	  return false;
 262:quantum/quantum.c ****       break;
 263:quantum/quantum.c **** 	case RGB_VAI:
 264:quantum/quantum.c **** 		if (record->event.pressed) {
 265:quantum/quantum.c **** 			rgblight_increase_val();
 266:quantum/quantum.c ****       }
 267:quantum/quantum.c **** 	  return false;
 268:quantum/quantum.c ****       break;
 269:quantum/quantum.c **** 	case RGB_VAD:
 270:quantum/quantum.c **** 		if (record->event.pressed) {
 271:quantum/quantum.c **** 			rgblight_decrease_val();
 272:quantum/quantum.c ****       }
 273:quantum/quantum.c **** 	  return false;
 274:quantum/quantum.c ****       break;
 275:quantum/quantum.c **** 	#endif
 276:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 277:quantum/quantum.c ****     case OUT_AUTO:
 278:quantum/quantum.c ****       if (record->event.pressed) {
 279:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 280:quantum/quantum.c ****       }
 281:quantum/quantum.c ****       return false;
 282:quantum/quantum.c ****       break;
 283:quantum/quantum.c ****     case OUT_USB:
 284:quantum/quantum.c ****       if (record->event.pressed) {
 285:quantum/quantum.c ****         set_output(OUTPUT_USB);
 286:quantum/quantum.c ****       }
 287:quantum/quantum.c ****       return false;
 288:quantum/quantum.c ****       break;
 289:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 290:quantum/quantum.c ****     case OUT_BT:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 293:quantum/quantum.c ****       }
 294:quantum/quantum.c ****       return false;
 295:quantum/quantum.c ****       break;
 296:quantum/quantum.c ****     #endif
 297:quantum/quantum.c ****     #ifdef ADAFRUIT_BLE_ENABLE
 298:quantum/quantum.c ****     case OUT_BLE:
 299:quantum/quantum.c ****       if (record->event.pressed) {
 300:quantum/quantum.c ****         set_output(OUTPUT_ADAFRUIT_BLE);
 301:quantum/quantum.c ****       }
 302:quantum/quantum.c ****       return false;
 303:quantum/quantum.c ****       break;
 304:quantum/quantum.c ****     #endif
 305:quantum/quantum.c ****     #endif
 306:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 307:quantum/quantum.c ****       if (record->event.pressed) {
 308:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 309:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 310:quantum/quantum.c ****             eeconfig_init();
 311:quantum/quantum.c ****         }
 312:quantum/quantum.c ****         /* keymap config */
 313:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 314:quantum/quantum.c ****         switch (keycode)
 315:quantum/quantum.c ****         {
 316:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 317:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 318:quantum/quantum.c ****             break;
 319:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 320:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 321:quantum/quantum.c ****             break;
 322:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 323:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 324:quantum/quantum.c ****             break;
 325:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 326:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 327:quantum/quantum.c ****             break;
 328:quantum/quantum.c ****           case MAGIC_NO_GUI:
 329:quantum/quantum.c ****             keymap_config.no_gui = true;
 330:quantum/quantum.c ****             break;
 331:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 332:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 333:quantum/quantum.c ****             break;
 334:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 335:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 336:quantum/quantum.c ****             break;
 337:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 338:quantum/quantum.c ****             keymap_config.nkro = true;
 339:quantum/quantum.c ****             break;
 340:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 341:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 342:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 343:quantum/quantum.c ****             break;
 344:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 345:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 346:quantum/quantum.c ****             break;
 347:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 348:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 349:quantum/quantum.c ****             break;
 350:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 351:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 352:quantum/quantum.c ****             break;
 353:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 354:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 355:quantum/quantum.c ****             break;
 356:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 357:quantum/quantum.c ****             keymap_config.no_gui = false;
 358:quantum/quantum.c ****             break;
 359:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 360:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 361:quantum/quantum.c ****             break;
 362:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 363:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 364:quantum/quantum.c ****             break;
 365:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 366:quantum/quantum.c ****             keymap_config.nkro = false;
 367:quantum/quantum.c ****             break;
 368:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 369:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 370:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 371:quantum/quantum.c ****             break;
 372:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 373:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 374:quantum/quantum.c ****             break;
 375:quantum/quantum.c ****           default:
 376:quantum/quantum.c ****             break;
 377:quantum/quantum.c ****         }
 378:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 379:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 380:quantum/quantum.c **** 
 381:quantum/quantum.c ****         return false;
 382:quantum/quantum.c ****       }
 383:quantum/quantum.c ****       break;
 384:quantum/quantum.c ****     case KC_LSPO: {
 385:quantum/quantum.c ****       if (record->event.pressed) {
 386:quantum/quantum.c ****         shift_interrupted[0] = false;
 387:quantum/quantum.c ****         scs_timer = timer_read ();
 388:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 389:quantum/quantum.c ****       }
 390:quantum/quantum.c ****       else {
 391:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 392:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 393:quantum/quantum.c ****             shift_interrupted[0] = true;
 394:quantum/quantum.c ****             shift_interrupted[1] = true;
 395:quantum/quantum.c ****           }
 396:quantum/quantum.c ****         #endif
 397:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 398:quantum/quantum.c ****           register_code(LSPO_KEY);
 399:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 400:quantum/quantum.c ****         }
 401:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 402:quantum/quantum.c ****       }
 403:quantum/quantum.c ****       return false;
 404:quantum/quantum.c ****       // break;
 405:quantum/quantum.c ****     }
 406:quantum/quantum.c **** 
 407:quantum/quantum.c ****     case KC_RSPC: {
 408:quantum/quantum.c ****       if (record->event.pressed) {
 409:quantum/quantum.c ****         shift_interrupted[1] = false;
 410:quantum/quantum.c ****         scs_timer = timer_read ();
 411:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 412:quantum/quantum.c ****       }
 413:quantum/quantum.c ****       else {
 414:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 415:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 416:quantum/quantum.c ****             shift_interrupted[0] = true;
 417:quantum/quantum.c ****             shift_interrupted[1] = true;
 418:quantum/quantum.c ****           }
 419:quantum/quantum.c ****         #endif
 420:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 421:quantum/quantum.c ****           register_code(RSPC_KEY);
 422:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 423:quantum/quantum.c ****         }
 424:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 425:quantum/quantum.c ****       }
 426:quantum/quantum.c ****       return false;
 427:quantum/quantum.c ****       // break;
 428:quantum/quantum.c ****     }
 429:quantum/quantum.c ****     default: {
 430:quantum/quantum.c ****       shift_interrupted[0] = true;
 431:quantum/quantum.c ****       shift_interrupted[1] = true;
 432:quantum/quantum.c ****       break;
 433:quantum/quantum.c ****     }
 434:quantum/quantum.c ****   }
 435:quantum/quantum.c **** 
 436:quantum/quantum.c ****   return process_action_kb(record);
 437:quantum/quantum.c **** }
 489               		.loc 1 437 0
 490 0040 80E0      		ldi r24,0
 491               	/* epilogue start */
 492 0042 DF91      		pop r29
 493 0044 CF91      		pop r28
 494               	.LVL50:
 495 0046 1F91      		pop r17
 496 0048 0F91      		pop r16
 497               	.LVL51:
 498 004a 0895      		ret
 499               	.LVL52:
 500               	.L44:
 194:quantum/quantum.c ****         reset_keyboard();
 501               		.loc 1 194 0
 502 004c F801      		movw r30,r16
 503 004e 8281      		ldd r24,Z+2
 504 0050 8823      		tst r24
 505 0052 01F0      		breq .L39
 195:quantum/quantum.c ****       }
 506               		.loc 1 195 0
 507 0054 0E94 0000 		call reset_keyboard
 508               	.LVL53:
 509 0058 00C0      		rjmp .L39
 510               	.L45:
 200:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 511               		.loc 1 200 0
 512 005a F801      		movw r30,r16
 513 005c 8281      		ldd r24,Z+2
 514 005e 8823      		tst r24
 515 0060 01F0      		breq .L39
 202:quantum/quantum.c ****       }
 516               		.loc 1 202 0
 517 0062 8091 0000 		lds r24,debug_config
 518 0066 8160      		ori r24,lo8(1<<0)
 519 0068 8093 0000 		sts debug_config,r24
 520 006c 00C0      		rjmp .L39
 521               	.L46:
 278:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 522               		.loc 1 278 0
 523 006e F801      		movw r30,r16
 524 0070 8281      		ldd r24,Z+2
 525 0072 8823      		tst r24
 526 0074 01F0      		breq .L39
 279:quantum/quantum.c ****       }
 527               		.loc 1 279 0
 528 0076 80E0      		ldi r24,0
 529               	.L104:
 285:quantum/quantum.c ****       }
 530               		.loc 1 285 0
 531 0078 0E94 0000 		call set_output
 532               	.LVL54:
 533 007c 00C0      		rjmp .L39
 534               	.L48:
 307:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 535               		.loc 1 307 0
 536 007e F801      		movw r30,r16
 537 0080 8281      		ldd r24,Z+2
 538 0082 8823      		tst r24
 539 0084 01F4      		brne .+2
 540 0086 00C0      		rjmp .L49
 309:quantum/quantum.c ****             eeconfig_init();
 541               		.loc 1 309 0
 542 0088 0E94 0000 		call eeconfig_is_enabled
 543               	.LVL55:
 544 008c 8111      		cpse r24,__zero_reg__
 545 008e 00C0      		rjmp .L50
 310:quantum/quantum.c ****         }
 546               		.loc 1 310 0
 547 0090 0E94 0000 		call eeconfig_init
 548               	.LVL56:
 549               	.L50:
 313:quantum/quantum.c ****         switch (keycode)
 550               		.loc 1 313 0
 551 0094 0E94 0000 		call eeconfig_read_keymap
 552               	.LVL57:
 553 0098 90E0      		ldi r25,0
 554 009a 9093 0000 		sts keymap_config+1,r25
 555 009e 8093 0000 		sts keymap_config,r24
 314:quantum/quantum.c ****         {
 556               		.loc 1 314 0
 557 00a2 FE01      		movw r30,r28
 558 00a4 E350      		subi r30,3
 559 00a6 FC45      		sbci r31,92
 560 00a8 E231      		cpi r30,18
 561 00aa F105      		cpc r31,__zero_reg__
 562 00ac 00F4      		brsh .L51
 563 00ae E050      		subi r30,lo8(-(gs(.L53)))
 564 00b0 F040      		sbci r31,hi8(-(gs(.L53)))
 373:quantum/quantum.c ****             break;
 565               		.loc 1 373 0
 566 00b2 8091 0000 		lds r24,keymap_config
 314:quantum/quantum.c ****         {
 567               		.loc 1 314 0
 568 00b6 0C94 0000 		jmp __tablejump2__
 569               		.p2align	1
 570               	.L53:
 571 00ba 0000      		.word gs(.L52)
 572 00bc 0000      		.word gs(.L54)
 573 00be 0000      		.word gs(.L108)
 574 00c0 0000      		.word gs(.L56)
 575 00c2 0000      		.word gs(.L57)
 576 00c4 0000      		.word gs(.L58)
 577 00c6 0000      		.word gs(.L59)
 578 00c8 0000      		.word gs(.L60)
 579 00ca 0000      		.word gs(.L61)
 580 00cc 0000      		.word gs(.L62)
 581 00ce 0000      		.word gs(.L63)
 582 00d0 0000      		.word gs(.L107)
 583 00d2 0000      		.word gs(.L65)
 584 00d4 0000      		.word gs(.L66)
 585 00d6 0000      		.word gs(.L67)
 586 00d8 0000      		.word gs(.L68)
 587 00da 0000      		.word gs(.L69)
 588 00dc 0000      		.word gs(.L70)
 589               	.L51:
 317:quantum/quantum.c ****             break;
 590               		.loc 1 317 0
 591 00de 8091 0000 		lds r24,keymap_config
 592 00e2 8160      		ori r24,lo8(1<<0)
 593               	.L103:
 373:quantum/quantum.c ****             break;
 594               		.loc 1 373 0
 595 00e4 8093 0000 		sts keymap_config,r24
 378:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 596               		.loc 1 378 0
 597 00e8 8091 0000 		lds r24,keymap_config
 598 00ec 0E94 0000 		call eeconfig_update_keymap
 599               	.LVL58:
 379:quantum/quantum.c **** 
 600               		.loc 1 379 0
 601 00f0 0E94 0000 		call clear_keyboard
 602               	.LVL59:
 381:quantum/quantum.c ****       }
 603               		.loc 1 381 0
 604 00f4 00C0      		rjmp .L39
 605               	.L52:
 320:quantum/quantum.c ****             break;
 606               		.loc 1 320 0
 607 00f6 8260      		ori r24,lo8(1<<1)
 608 00f8 00C0      		rjmp .L103
 609               	.L54:
 323:quantum/quantum.c ****             break;
 610               		.loc 1 323 0
 611 00fa 8460      		ori r24,lo8(1<<2)
 612 00fc 00C0      		rjmp .L103
 613               	.L56:
 329:quantum/quantum.c ****             break;
 614               		.loc 1 329 0
 615 00fe 8061      		ori r24,lo8(1<<4)
 616 0100 00C0      		rjmp .L103
 617               	.L57:
 332:quantum/quantum.c ****             break;
 618               		.loc 1 332 0
 619 0102 8062      		ori r24,lo8(1<<5)
 620 0104 00C0      		rjmp .L103
 621               	.L58:
 335:quantum/quantum.c ****             break;
 622               		.loc 1 335 0
 623 0106 8064      		ori r24,lo8(1<<6)
 624 0108 00C0      		rjmp .L103
 625               	.L59:
 338:quantum/quantum.c ****             break;
 626               		.loc 1 338 0
 627 010a 8068      		ori r24,lo8(1<<7)
 628 010c 00C0      		rjmp .L103
 629               	.L60:
 342:quantum/quantum.c ****             break;
 630               		.loc 1 342 0
 631 010e 8460      		ori r24,lo8(4)
 632               	.L108:
 633 0110 8860      		ori r24,lo8(1<<3)
 634 0112 00C0      		rjmp .L103
 635               	.L61:
 345:quantum/quantum.c ****             break;
 636               		.loc 1 345 0
 637 0114 8E7F      		andi r24,lo8(~(1<<0))
 638 0116 00C0      		rjmp .L103
 639               	.L62:
 348:quantum/quantum.c ****             break;
 640               		.loc 1 348 0
 641 0118 8D7F      		andi r24,lo8(~(1<<1))
 642 011a 00C0      		rjmp .L103
 643               	.L63:
 351:quantum/quantum.c ****             break;
 644               		.loc 1 351 0
 645 011c 8B7F      		andi r24,lo8(~(1<<2))
 646 011e 00C0      		rjmp .L103
 647               	.L65:
 357:quantum/quantum.c ****             break;
 648               		.loc 1 357 0
 649 0120 8F7E      		andi r24,lo8(~(1<<4))
 650 0122 00C0      		rjmp .L103
 651               	.L66:
 360:quantum/quantum.c ****             break;
 652               		.loc 1 360 0
 653 0124 8F7D      		andi r24,lo8(~(1<<5))
 654 0126 00C0      		rjmp .L103
 655               	.L67:
 363:quantum/quantum.c ****             break;
 656               		.loc 1 363 0
 657 0128 8F7B      		andi r24,lo8(~(1<<6))
 658 012a 00C0      		rjmp .L103
 659               	.L68:
 366:quantum/quantum.c ****             break;
 660               		.loc 1 366 0
 661 012c 8F77      		andi r24,lo8(~(1<<7))
 662 012e 00C0      		rjmp .L103
 663               	.L69:
 370:quantum/quantum.c ****             break;
 664               		.loc 1 370 0
 665 0130 8B7F      		andi r24,lo8(-5)
 666               	.L107:
 667 0132 877F      		andi r24,lo8(~(1<<3))
 668 0134 00C0      		rjmp .L103
 669               	.L70:
 373:quantum/quantum.c ****             break;
 670               		.loc 1 373 0
 671 0136 87FB      		bst r24,7
 672 0138 9927      		clr r25
 673 013a 90F9      		bld r25,0
 674 013c 21E0      		ldi r18,lo8(1)
 675 013e 9227      		eor r25,r18
 676 0140 90FB      		bst r25,0
 677 0142 87F9      		bld r24,7
 678 0144 00C0      		rjmp .L103
 679               	.L73:
 397:quantum/quantum.c ****           register_code(LSPO_KEY);
 680               		.loc 1 397 0
 681 0146 8091 0000 		lds r24,shift_interrupted
 682 014a 8111      		cpse r24,__zero_reg__
 683 014c 00C0      		rjmp .L75
 397:quantum/quantum.c ****           register_code(LSPO_KEY);
 684               		.loc 1 397 0 is_stmt 0 discriminator 1
 685 014e 8091 0000 		lds r24,scs_timer
 686 0152 9091 0000 		lds r25,scs_timer+1
 687 0156 0E94 0000 		call timer_elapsed
 688               	.LVL60:
 689 015a 883C      		cpi r24,-56
 690 015c 9105      		cpc r25,__zero_reg__
 691 015e 00F4      		brsh .L75
 398:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 692               		.loc 1 398 0 is_stmt 1
 693 0160 86E2      		ldi r24,lo8(38)
 694 0162 0E94 0000 		call register_code
 695               	.LVL61:
 399:quantum/quantum.c ****         }
 696               		.loc 1 399 0
 697 0166 86E2      		ldi r24,lo8(38)
 698 0168 0E94 0000 		call unregister_code
 699               	.LVL62:
 700               	.L75:
 401:quantum/quantum.c ****       }
 701               		.loc 1 401 0
 702 016c 82E0      		ldi r24,lo8(2)
 703               	.L106:
 424:quantum/quantum.c ****       }
 704               		.loc 1 424 0
 705 016e 0E94 0000 		call unregister_mods
 706               	.LVL63:
 707 0172 00C0      		rjmp .L39
 708               	.L77:
 408:quantum/quantum.c ****         shift_interrupted[1] = false;
 709               		.loc 1 408 0
 710 0174 F801      		movw r30,r16
 711 0176 8281      		ldd r24,Z+2
 712 0178 8823      		tst r24
 713 017a 01F0      		breq .L78
 409:quantum/quantum.c ****         scs_timer = timer_read ();
 714               		.loc 1 409 0
 715 017c 1092 0000 		sts shift_interrupted+1,__zero_reg__
 410:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 716               		.loc 1 410 0
 717 0180 0E94 0000 		call timer_read
 718               	.LVL64:
 719 0184 9093 0000 		sts scs_timer+1,r25
 720 0188 8093 0000 		sts scs_timer,r24
 411:quantum/quantum.c ****       }
 721               		.loc 1 411 0
 722 018c 80E2      		ldi r24,lo8(32)
 723 018e 00C0      		rjmp .L105
 724               	.L78:
 420:quantum/quantum.c ****           register_code(RSPC_KEY);
 725               		.loc 1 420 0
 726 0190 8091 0000 		lds r24,shift_interrupted+1
 727 0194 8111      		cpse r24,__zero_reg__
 728 0196 00C0      		rjmp .L80
 420:quantum/quantum.c ****           register_code(RSPC_KEY);
 729               		.loc 1 420 0 is_stmt 0 discriminator 1
 730 0198 8091 0000 		lds r24,scs_timer
 731 019c 9091 0000 		lds r25,scs_timer+1
 732 01a0 0E94 0000 		call timer_elapsed
 733               	.LVL65:
 734 01a4 883C      		cpi r24,-56
 735 01a6 9105      		cpc r25,__zero_reg__
 736 01a8 00F4      		brsh .L80
 421:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 737               		.loc 1 421 0 is_stmt 1
 738 01aa 87E2      		ldi r24,lo8(39)
 739 01ac 0E94 0000 		call register_code
 740               	.LVL66:
 422:quantum/quantum.c ****         }
 741               		.loc 1 422 0
 742 01b0 87E2      		ldi r24,lo8(39)
 743 01b2 0E94 0000 		call unregister_code
 744               	.LVL67:
 745               	.L80:
 424:quantum/quantum.c ****       }
 746               		.loc 1 424 0
 747 01b6 80E2      		ldi r24,lo8(32)
 748 01b8 00C0      		rjmp .L106
 749               	.L43:
 192:quantum/quantum.c ****     case RESET:
 750               		.loc 1 192 0
 751 01ba C531      		cpi r28,21
 752 01bc FCE5      		ldi r31,92
 753 01be DF07      		cpc r29,r31
 754 01c0 00F4      		brsh .L83
 755 01c2 C230      		cpi r28,2
 756 01c4 8CE5      		ldi r24,92
 757 01c6 D807      		cpc r29,r24
 758 01c8 00F0      		brlo .+2
 759 01ca 00C0      		rjmp .L48
 760 01cc C115      		cp r28,__zero_reg__
 761 01ce ECE5      		ldi r30,92
 762 01d0 DE07      		cpc r29,r30
 763 01d2 01F4      		brne .+2
 764 01d4 00C0      		rjmp .L44
 765 01d6 C130      		cpi r28,1
 766 01d8 DC45      		sbci r29,92
 767 01da 01F4      		brne .+2
 768 01dc 00C0      		rjmp .L45
 769               	.L82:
 430:quantum/quantum.c ****       shift_interrupted[1] = true;
 770               		.loc 1 430 0
 771 01de 81E0      		ldi r24,lo8(1)
 772 01e0 8093 0000 		sts shift_interrupted,r24
 431:quantum/quantum.c ****       break;
 773               		.loc 1 431 0
 774 01e4 8093 0000 		sts shift_interrupted+1,r24
 775               	.L49:
 436:quantum/quantum.c **** }
 776               		.loc 1 436 0
 777 01e8 C801      		movw r24,r16
 778               	/* epilogue start */
 779               		.loc 1 437 0
 780 01ea DF91      		pop r29
 781 01ec CF91      		pop r28
 782               	.LVL68:
 783 01ee 1F91      		pop r17
 784 01f0 0F91      		pop r16
 785               	.LVL69:
 436:quantum/quantum.c **** }
 786               		.loc 1 436 0
 787 01f2 0C94 0000 		jmp process_action_kb
 788               	.LVL70:
 789               	.L83:
 192:quantum/quantum.c ****     case RESET:
 790               		.loc 1 192 0
 791 01f6 CD33      		cpi r28,61
 792 01f8 8CE5      		ldi r24,92
 793 01fa D807      		cpc r29,r24
 794 01fc 01F4      		brne .+2
 795 01fe 00C0      		rjmp .L77
 796 0200 00F4      		brsh .L84
 797 0202 CC33      		cpi r28,60
 798 0204 DC45      		sbci r29,92
 799 0206 01F4      		brne .L82
 385:quantum/quantum.c ****         shift_interrupted[0] = false;
 800               		.loc 1 385 0
 801 0208 F801      		movw r30,r16
 802 020a 8281      		ldd r24,Z+2
 803 020c 8823      		tst r24
 804 020e 01F4      		brne .+2
 805 0210 00C0      		rjmp .L73
 386:quantum/quantum.c ****         scs_timer = timer_read ();
 806               		.loc 1 386 0
 807 0212 1092 0000 		sts shift_interrupted,__zero_reg__
 387:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 808               		.loc 1 387 0
 809 0216 0E94 0000 		call timer_read
 810               	.LVL71:
 811 021a 9093 0000 		sts scs_timer+1,r25
 812 021e 8093 0000 		sts scs_timer,r24
 388:quantum/quantum.c ****       }
 813               		.loc 1 388 0
 814 0222 82E0      		ldi r24,lo8(2)
 815               	.L105:
 411:quantum/quantum.c ****       }
 816               		.loc 1 411 0
 817 0224 0E94 0000 		call register_mods
 818               	.LVL72:
 819 0228 00C0      		rjmp .L39
 820               	.L84:
 192:quantum/quantum.c ****     case RESET:
 821               		.loc 1 192 0
 822 022a C034      		cpi r28,64
 823 022c 8CE5      		ldi r24,92
 824 022e D807      		cpc r29,r24
 825 0230 01F4      		brne .+2
 826 0232 00C0      		rjmp .L46
 827 0234 C134      		cpi r28,65
 828 0236 DC45      		sbci r29,92
 829 0238 01F4      		brne .L82
 284:quantum/quantum.c ****         set_output(OUTPUT_USB);
 830               		.loc 1 284 0
 831 023a F801      		movw r30,r16
 832 023c 8281      		ldd r24,Z+2
 833 023e 8823      		tst r24
 834 0240 01F4      		brne .+2
 835 0242 00C0      		rjmp .L39
 285:quantum/quantum.c ****       }
 836               		.loc 1 285 0
 837 0244 82E0      		ldi r24,lo8(2)
 838 0246 00C0      		rjmp .L104
 839               		.cfi_endproc
 840               	.LFE118:
 842               		.section	.text.send_string,"ax",@progbits
 843               	.global	send_string
 845               	send_string:
 846               	.LFB119:
 438:quantum/quantum.c **** 
 439:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 440:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 441:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 442:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 443:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 444:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 445:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 446:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 447:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 448:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 449:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 450:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 451:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 452:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 453:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 454:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 455:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 456:quantum/quantum.c **** };
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 459:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 460:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 461:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 462:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 463:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 464:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 465:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 466:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 467:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 468:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 469:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 470:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 471:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 472:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 473:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 474:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 475:quantum/quantum.c **** };
 476:quantum/quantum.c **** 
 477:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 478:quantum/quantum.c **** #if 0
 479:quantum/quantum.c **** #include "keymap_colemak.h"
 480:quantum/quantum.c **** 
 481:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 482:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 483:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 484:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 485:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 486:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 487:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 488:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 489:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 490:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 491:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 492:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 493:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 494:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 495:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 496:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 497:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 498:quantum/quantum.c **** };
 499:quantum/quantum.c **** 
 500:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 501:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 502:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 503:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 504:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 505:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 506:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 507:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 508:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 509:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 510:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 511:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 512:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 513:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 514:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 515:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 516:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 517:quantum/quantum.c **** };
 518:quantum/quantum.c **** 
 519:quantum/quantum.c **** #endif
 520:quantum/quantum.c **** 
 521:quantum/quantum.c **** void send_string(const char *str) {
 847               		.loc 1 521 0
 848               		.cfi_startproc
 849               	.LVL73:
 850 0000 0F93      		push r16
 851               	.LCFI12:
 852               		.cfi_def_cfa_offset 3
 853               		.cfi_offset 16, -2
 854 0002 1F93      		push r17
 855               	.LCFI13:
 856               		.cfi_def_cfa_offset 4
 857               		.cfi_offset 17, -3
 858 0004 CF93      		push r28
 859               	.LCFI14:
 860               		.cfi_def_cfa_offset 5
 861               		.cfi_offset 28, -4
 862               	/* prologue: function */
 863               	/* frame size = 0 */
 864               	/* stack size = 3 */
 865               	.L__stack_usage = 3
 866 0006 8C01      		movw r16,r24
 867               	.LVL74:
 868               	.L113:
 869               	.LBB6:
 870               	.LBB7:
 522:quantum/quantum.c ****     while (1) {
 523:quantum/quantum.c ****         uint8_t keycode;
 524:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 871               		.loc 1 524 0
 872 0008 F801      		movw r30,r16
 873               	/* #APP */
 874               	 ;  524 "quantum/quantum.c" 1
 875 000a 2491      		lpm r18, Z
 876               		
 877               	 ;  0 "" 2
 878               	.LVL75:
 879               	/* #NOAPP */
 880               	.LBE7:
 525:quantum/quantum.c ****         if (!ascii_code) break;
 881               		.loc 1 525 0
 882 000c 2223      		tst r18
 883 000e 01F0      		breq .L109
 884 0010 30E0      		ldi r19,0
 885               	.LVL76:
 886               	.LBB8:
 526:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 887               		.loc 1 526 0
 888 0012 F901      		movw r30,r18
 889 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 890 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 891               	.LVL77:
 892               	/* #APP */
 893               	 ;  526 "quantum/quantum.c" 1
 894 0018 C491      		lpm r28, Z
 895               		
 896               	 ;  0 "" 2
 897               	.LVL78:
 898               	/* #NOAPP */
 899               	.LBE8:
 900               	.LBB9:
 527:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 901               		.loc 1 527 0
 902 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 903 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 904               	.LVL79:
 905 001e F901      		movw r30,r18
 906               	.LVL80:
 907               	/* #APP */
 908               	 ;  527 "quantum/quantum.c" 1
 909 0020 2491      		lpm r18, Z
 910               		
 911               	 ;  0 "" 2
 912               	.LVL81:
 913               	/* #NOAPP */
 914               	.LBE9:
 915 0022 2223      		tst r18
 916 0024 01F0      		breq .L111
 528:quantum/quantum.c ****             register_code(KC_LSFT);
 917               		.loc 1 528 0
 918 0026 81EE      		ldi r24,lo8(-31)
 919 0028 0E94 0000 		call register_code
 920               	.LVL82:
 529:quantum/quantum.c ****             register_code(keycode);
 921               		.loc 1 529 0
 922 002c 8C2F      		mov r24,r28
 923 002e 0E94 0000 		call register_code
 924               	.LVL83:
 530:quantum/quantum.c ****             unregister_code(keycode);
 925               		.loc 1 530 0
 926 0032 8C2F      		mov r24,r28
 927 0034 0E94 0000 		call unregister_code
 928               	.LVL84:
 531:quantum/quantum.c ****             unregister_code(KC_LSFT);
 929               		.loc 1 531 0
 930 0038 81EE      		ldi r24,lo8(-31)
 931               	.L114:
 532:quantum/quantum.c ****         }
 533:quantum/quantum.c ****         else {
 534:quantum/quantum.c ****             register_code(keycode);
 535:quantum/quantum.c ****             unregister_code(keycode);
 932               		.loc 1 535 0
 933 003a 0E94 0000 		call unregister_code
 934               	.LVL85:
 536:quantum/quantum.c ****         }
 537:quantum/quantum.c ****         ++str;
 935               		.loc 1 537 0
 936 003e 0F5F      		subi r16,-1
 937 0040 1F4F      		sbci r17,-1
 938               	.LVL86:
 939               	.LBE6:
 522:quantum/quantum.c ****         uint8_t keycode;
 940               		.loc 1 522 0
 941 0042 00C0      		rjmp .L113
 942               	.LVL87:
 943               	.L111:
 944               	.LBB10:
 534:quantum/quantum.c ****             unregister_code(keycode);
 945               		.loc 1 534 0
 946 0044 8C2F      		mov r24,r28
 947 0046 0E94 0000 		call register_code
 948               	.LVL88:
 535:quantum/quantum.c ****         }
 949               		.loc 1 535 0
 950 004a 8C2F      		mov r24,r28
 951 004c 00C0      		rjmp .L114
 952               	.LVL89:
 953               	.L109:
 954               	/* epilogue start */
 955               	.LBE10:
 538:quantum/quantum.c ****     }
 539:quantum/quantum.c **** }
 956               		.loc 1 539 0
 957 004e CF91      		pop r28
 958 0050 1F91      		pop r17
 959 0052 0F91      		pop r16
 960               	.LVL90:
 961 0054 0895      		ret
 962               		.cfi_endproc
 963               	.LFE119:
 965               		.section	.text.update_tri_layer,"ax",@progbits
 966               	.global	update_tri_layer
 968               	update_tri_layer:
 969               	.LFB120:
 540:quantum/quantum.c **** 
 541:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 970               		.loc 1 541 0
 971               		.cfi_startproc
 972               	.LVL91:
 973 0000 8F92      		push r8
 974               	.LCFI15:
 975               		.cfi_def_cfa_offset 3
 976               		.cfi_offset 8, -2
 977 0002 9F92      		push r9
 978               	.LCFI16:
 979               		.cfi_def_cfa_offset 4
 980               		.cfi_offset 9, -3
 981 0004 AF92      		push r10
 982               	.LCFI17:
 983               		.cfi_def_cfa_offset 5
 984               		.cfi_offset 10, -4
 985 0006 BF92      		push r11
 986               	.LCFI18:
 987               		.cfi_def_cfa_offset 6
 988               		.cfi_offset 11, -5
 989 0008 CF92      		push r12
 990               	.LCFI19:
 991               		.cfi_def_cfa_offset 7
 992               		.cfi_offset 12, -6
 993 000a DF92      		push r13
 994               	.LCFI20:
 995               		.cfi_def_cfa_offset 8
 996               		.cfi_offset 13, -7
 997 000c EF92      		push r14
 998               	.LCFI21:
 999               		.cfi_def_cfa_offset 9
 1000               		.cfi_offset 14, -8
 1001 000e FF92      		push r15
 1002               	.LCFI22:
 1003               		.cfi_def_cfa_offset 10
 1004               		.cfi_offset 15, -9
 1005 0010 0F93      		push r16
 1006               	.LCFI23:
 1007               		.cfi_def_cfa_offset 11
 1008               		.cfi_offset 16, -10
 1009 0012 1F93      		push r17
 1010               	.LCFI24:
 1011               		.cfi_def_cfa_offset 12
 1012               		.cfi_offset 17, -11
 1013               	/* prologue: function */
 1014               	/* frame size = 0 */
 1015               	/* stack size = 10 */
 1016               	.L__stack_usage = 10
 1017 0014 C12C      		mov r12,__zero_reg__
 1018 0016 D12C      		mov r13,__zero_reg__
 1019 0018 7601      		movw r14,r12
 1020 001a C394      		inc r12
 1021 001c 9701      		movw r18,r14
 1022 001e 8601      		movw r16,r12
 1023 0020 00C0      		rjmp 2f
 1024               		1:
 1025 0022 000F      		lsl r16
 1026 0024 111F      		rol r17
 1027 0026 221F      		rol r18
 1028 0028 331F      		rol r19
 1029               		2:
 1030 002a 6A95      		dec r22
 1031 002c 02F4      		brpl 1b
 1032 002e 4601      		movw r8,r12
 1033 0030 5701      		movw r10,r14
 1034 0032 00C0      		rjmp 2f
 1035               		1:
 1036 0034 880C      		lsl r8
 1037 0036 991C      		rol r9
 1038 0038 AA1C      		rol r10
 1039 003a BB1C      		rol r11
 1040               		2:
 1041 003c 8A95      		dec r24
 1042 003e 02F4      		brpl 1b
 1043 0040 D501      		movw r26,r10
 1044 0042 C401      		movw r24,r8
 1045               	.LVL92:
 1046 0044 802B      		or r24,r16
 1047 0046 912B      		or r25,r17
 1048 0048 A22B      		or r26,r18
 1049 004a B32B      		or r27,r19
 542:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1050               		.loc 1 542 0
 1051 004c 0091 0000 		lds r16,layer_state
 1052 0050 1091 0000 		lds r17,layer_state+1
 1053 0054 2091 0000 		lds r18,layer_state+2
 1054 0058 3091 0000 		lds r19,layer_state+3
 1055 005c 0823      		and r16,r24
 1056 005e 1923      		and r17,r25
 1057 0060 2A23      		and r18,r26
 1058 0062 3B23      		and r19,r27
 1059 0064 8017      		cp r24,r16
 1060 0066 9107      		cpc r25,r17
 1061 0068 A207      		cpc r26,r18
 1062 006a B307      		cpc r27,r19
 1063 006c 01F4      		brne .L116
 543:quantum/quantum.c ****     layer_on(layer3);
 1064               		.loc 1 543 0
 1065 006e 842F      		mov r24,r20
 1066               	/* epilogue start */
 544:quantum/quantum.c ****   } else {
 545:quantum/quantum.c ****     layer_off(layer3);
 546:quantum/quantum.c ****   }
 547:quantum/quantum.c **** }
 1067               		.loc 1 547 0
 1068 0070 1F91      		pop r17
 1069 0072 0F91      		pop r16
 1070 0074 FF90      		pop r15
 1071 0076 EF90      		pop r14
 1072 0078 DF90      		pop r13
 1073 007a CF90      		pop r12
 1074 007c BF90      		pop r11
 1075 007e AF90      		pop r10
 1076 0080 9F90      		pop r9
 1077 0082 8F90      		pop r8
 543:quantum/quantum.c ****     layer_on(layer3);
 1078               		.loc 1 543 0
 1079 0084 0C94 0000 		jmp layer_on
 1080               	.LVL93:
 1081               	.L116:
 545:quantum/quantum.c ****   }
 1082               		.loc 1 545 0
 1083 0088 842F      		mov r24,r20
 1084               	/* epilogue start */
 1085               		.loc 1 547 0
 1086 008a 1F91      		pop r17
 1087 008c 0F91      		pop r16
 1088 008e FF90      		pop r15
 1089 0090 EF90      		pop r14
 1090 0092 DF90      		pop r13
 1091 0094 CF90      		pop r12
 1092 0096 BF90      		pop r11
 1093 0098 AF90      		pop r10
 1094 009a 9F90      		pop r9
 1095 009c 8F90      		pop r8
 545:quantum/quantum.c ****   }
 1096               		.loc 1 545 0
 1097 009e 0C94 0000 		jmp layer_off
 1098               	.LVL94:
 1099               		.cfi_endproc
 1100               	.LFE120:
 1102               		.section	.text.tap_random_base64,"ax",@progbits
 1103               	.global	tap_random_base64
 1105               	tap_random_base64:
 1106               	.LFB121:
 548:quantum/quantum.c **** 
 549:quantum/quantum.c **** void tap_random_base64(void) {
 1107               		.loc 1 549 0
 1108               		.cfi_startproc
 1109 0000 CF93      		push r28
 1110               	.LCFI25:
 1111               		.cfi_def_cfa_offset 3
 1112               		.cfi_offset 28, -2
 1113 0002 DF93      		push r29
 1114               	.LCFI26:
 1115               		.cfi_def_cfa_offset 4
 1116               		.cfi_offset 29, -3
 1117               	/* prologue: function */
 1118               	/* frame size = 0 */
 1119               	/* stack size = 2 */
 1120               	.L__stack_usage = 2
 550:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 551:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1121               		.loc 1 551 0
 1122 0004 46B5      		in r20,0x26
 1123 0006 2091 8400 		lds r18,132
 1124 000a 3091 8500 		lds r19,132+1
 1125 000e C091 9400 		lds r28,148
 1126 0012 D091 9500 		lds r29,148+1
 1127 0016 8091 BE00 		lds r24,190
 1128 001a 9091 BF00 		lds r25,190+1
 1129 001e C20F      		add r28,r18
 1130 0020 C40F      		add r28,r20
 1131 0022 C80F      		add r28,r24
 1132 0024 CF73      		andi r28,lo8(63)
 1133               	.LVL95:
 552:quantum/quantum.c ****   #else
 553:quantum/quantum.c ****     uint8_t key = rand() % 64;
 554:quantum/quantum.c ****   #endif
 555:quantum/quantum.c ****   switch (key) {
 1134               		.loc 1 555 0
 1135 0026 CE33      		cpi r28,lo8(62)
 1136 0028 00F4      		brsh .L119
 1137 002a C533      		cpi r28,lo8(53)
 1138 002c 00F4      		brsh .L120
 1139 002e CA31      		cpi r28,lo8(26)
 1140 0030 00F0      		brlo .L118
 1141 0032 C433      		cpi r28,lo8(52)
 1142 0034 00F4      		brsh .L125
 556:quantum/quantum.c ****     case 0 ... 25:
 557:quantum/quantum.c ****       register_code(KC_LSFT);
 558:quantum/quantum.c ****       register_code(key + KC_A);
 559:quantum/quantum.c ****       unregister_code(key + KC_A);
 560:quantum/quantum.c ****       unregister_code(KC_LSFT);
 561:quantum/quantum.c ****       break;
 562:quantum/quantum.c ****     case 26 ... 51:
 563:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1143               		.loc 1 563 0
 1144 0036 C651      		subi r28,lo8(-(-22))
 1145               	.LVL96:
 1146               	.L128:
 564:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 565:quantum/quantum.c ****       break;
 566:quantum/quantum.c ****     case 52:
 567:quantum/quantum.c ****       register_code(KC_0);
 568:quantum/quantum.c ****       unregister_code(KC_0);
 569:quantum/quantum.c ****       break;
 570:quantum/quantum.c ****     case 53 ... 61:
 571:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1147               		.loc 1 571 0
 1148 0038 8C2F      		mov r24,r28
 1149 003a 0E94 0000 		call register_code
 1150               	.LVL97:
 572:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1151               		.loc 1 572 0
 1152 003e 8C2F      		mov r24,r28
 1153 0040 00C0      		rjmp .L126
 1154               	.LVL98:
 1155               	.L119:
 555:quantum/quantum.c ****     case 0 ... 25:
 1156               		.loc 1 555 0
 1157 0042 CE33      		cpi r28,lo8(62)
 1158 0044 01F0      		breq .L123
 1159 0046 CF33      		cpi r28,lo8(63)
 1160 0048 01F0      		breq .L124
 1161               	.L118:
 557:quantum/quantum.c ****       register_code(key + KC_A);
 1162               		.loc 1 557 0
 1163 004a 81EE      		ldi r24,lo8(-31)
 1164 004c 0E94 0000 		call register_code
 1165               	.LVL99:
 558:quantum/quantum.c ****       unregister_code(key + KC_A);
 1166               		.loc 1 558 0
 1167 0050 CC5F      		subi r28,lo8(-(4))
 1168               	.LVL100:
 1169 0052 8C2F      		mov r24,r28
 1170 0054 0E94 0000 		call register_code
 1171               	.LVL101:
 559:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1172               		.loc 1 559 0
 1173 0058 8C2F      		mov r24,r28
 1174               	.LVL102:
 1175               	.L127:
 573:quantum/quantum.c ****       break;
 574:quantum/quantum.c ****     case 62:
 575:quantum/quantum.c ****       register_code(KC_LSFT);
 576:quantum/quantum.c ****       register_code(KC_EQL);
 577:quantum/quantum.c ****       unregister_code(KC_EQL);
 1176               		.loc 1 577 0
 1177 005a 0E94 0000 		call unregister_code
 1178               	.LVL103:
 578:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1179               		.loc 1 578 0
 1180 005e 81EE      		ldi r24,lo8(-31)
 1181 0060 00C0      		rjmp .L126
 1182               	.LVL104:
 1183               	.L125:
 567:quantum/quantum.c ****       unregister_code(KC_0);
 1184               		.loc 1 567 0
 1185 0062 87E2      		ldi r24,lo8(39)
 1186 0064 0E94 0000 		call register_code
 1187               	.LVL105:
 568:quantum/quantum.c ****       break;
 1188               		.loc 1 568 0
 1189 0068 87E2      		ldi r24,lo8(39)
 1190               	.LVL106:
 1191               	.L126:
 1192               	/* epilogue start */
 579:quantum/quantum.c ****       break;
 580:quantum/quantum.c ****     case 63:
 581:quantum/quantum.c ****       register_code(KC_SLSH);
 582:quantum/quantum.c ****       unregister_code(KC_SLSH);
 583:quantum/quantum.c ****       break;
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** }
 1193               		.loc 1 585 0
 1194 006a DF91      		pop r29
 1195 006c CF91      		pop r28
 582:quantum/quantum.c ****       break;
 1196               		.loc 1 582 0
 1197 006e 0C94 0000 		jmp unregister_code
 1198               	.LVL107:
 1199               	.L120:
 571:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1200               		.loc 1 571 0
 1201 0072 C751      		subi r28,lo8(-(-23))
 1202               	.LVL108:
 1203 0074 00C0      		rjmp .L128
 1204               	.LVL109:
 1205               	.L123:
 575:quantum/quantum.c ****       register_code(KC_EQL);
 1206               		.loc 1 575 0
 1207 0076 81EE      		ldi r24,lo8(-31)
 1208 0078 0E94 0000 		call register_code
 1209               	.LVL110:
 576:quantum/quantum.c ****       unregister_code(KC_EQL);
 1210               		.loc 1 576 0
 1211 007c 8EE2      		ldi r24,lo8(46)
 1212 007e 0E94 0000 		call register_code
 1213               	.LVL111:
 577:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1214               		.loc 1 577 0
 1215 0082 8EE2      		ldi r24,lo8(46)
 1216 0084 00C0      		rjmp .L127
 1217               	.L124:
 581:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1218               		.loc 1 581 0
 1219 0086 88E3      		ldi r24,lo8(56)
 1220 0088 0E94 0000 		call register_code
 1221               	.LVL112:
 582:quantum/quantum.c ****       break;
 1222               		.loc 1 582 0
 1223 008c 88E3      		ldi r24,lo8(56)
 1224 008e 00C0      		rjmp .L126
 1225               		.cfi_endproc
 1226               	.LFE121:
 1228               		.section	.text.matrix_init_quantum,"ax",@progbits
 1229               	.global	matrix_init_quantum
 1231               	matrix_init_quantum:
 1232               	.LFB122:
 586:quantum/quantum.c **** 
 587:quantum/quantum.c **** void matrix_init_quantum() {
 1233               		.loc 1 587 0
 1234               		.cfi_startproc
 1235               	/* prologue: function */
 1236               	/* frame size = 0 */
 1237               	/* stack size = 0 */
 1238               	.L__stack_usage = 0
 588:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 589:quantum/quantum.c ****     backlight_init_ports();
 590:quantum/quantum.c ****   #endif
 591:quantum/quantum.c ****   matrix_init_kb();
 1239               		.loc 1 591 0
 1240 0000 0C94 0000 		jmp matrix_init_kb
 1241               	.LVL113:
 1242               		.cfi_endproc
 1243               	.LFE122:
 1245               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1246               	.global	matrix_scan_quantum
 1248               	matrix_scan_quantum:
 1249               	.LFB123:
 592:quantum/quantum.c **** }
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** void matrix_scan_quantum() {
 1250               		.loc 1 594 0
 1251               		.cfi_startproc
 1252               	/* prologue: function */
 1253               	/* frame size = 0 */
 1254               	/* stack size = 0 */
 1255               	.L__stack_usage = 0
 595:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 596:quantum/quantum.c ****     matrix_scan_music();
 597:quantum/quantum.c ****   #endif
 598:quantum/quantum.c **** 
 599:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 600:quantum/quantum.c ****     matrix_scan_tap_dance();
 601:quantum/quantum.c ****   #endif
 602:quantum/quantum.c **** 
 603:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 604:quantum/quantum.c ****     matrix_scan_combo();
 605:quantum/quantum.c ****   #endif
 606:quantum/quantum.c **** 
 607:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 608:quantum/quantum.c ****     backlight_task();
 609:quantum/quantum.c ****   #endif
 610:quantum/quantum.c **** 
 611:quantum/quantum.c ****   matrix_scan_kb();
 1256               		.loc 1 611 0
 1257 0000 0C94 0000 		jmp matrix_scan_kb
 1258               	.LVL114:
 1259               		.cfi_endproc
 1260               	.LFE123:
 1262               		.section	.text.backlight_init_ports,"ax",@progbits
 1263               		.weak	backlight_init_ports
 1265               	backlight_init_ports:
 1266               	.LFB143:
 1267               		.cfi_startproc
 1268               	/* prologue: function */
 1269               	/* frame size = 0 */
 1270               	/* stack size = 0 */
 1271               	.L__stack_usage = 0
 1272 0000 0895      		ret
 1273               		.cfi_endproc
 1274               	.LFE143:
 1276               		.section	.text.send_nibble,"ax",@progbits
 1277               	.global	send_nibble
 1279               	send_nibble:
 1280               	.LFB129:
 612:quantum/quantum.c **** }
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 615:quantum/quantum.c **** 
 616:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 617:quantum/quantum.c **** 
 618:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 619:quantum/quantum.c **** #  define COM1x1 COM1C1
 620:quantum/quantum.c **** #  define OCR1x  OCR1C
 621:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 622:quantum/quantum.c **** #  define COM1x1 COM1B1
 623:quantum/quantum.c **** #  define OCR1x  OCR1B
 624:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 625:quantum/quantum.c **** #  define COM1x1 COM1A1
 626:quantum/quantum.c **** #  define OCR1x  OCR1A
 627:quantum/quantum.c **** #else
 628:quantum/quantum.c **** #  define NO_BACKLIGHT_CLOCK
 629:quantum/quantum.c **** #endif
 630:quantum/quantum.c **** 
 631:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 632:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 633:quantum/quantum.c **** #endif
 634:quantum/quantum.c **** 
 635:quantum/quantum.c **** __attribute__ ((weak))
 636:quantum/quantum.c **** void backlight_init_ports(void)
 637:quantum/quantum.c **** {
 638:quantum/quantum.c **** 
 639:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 640:quantum/quantum.c ****   // DDRx |= n
 641:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 642:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 643:quantum/quantum.c ****     // PORTx &= ~n
 644:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 645:quantum/quantum.c ****   #else
 646:quantum/quantum.c ****     // PORTx |= n
 647:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 648:quantum/quantum.c ****   #endif
 649:quantum/quantum.c **** 
 650:quantum/quantum.c ****   #ifndef NO_BACKLIGHT_CLOCK
 651:quantum/quantum.c ****     // Use full 16-bit resolution.
 652:quantum/quantum.c ****     ICR1 = 0xFFFF;
 653:quantum/quantum.c **** 
 654:quantum/quantum.c ****     // I could write a wall of text here to explain... but TL;DW
 655:quantum/quantum.c ****     // Go read the ATmega32u4 datasheet.
 656:quantum/quantum.c ****     // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolut
 657:quantum/quantum.c **** 
 658:quantum/quantum.c ****     // Pin PB7 = OCR1C (Timer 1, Channel C)
 659:quantum/quantum.c ****     // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 660:quantum/quantum.c ****     // (i.e. start high, go low when counter matches.)
 661:quantum/quantum.c ****     // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 662:quantum/quantum.c ****     // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 665:quantum/quantum.c ****     TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 666:quantum/quantum.c ****   #endif
 667:quantum/quantum.c **** 
 668:quantum/quantum.c ****   backlight_init();
 669:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 670:quantum/quantum.c ****     breathing_defaults();
 671:quantum/quantum.c ****   #endif
 672:quantum/quantum.c **** }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** void backlight_set(uint8_t level)
 676:quantum/quantum.c **** {
 677:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 678:quantum/quantum.c ****   // #if BACKLIGHT_ON_STATE == 0
 679:quantum/quantum.c ****   //   // PORTx &= ~n
 680:quantum/quantum.c ****   //   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 681:quantum/quantum.c ****   // #else
 682:quantum/quantum.c ****   //   // PORTx |= n
 683:quantum/quantum.c ****   //   _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 684:quantum/quantum.c ****   // #endif
 685:quantum/quantum.c **** 
 686:quantum/quantum.c ****   if ( level == 0 ) {
 687:quantum/quantum.c ****     #ifndef NO_BACKLIGHT_CLOCK
 688:quantum/quantum.c ****       // Turn off PWM control on backlight pin, revert to output low.
 689:quantum/quantum.c ****       TCCR1A &= ~(_BV(COM1x1));
 690:quantum/quantum.c ****       OCR1x = 0x0;
 691:quantum/quantum.c ****     #else
 692:quantum/quantum.c ****       // #if BACKLIGHT_ON_STATE == 0
 693:quantum/quantum.c ****       //   // PORTx |= n
 694:quantum/quantum.c ****       //   _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 695:quantum/quantum.c ****       // #else
 696:quantum/quantum.c ****       //   // PORTx &= ~n
 697:quantum/quantum.c ****       //   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 698:quantum/quantum.c ****       // #endif
 699:quantum/quantum.c ****     #endif
 700:quantum/quantum.c ****   } 
 701:quantum/quantum.c ****   #ifndef NO_BACKLIGHT_CLOCK
 702:quantum/quantum.c ****     else if ( level == BACKLIGHT_LEVELS ) {
 703:quantum/quantum.c ****       // Turn on PWM control of backlight pin
 704:quantum/quantum.c ****       TCCR1A |= _BV(COM1x1);
 705:quantum/quantum.c ****       // Set the brightness
 706:quantum/quantum.c ****       OCR1x = 0xFFFF;
 707:quantum/quantum.c ****     } 
 708:quantum/quantum.c ****     else {
 709:quantum/quantum.c ****       // Turn on PWM control of backlight pin
 710:quantum/quantum.c ****       TCCR1A |= _BV(COM1x1);
 711:quantum/quantum.c ****       // Set the brightness
 712:quantum/quantum.c ****       OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 713:quantum/quantum.c ****     }
 714:quantum/quantum.c ****   #endif
 715:quantum/quantum.c **** 
 716:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 717:quantum/quantum.c ****     breathing_intensity_default();
 718:quantum/quantum.c ****   #endif
 719:quantum/quantum.c **** }
 720:quantum/quantum.c **** 
 721:quantum/quantum.c **** uint8_t backlight_tick = 0;
 722:quantum/quantum.c **** 
 723:quantum/quantum.c **** void backlight_task(void) {
 724:quantum/quantum.c ****   #ifdef NO_BACKLIGHT_CLOCK
 725:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - backlight_config.level) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1
 726:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 727:quantum/quantum.c ****       // PORTx &= ~n
 728:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 729:quantum/quantum.c ****     #else
 730:quantum/quantum.c ****       // PORTx |= n
 731:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 732:quantum/quantum.c ****     #endif
 733:quantum/quantum.c ****   } else {
 734:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 735:quantum/quantum.c ****       // PORTx |= n
 736:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 737:quantum/quantum.c ****     #else
 738:quantum/quantum.c ****       // PORTx &= ~n
 739:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 740:quantum/quantum.c ****     #endif
 741:quantum/quantum.c ****   }
 742:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 743:quantum/quantum.c ****   #endif
 744:quantum/quantum.c **** }
 745:quantum/quantum.c **** 
 746:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 749:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 750:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 751:quantum/quantum.c **** 
 752:quantum/quantum.c **** static uint8_t breath_intensity;
 753:quantum/quantum.c **** static uint8_t breath_speed;
 754:quantum/quantum.c **** static uint16_t breathing_index;
 755:quantum/quantum.c **** static uint8_t breathing_halt;
 756:quantum/quantum.c **** 
 757:quantum/quantum.c **** void breathing_enable(void)
 758:quantum/quantum.c **** {
 759:quantum/quantum.c ****     if (get_backlight_level() == 0)
 760:quantum/quantum.c ****     {
 761:quantum/quantum.c ****         breathing_index = 0;
 762:quantum/quantum.c ****     }
 763:quantum/quantum.c ****     else
 764:quantum/quantum.c ****     {
 765:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 766:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 767:quantum/quantum.c ****     }
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 770:quantum/quantum.c **** 
 771:quantum/quantum.c ****     // Enable breathing interrupt
 772:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 773:quantum/quantum.c **** }
 774:quantum/quantum.c **** 
 775:quantum/quantum.c **** void breathing_pulse(void)
 776:quantum/quantum.c **** {
 777:quantum/quantum.c ****     if (get_backlight_level() == 0)
 778:quantum/quantum.c ****     {
 779:quantum/quantum.c ****         breathing_index = 0;
 780:quantum/quantum.c ****     }
 781:quantum/quantum.c ****     else
 782:quantum/quantum.c ****     {
 783:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 784:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 785:quantum/quantum.c ****     }
 786:quantum/quantum.c **** 
 787:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     // Enable breathing interrupt
 790:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** void breathing_disable(void)
 794:quantum/quantum.c **** {
 795:quantum/quantum.c ****     // Disable breathing interrupt
 796:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 797:quantum/quantum.c ****     backlight_set(get_backlight_level());
 798:quantum/quantum.c **** }
 799:quantum/quantum.c **** 
 800:quantum/quantum.c **** void breathing_self_disable(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c ****     if (get_backlight_level() == 0)
 803:quantum/quantum.c ****     {
 804:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 805:quantum/quantum.c ****     }
 806:quantum/quantum.c ****     else
 807:quantum/quantum.c ****     {
 808:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 809:quantum/quantum.c ****     }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 812:quantum/quantum.c **** }
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** void breathing_toggle(void)
 815:quantum/quantum.c **** {
 816:quantum/quantum.c ****     if (!is_breathing())
 817:quantum/quantum.c ****     {
 818:quantum/quantum.c ****         if (get_backlight_level() == 0)
 819:quantum/quantum.c ****         {
 820:quantum/quantum.c ****             breathing_index = 0;
 821:quantum/quantum.c ****         }
 822:quantum/quantum.c ****         else
 823:quantum/quantum.c ****         {
 824:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 825:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 826:quantum/quantum.c ****         }
 827:quantum/quantum.c **** 
 828:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 829:quantum/quantum.c ****     }
 830:quantum/quantum.c **** 
 831:quantum/quantum.c ****     // Toggle breathing interrupt
 832:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 833:quantum/quantum.c **** 
 834:quantum/quantum.c ****     // Restore backlight level
 835:quantum/quantum.c ****     if (!is_breathing())
 836:quantum/quantum.c ****     {
 837:quantum/quantum.c ****         backlight_set(get_backlight_level());
 838:quantum/quantum.c ****     }
 839:quantum/quantum.c **** }
 840:quantum/quantum.c **** 
 841:quantum/quantum.c **** bool is_breathing(void)
 842:quantum/quantum.c **** {
 843:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 844:quantum/quantum.c **** }
 845:quantum/quantum.c **** 
 846:quantum/quantum.c **** void breathing_intensity_default(void)
 847:quantum/quantum.c **** {
 848:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 849:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 850:quantum/quantum.c **** }
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 853:quantum/quantum.c **** {
 854:quantum/quantum.c ****     breath_intensity = value;
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** void breathing_speed_default(void)
 858:quantum/quantum.c **** {
 859:quantum/quantum.c ****     breath_speed = 4;
 860:quantum/quantum.c **** }
 861:quantum/quantum.c **** 
 862:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 863:quantum/quantum.c **** {
 864:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 865:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 866:quantum/quantum.c **** 
 867:quantum/quantum.c ****     if (is_breathing_now)
 868:quantum/quantum.c ****     {
 869:quantum/quantum.c ****         // Disable breathing interrupt
 870:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 871:quantum/quantum.c ****     }
 872:quantum/quantum.c **** 
 873:quantum/quantum.c ****     breath_speed = value;
 874:quantum/quantum.c **** 
 875:quantum/quantum.c ****     if (is_breathing_now)
 876:quantum/quantum.c ****     {
 877:quantum/quantum.c ****         // Adjust index to account for new speed
 878:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****         // Enable breathing interrupt
 881:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 882:quantum/quantum.c ****     }
 883:quantum/quantum.c **** 
 884:quantum/quantum.c **** }
 885:quantum/quantum.c **** 
 886:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 887:quantum/quantum.c **** {
 888:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 889:quantum/quantum.c ****     {
 890:quantum/quantum.c ****         breathing_speed_set(0);
 891:quantum/quantum.c ****     }
 892:quantum/quantum.c ****     else
 893:quantum/quantum.c ****     {
 894:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 895:quantum/quantum.c ****     }
 896:quantum/quantum.c **** }
 897:quantum/quantum.c **** 
 898:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 899:quantum/quantum.c **** {
 900:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 901:quantum/quantum.c ****     {
 902:quantum/quantum.c ****         breathing_speed_set(10);
 903:quantum/quantum.c ****     }
 904:quantum/quantum.c ****     else
 905:quantum/quantum.c ****     {
 906:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 907:quantum/quantum.c ****     }
 908:quantum/quantum.c **** }
 909:quantum/quantum.c **** 
 910:quantum/quantum.c **** void breathing_defaults(void)
 911:quantum/quantum.c **** {
 912:quantum/quantum.c ****     breathing_intensity_default();
 913:quantum/quantum.c ****     breathing_speed_default();
 914:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 915:quantum/quantum.c **** }
 916:quantum/quantum.c **** 
 917:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 918:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 919:quantum/quantum.c ****  *
 920:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 921:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 922:quantum/quantum.c ****  */
 923:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 924:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 925:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 926:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 927:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 928:quantum/quantum.c **** };
 929:quantum/quantum.c **** 
 930:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 931:quantum/quantum.c **** {
 932:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** 
 935:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 936:quantum/quantum.c **** 
 937:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 938:quantum/quantum.c ****     {
 939:quantum/quantum.c ****         // Disable breathing interrupt
 940:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 941:quantum/quantum.c ****     }
 942:quantum/quantum.c **** 
 943:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 944:quantum/quantum.c **** 
 945:quantum/quantum.c **** }
 946:quantum/quantum.c **** 
 947:quantum/quantum.c **** 
 948:quantum/quantum.c **** 
 949:quantum/quantum.c **** #endif // breathing
 950:quantum/quantum.c **** 
 951:quantum/quantum.c **** #else // backlight
 952:quantum/quantum.c **** 
 953:quantum/quantum.c **** __attribute__ ((weak))
 954:quantum/quantum.c **** void backlight_init_ports(void)
 955:quantum/quantum.c **** {
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** }
 958:quantum/quantum.c **** 
 959:quantum/quantum.c **** __attribute__ ((weak))
 960:quantum/quantum.c **** void backlight_set(uint8_t level)
 961:quantum/quantum.c **** {
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** }
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #endif // backlight
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** 
 968:quantum/quantum.c **** // Functions for spitting out values
 969:quantum/quantum.c **** //
 970:quantum/quantum.c **** 
 971:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 972:quantum/quantum.c ****     uint16_t word = (number >> 16);
 973:quantum/quantum.c ****     send_word(word);
 974:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 975:quantum/quantum.c **** }
 976:quantum/quantum.c **** 
 977:quantum/quantum.c **** void send_word(uint16_t number) {
 978:quantum/quantum.c ****     uint8_t byte = number >> 8;
 979:quantum/quantum.c ****     send_byte(byte);
 980:quantum/quantum.c ****     send_byte(number & 0xFF);
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** void send_byte(uint8_t number) {
 984:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 985:quantum/quantum.c ****     send_nibble(nibble);
 986:quantum/quantum.c ****     send_nibble(number & 0xF);
 987:quantum/quantum.c **** }
 988:quantum/quantum.c **** 
 989:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1281               		.loc 1 989 0
 1282               		.cfi_startproc
 1283               	.LVL115:
 1284               		.loc 1 989 0
 1285 0000 CF93      		push r28
 1286               	.LCFI27:
 1287               		.cfi_def_cfa_offset 3
 1288               		.cfi_offset 28, -2
 1289               	/* prologue: function */
 1290               	/* frame size = 0 */
 1291               	/* stack size = 1 */
 1292               	.L__stack_usage = 1
 990:quantum/quantum.c ****     switch (number) {
 1293               		.loc 1 990 0
 1294 0002 8A30      		cpi r24,lo8(10)
 1295 0004 00F4      		brsh .L134
 1296 0006 8130      		cpi r24,lo8(1)
 1297 0008 00F0      		brlo .L138
 991:quantum/quantum.c ****         case 0:
 992:quantum/quantum.c ****             register_code(KC_0);
 993:quantum/quantum.c ****             unregister_code(KC_0);
 994:quantum/quantum.c ****             break;
 995:quantum/quantum.c ****         case 1 ... 9:
 996:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1298               		.loc 1 996 0
 1299 000a CDE1      		ldi r28,lo8(29)
 1300               	.L141:
 997:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 998:quantum/quantum.c ****             break;
 999:quantum/quantum.c ****         case 0xA ... 0xF:
1000:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1301               		.loc 1 1000 0
 1302 000c C80F      		add r28,r24
 1303 000e 8C2F      		mov r24,r28
 1304               	.LVL116:
 1305 0010 0E94 0000 		call register_code
 1306               	.LVL117:
1001:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1307               		.loc 1 1001 0
 1308 0014 8C2F      		mov r24,r28
 1309 0016 00C0      		rjmp .L140
 1310               	.LVL118:
 1311               	.L134:
 990:quantum/quantum.c ****         case 0:
 1312               		.loc 1 990 0
 1313 0018 8031      		cpi r24,lo8(16)
 1314 001a 00F0      		brlo .L139
 1315               	/* epilogue start */
1002:quantum/quantum.c ****             break;
1003:quantum/quantum.c ****     }
1004:quantum/quantum.c **** }
 1316               		.loc 1 1004 0
 1317 001c CF91      		pop r28
 1318 001e 0895      		ret
 1319               	.L138:
 992:quantum/quantum.c ****             unregister_code(KC_0);
 1320               		.loc 1 992 0
 1321 0020 87E2      		ldi r24,lo8(39)
 1322               	.LVL119:
 1323 0022 0E94 0000 		call register_code
 1324               	.LVL120:
 993:quantum/quantum.c ****             break;
 1325               		.loc 1 993 0
 1326 0026 87E2      		ldi r24,lo8(39)
 1327               	.L140:
 1328               	/* epilogue start */
 1329               		.loc 1 1004 0
 1330 0028 CF91      		pop r28
1001:quantum/quantum.c ****             break;
 1331               		.loc 1 1001 0
 1332 002a 0C94 0000 		jmp unregister_code
 1333               	.LVL121:
 1334               	.L139:
1000:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1335               		.loc 1 1000 0
 1336 002e CAEF      		ldi r28,lo8(-6)
 1337 0030 00C0      		rjmp .L141
 1338               		.cfi_endproc
 1339               	.LFE129:
 1341               		.section	.text.send_byte,"ax",@progbits
 1342               	.global	send_byte
 1344               	send_byte:
 1345               	.LFB128:
 983:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1346               		.loc 1 983 0
 1347               		.cfi_startproc
 1348               	.LVL122:
 1349 0000 CF93      		push r28
 1350               	.LCFI28:
 1351               		.cfi_def_cfa_offset 3
 1352               		.cfi_offset 28, -2
 1353               	/* prologue: function */
 1354               	/* frame size = 0 */
 1355               	/* stack size = 1 */
 1356               	.L__stack_usage = 1
 1357 0002 C82F      		mov r28,r24
 1358               	.LVL123:
 985:quantum/quantum.c ****     send_nibble(number & 0xF);
 1359               		.loc 1 985 0
 1360 0004 8295      		swap r24
 1361               	.LVL124:
 1362 0006 8F70      		andi r24,lo8(15)
 1363 0008 0E94 0000 		call send_nibble
 1364               	.LVL125:
 986:quantum/quantum.c **** }
 1365               		.loc 1 986 0
 1366 000c 8C2F      		mov r24,r28
 1367 000e 8F70      		andi r24,lo8(15)
 1368               	/* epilogue start */
 987:quantum/quantum.c **** 
 1369               		.loc 1 987 0
 1370 0010 CF91      		pop r28
 1371               	.LVL126:
 986:quantum/quantum.c **** }
 1372               		.loc 1 986 0
 1373 0012 0C94 0000 		jmp send_nibble
 1374               	.LVL127:
 1375               		.cfi_endproc
 1376               	.LFE128:
 1378               		.section	.text.send_word,"ax",@progbits
 1379               	.global	send_word
 1381               	send_word:
 1382               	.LFB127:
 977:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1383               		.loc 1 977 0
 1384               		.cfi_startproc
 1385               	.LVL128:
 1386 0000 CF93      		push r28
 1387               	.LCFI29:
 1388               		.cfi_def_cfa_offset 3
 1389               		.cfi_offset 28, -2
 1390               	/* prologue: function */
 1391               	/* frame size = 0 */
 1392               	/* stack size = 1 */
 1393               	.L__stack_usage = 1
 1394 0002 C82F      		mov r28,r24
 1395               	.LVL129:
 979:quantum/quantum.c ****     send_byte(number & 0xFF);
 1396               		.loc 1 979 0
 1397 0004 892F      		mov r24,r25
 1398               	.LVL130:
 1399 0006 0E94 0000 		call send_byte
 1400               	.LVL131:
 980:quantum/quantum.c **** }
 1401               		.loc 1 980 0
 1402 000a 8C2F      		mov r24,r28
 1403               	/* epilogue start */
 981:quantum/quantum.c **** 
 1404               		.loc 1 981 0
 1405 000c CF91      		pop r28
 980:quantum/quantum.c **** }
 1406               		.loc 1 980 0
 1407 000e 0C94 0000 		jmp send_byte
 1408               	.LVL132:
 1409               		.cfi_endproc
 1410               	.LFE127:
 1412               		.section	.text.send_dword,"ax",@progbits
 1413               	.global	send_dword
 1415               	send_dword:
 1416               	.LFB126:
 971:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1417               		.loc 1 971 0
 1418               		.cfi_startproc
 1419               	.LVL133:
 1420 0000 CF92      		push r12
 1421               	.LCFI30:
 1422               		.cfi_def_cfa_offset 3
 1423               		.cfi_offset 12, -2
 1424 0002 DF92      		push r13
 1425               	.LCFI31:
 1426               		.cfi_def_cfa_offset 4
 1427               		.cfi_offset 13, -3
 1428 0004 EF92      		push r14
 1429               	.LCFI32:
 1430               		.cfi_def_cfa_offset 5
 1431               		.cfi_offset 14, -4
 1432 0006 FF92      		push r15
 1433               	.LCFI33:
 1434               		.cfi_def_cfa_offset 6
 1435               		.cfi_offset 15, -5
 1436               	/* prologue: function */
 1437               	/* frame size = 0 */
 1438               	/* stack size = 4 */
 1439               	.L__stack_usage = 4
 1440 0008 6B01      		movw r12,r22
 1441 000a 7C01      		movw r14,r24
 1442               	.LVL134:
 973:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1443               		.loc 1 973 0
 1444 000c C701      		movw r24,r14
 1445 000e 0E94 0000 		call send_word
 1446               	.LVL135:
 974:quantum/quantum.c **** }
 1447               		.loc 1 974 0
 1448 0012 C601      		movw r24,r12
 1449               	/* epilogue start */
 975:quantum/quantum.c **** 
 1450               		.loc 1 975 0
 1451 0014 FF90      		pop r15
 1452 0016 EF90      		pop r14
 1453 0018 DF90      		pop r13
 1454 001a CF90      		pop r12
 1455               	.LVL136:
 974:quantum/quantum.c **** }
 1456               		.loc 1 974 0
 1457 001c 0C94 0000 		jmp send_word
 1458               	.LVL137:
 1459               		.cfi_endproc
 1460               	.LFE126:
 1462               		.section	.text.hex_to_keycode,"ax",@progbits
 1463               		.weak	hex_to_keycode
 1465               	hex_to_keycode:
 1466               	.LFB130:
1005:quantum/quantum.c **** 
1006:quantum/quantum.c **** 
1007:quantum/quantum.c **** __attribute__((weak))
1008:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1009:quantum/quantum.c **** {
 1467               		.loc 1 1009 0
 1468               		.cfi_startproc
 1469               	.LVL138:
 1470               	/* prologue: function */
 1471               	/* frame size = 0 */
 1472               	/* stack size = 0 */
 1473               	.L__stack_usage = 0
1010:quantum/quantum.c ****   if (hex == 0x0) {
 1474               		.loc 1 1010 0
 1475 0000 8823      		tst r24
 1476 0002 01F0      		breq .L148
 1477 0004 90E0      		ldi r25,0
1011:quantum/quantum.c ****     return KC_0;
1012:quantum/quantum.c ****   } else if (hex < 0xA) {
 1478               		.loc 1 1012 0
 1479 0006 8A30      		cpi r24,lo8(10)
 1480 0008 00F4      		brsh .L147
1013:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 1481               		.loc 1 1013 0
 1482 000a 4D96      		adiw r24,29
 1483               	.LVL139:
 1484 000c 0895      		ret
 1485               	.LVL140:
 1486               	.L147:
1014:quantum/quantum.c ****   } else {
1015:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 1487               		.loc 1 1015 0
 1488 000e 0697      		sbiw r24,6
 1489               	.LVL141:
 1490 0010 0895      		ret
 1491               	.LVL142:
 1492               	.L148:
1011:quantum/quantum.c ****   } else if (hex < 0xA) {
 1493               		.loc 1 1011 0
 1494 0012 87E2      		ldi r24,lo8(39)
 1495 0014 90E0      		ldi r25,0
 1496               	.LVL143:
1016:quantum/quantum.c ****   }
1017:quantum/quantum.c **** }
 1497               		.loc 1 1017 0
 1498 0016 0895      		ret
 1499               		.cfi_endproc
 1500               	.LFE130:
 1502               		.section	.text.api_send_unicode,"ax",@progbits
 1503               	.global	api_send_unicode
 1505               	api_send_unicode:
 1506               	.LFB131:
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1507               		.loc 1 1019 0
 1508               		.cfi_startproc
 1509               	.LVL144:
 1510               	/* prologue: function */
 1511               	/* frame size = 0 */
 1512               	/* stack size = 0 */
 1513               	.L__stack_usage = 0
 1514 0000 0895      		ret
 1515               		.cfi_endproc
 1516               	.LFE131:
 1518               		.section	.text.led_set_user,"ax",@progbits
 1519               		.weak	led_set_user
 1521               	led_set_user:
 1522               	.LFB132:
1020:quantum/quantum.c **** #ifdef API_ENABLE
1021:quantum/quantum.c ****     uint8_t chunk[4];
1022:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1023:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1024:quantum/quantum.c **** #endif
1025:quantum/quantum.c **** }
1026:quantum/quantum.c **** 
1027:quantum/quantum.c **** __attribute__ ((weak))
1028:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1523               		.loc 1 1028 0
 1524               		.cfi_startproc
 1525               	.LVL145:
 1526               	/* prologue: function */
 1527               	/* frame size = 0 */
 1528               	/* stack size = 0 */
 1529               	.L__stack_usage = 0
 1530 0000 0895      		ret
 1531               		.cfi_endproc
 1532               	.LFE132:
 1534               		.set	led_set_user.localalias.1,led_set_user
 1535               		.section	.text.backlight_set,"ax",@progbits
 1536               		.weak	backlight_set
 1538               	backlight_set:
 1539               	.LFB145:
 1540               		.cfi_startproc
 1541               	/* prologue: function */
 1542               	/* frame size = 0 */
 1543               	/* stack size = 0 */
 1544               	.L__stack_usage = 0
 1545 0000 0C94 0000 		jmp led_set_user.localalias.1
 1546               		.cfi_endproc
 1547               	.LFE145:
 1549               		.section	.text.led_set_kb,"ax",@progbits
 1550               		.weak	led_set_kb
 1552               	led_set_kb:
 1553               	.LFB133:
1029:quantum/quantum.c **** 
1030:quantum/quantum.c **** }
1031:quantum/quantum.c **** 
1032:quantum/quantum.c **** __attribute__ ((weak))
1033:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1554               		.loc 1 1033 0
 1555               		.cfi_startproc
 1556               	.LVL146:
 1557               	/* prologue: function */
 1558               	/* frame size = 0 */
 1559               	/* stack size = 0 */
 1560               	.L__stack_usage = 0
1034:quantum/quantum.c ****     led_set_user(usb_led);
 1561               		.loc 1 1034 0
 1562 0000 0C94 0000 		jmp led_set_user
 1563               	.LVL147:
 1564               		.cfi_endproc
 1565               	.LFE133:
 1567               		.section	.text.led_init_ports,"ax",@progbits
 1568               		.weak	led_init_ports
 1570               	led_init_ports:
 1571               	.LFB141:
 1572               		.cfi_startproc
 1573               	/* prologue: function */
 1574               	/* frame size = 0 */
 1575               	/* stack size = 0 */
 1576               	.L__stack_usage = 0
 1577 0000 0895      		ret
 1578               		.cfi_endproc
 1579               	.LFE141:
 1581               		.section	.text.led_set,"ax",@progbits
 1582               		.weak	led_set
 1584               	led_set:
 1585               	.LFB135:
1035:quantum/quantum.c **** }
1036:quantum/quantum.c **** 
1037:quantum/quantum.c **** __attribute__ ((weak))
1038:quantum/quantum.c **** void led_init_ports(void)
1039:quantum/quantum.c **** {
1040:quantum/quantum.c **** 
1041:quantum/quantum.c **** }
1042:quantum/quantum.c **** 
1043:quantum/quantum.c **** __attribute__ ((weak))
1044:quantum/quantum.c **** void led_set(uint8_t usb_led)
1045:quantum/quantum.c **** {
 1586               		.loc 1 1045 0
 1587               		.cfi_startproc
 1588               	.LVL148:
 1589               	/* prologue: function */
 1590               	/* frame size = 0 */
 1591               	/* stack size = 0 */
 1592               	.L__stack_usage = 0
1046:quantum/quantum.c **** 
1047:quantum/quantum.c ****   // Example LED Code
1048:quantum/quantum.c ****   //
1049:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1050:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1051:quantum/quantum.c ****     // {
1052:quantum/quantum.c ****     //     // Output high.
1053:quantum/quantum.c ****     //     DDRE |= (1<<6);
1054:quantum/quantum.c ****     //     PORTE |= (1<<6);
1055:quantum/quantum.c ****     // }
1056:quantum/quantum.c ****     // else
1057:quantum/quantum.c ****     // {
1058:quantum/quantum.c ****     //     // Output low.
1059:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1060:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1061:quantum/quantum.c ****     // }
1062:quantum/quantum.c **** 
1063:quantum/quantum.c ****   led_set_kb(usb_led);
 1593               		.loc 1 1063 0
 1594 0000 0C94 0000 		jmp led_set_kb
 1595               	.LVL149:
 1596               		.cfi_endproc
 1597               	.LFE135:
 1599               		.section	.text.startup_user,"ax",@progbits
 1600               		.weak	startup_user
 1602               	startup_user:
 1603               	.LFB139:
 1604               		.cfi_startproc
 1605               	/* prologue: function */
 1606               	/* frame size = 0 */
 1607               	/* stack size = 0 */
 1608               	.L__stack_usage = 0
 1609 0000 0895      		ret
 1610               		.cfi_endproc
 1611               	.LFE139:
 1613               		.section	.text.shutdown_user,"ax",@progbits
 1614               		.weak	shutdown_user
 1616               	shutdown_user:
 1617               	.LFB137:
1064:quantum/quantum.c **** }
1065:quantum/quantum.c **** 
1066:quantum/quantum.c **** 
1067:quantum/quantum.c **** //------------------------------------------------------------------------------
1068:quantum/quantum.c **** // Override these functions in your keymap file to play different tunes on
1069:quantum/quantum.c **** // different events such as startup and bootloader jump
1070:quantum/quantum.c **** 
1071:quantum/quantum.c **** __attribute__ ((weak))
1072:quantum/quantum.c **** void startup_user() {}
1073:quantum/quantum.c **** 
1074:quantum/quantum.c **** __attribute__ ((weak))
1075:quantum/quantum.c **** void shutdown_user() {}
 1618               		.loc 1 1075 0
 1619               		.cfi_startproc
 1620               	/* prologue: function */
 1621               	/* frame size = 0 */
 1622               	/* stack size = 0 */
 1623               	.L__stack_usage = 0
 1624 0000 0895      		ret
 1625               		.cfi_endproc
 1626               	.LFE137:
 1628               	.global	ascii_to_qwerty_keycode_lut
 1629               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a",@progbits
 1632               	ascii_to_qwerty_keycode_lut:
 1633 0000 00        		.byte	0
 1634 0001 00        		.byte	0
 1635 0002 00        		.byte	0
 1636 0003 00        		.byte	0
 1637 0004 00        		.byte	0
 1638 0005 00        		.byte	0
 1639 0006 00        		.byte	0
 1640 0007 00        		.byte	0
 1641 0008 2A        		.byte	42
 1642 0009 2B        		.byte	43
 1643 000a 28        		.byte	40
 1644 000b 00        		.byte	0
 1645 000c 00        		.byte	0
 1646 000d 00        		.byte	0
 1647 000e 00        		.byte	0
 1648 000f 00        		.byte	0
 1649 0010 00        		.byte	0
 1650 0011 00        		.byte	0
 1651 0012 00        		.byte	0
 1652 0013 00        		.byte	0
 1653 0014 00        		.byte	0
 1654 0015 00        		.byte	0
 1655 0016 00        		.byte	0
 1656 0017 00        		.byte	0
 1657 0018 00        		.byte	0
 1658 0019 00        		.byte	0
 1659 001a 00        		.byte	0
 1660 001b 29        		.byte	41
 1661 001c 00        		.byte	0
 1662 001d 00        		.byte	0
 1663 001e 00        		.byte	0
 1664 001f 00        		.byte	0
 1665 0020 2C        		.byte	44
 1666 0021 1E        		.byte	30
 1667 0022 34        		.byte	52
 1668 0023 20        		.byte	32
 1669 0024 21        		.byte	33
 1670 0025 22        		.byte	34
 1671 0026 24        		.byte	36
 1672 0027 34        		.byte	52
 1673 0028 26        		.byte	38
 1674 0029 27        		.byte	39
 1675 002a 25        		.byte	37
 1676 002b 2E        		.byte	46
 1677 002c 36        		.byte	54
 1678 002d 2D        		.byte	45
 1679 002e 37        		.byte	55
 1680 002f 38        		.byte	56
 1681 0030 27        		.byte	39
 1682 0031 1E        		.byte	30
 1683 0032 1F        		.byte	31
 1684 0033 20        		.byte	32
 1685 0034 21        		.byte	33
 1686 0035 22        		.byte	34
 1687 0036 23        		.byte	35
 1688 0037 24        		.byte	36
 1689 0038 25        		.byte	37
 1690 0039 26        		.byte	38
 1691 003a 33        		.byte	51
 1692 003b 33        		.byte	51
 1693 003c 36        		.byte	54
 1694 003d 2E        		.byte	46
 1695 003e 37        		.byte	55
 1696 003f 38        		.byte	56
 1697 0040 1F        		.byte	31
 1698 0041 04        		.byte	4
 1699 0042 05        		.byte	5
 1700 0043 06        		.byte	6
 1701 0044 07        		.byte	7
 1702 0045 08        		.byte	8
 1703 0046 09        		.byte	9
 1704 0047 0A        		.byte	10
 1705 0048 0B        		.byte	11
 1706 0049 0C        		.byte	12
 1707 004a 0D        		.byte	13
 1708 004b 0E        		.byte	14
 1709 004c 0F        		.byte	15
 1710 004d 10        		.byte	16
 1711 004e 11        		.byte	17
 1712 004f 12        		.byte	18
 1713 0050 13        		.byte	19
 1714 0051 14        		.byte	20
 1715 0052 15        		.byte	21
 1716 0053 16        		.byte	22
 1717 0054 17        		.byte	23
 1718 0055 18        		.byte	24
 1719 0056 19        		.byte	25
 1720 0057 1A        		.byte	26
 1721 0058 1B        		.byte	27
 1722 0059 1C        		.byte	28
 1723 005a 1D        		.byte	29
 1724 005b 2F        		.byte	47
 1725 005c 31        		.byte	49
 1726 005d 30        		.byte	48
 1727 005e 23        		.byte	35
 1728 005f 2D        		.byte	45
 1729 0060 35        		.byte	53
 1730 0061 04        		.byte	4
 1731 0062 05        		.byte	5
 1732 0063 06        		.byte	6
 1733 0064 07        		.byte	7
 1734 0065 08        		.byte	8
 1735 0066 09        		.byte	9
 1736 0067 0A        		.byte	10
 1737 0068 0B        		.byte	11
 1738 0069 0C        		.byte	12
 1739 006a 0D        		.byte	13
 1740 006b 0E        		.byte	14
 1741 006c 0F        		.byte	15
 1742 006d 10        		.byte	16
 1743 006e 11        		.byte	17
 1744 006f 12        		.byte	18
 1745 0070 13        		.byte	19
 1746 0071 14        		.byte	20
 1747 0072 15        		.byte	21
 1748 0073 16        		.byte	22
 1749 0074 17        		.byte	23
 1750 0075 18        		.byte	24
 1751 0076 19        		.byte	25
 1752 0077 1A        		.byte	26
 1753 0078 1B        		.byte	27
 1754 0079 1C        		.byte	28
 1755 007a 1D        		.byte	29
 1756 007b 2F        		.byte	47
 1757 007c 31        		.byte	49
 1758 007d 30        		.byte	48
 1759 007e 35        		.byte	53
 1760 007f 4C        		.byte	76
 1761               	.global	ascii_to_qwerty_shift_lut
 1762               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a",@progbits
 1765               	ascii_to_qwerty_shift_lut:
 1766 0000 00        		.byte	0
 1767 0001 00        		.byte	0
 1768 0002 00        		.byte	0
 1769 0003 00        		.byte	0
 1770 0004 00        		.byte	0
 1771 0005 00        		.byte	0
 1772 0006 00        		.byte	0
 1773 0007 00        		.byte	0
 1774 0008 00        		.byte	0
 1775 0009 00        		.byte	0
 1776 000a 00        		.byte	0
 1777 000b 00        		.byte	0
 1778 000c 00        		.byte	0
 1779 000d 00        		.byte	0
 1780 000e 00        		.byte	0
 1781 000f 00        		.byte	0
 1782 0010 00        		.byte	0
 1783 0011 00        		.byte	0
 1784 0012 00        		.byte	0
 1785 0013 00        		.byte	0
 1786 0014 00        		.byte	0
 1787 0015 00        		.byte	0
 1788 0016 00        		.byte	0
 1789 0017 00        		.byte	0
 1790 0018 00        		.byte	0
 1791 0019 00        		.byte	0
 1792 001a 00        		.byte	0
 1793 001b 00        		.byte	0
 1794 001c 00        		.byte	0
 1795 001d 00        		.byte	0
 1796 001e 00        		.byte	0
 1797 001f 00        		.byte	0
 1798 0020 00        		.byte	0
 1799 0021 01        		.byte	1
 1800 0022 01        		.byte	1
 1801 0023 01        		.byte	1
 1802 0024 01        		.byte	1
 1803 0025 01        		.byte	1
 1804 0026 01        		.byte	1
 1805 0027 00        		.byte	0
 1806 0028 01        		.byte	1
 1807 0029 01        		.byte	1
 1808 002a 01        		.byte	1
 1809 002b 01        		.byte	1
 1810 002c 00        		.byte	0
 1811 002d 00        		.byte	0
 1812 002e 00        		.byte	0
 1813 002f 00        		.byte	0
 1814 0030 00        		.byte	0
 1815 0031 00        		.byte	0
 1816 0032 00        		.byte	0
 1817 0033 00        		.byte	0
 1818 0034 00        		.byte	0
 1819 0035 00        		.byte	0
 1820 0036 00        		.byte	0
 1821 0037 00        		.byte	0
 1822 0038 00        		.byte	0
 1823 0039 00        		.byte	0
 1824 003a 01        		.byte	1
 1825 003b 00        		.byte	0
 1826 003c 01        		.byte	1
 1827 003d 00        		.byte	0
 1828 003e 01        		.byte	1
 1829 003f 01        		.byte	1
 1830 0040 01        		.byte	1
 1831 0041 01        		.byte	1
 1832 0042 01        		.byte	1
 1833 0043 01        		.byte	1
 1834 0044 01        		.byte	1
 1835 0045 01        		.byte	1
 1836 0046 01        		.byte	1
 1837 0047 01        		.byte	1
 1838 0048 01        		.byte	1
 1839 0049 01        		.byte	1
 1840 004a 01        		.byte	1
 1841 004b 01        		.byte	1
 1842 004c 01        		.byte	1
 1843 004d 01        		.byte	1
 1844 004e 01        		.byte	1
 1845 004f 01        		.byte	1
 1846 0050 01        		.byte	1
 1847 0051 01        		.byte	1
 1848 0052 01        		.byte	1
 1849 0053 01        		.byte	1
 1850 0054 01        		.byte	1
 1851 0055 01        		.byte	1
 1852 0056 01        		.byte	1
 1853 0057 01        		.byte	1
 1854 0058 01        		.byte	1
 1855 0059 01        		.byte	1
 1856 005a 01        		.byte	1
 1857 005b 00        		.byte	0
 1858 005c 00        		.byte	0
 1859 005d 00        		.byte	0
 1860 005e 01        		.byte	1
 1861 005f 01        		.byte	1
 1862 0060 00        		.byte	0
 1863 0061 00        		.byte	0
 1864 0062 00        		.byte	0
 1865 0063 00        		.byte	0
 1866 0064 00        		.byte	0
 1867 0065 00        		.byte	0
 1868 0066 00        		.byte	0
 1869 0067 00        		.byte	0
 1870 0068 00        		.byte	0
 1871 0069 00        		.byte	0
 1872 006a 00        		.byte	0
 1873 006b 00        		.byte	0
 1874 006c 00        		.byte	0
 1875 006d 00        		.byte	0
 1876 006e 00        		.byte	0
 1877 006f 00        		.byte	0
 1878 0070 00        		.byte	0
 1879 0071 00        		.byte	0
 1880 0072 00        		.byte	0
 1881 0073 00        		.byte	0
 1882 0074 00        		.byte	0
 1883 0075 00        		.byte	0
 1884 0076 00        		.byte	0
 1885 0077 00        		.byte	0
 1886 0078 00        		.byte	0
 1887 0079 00        		.byte	0
 1888 007a 00        		.byte	0
 1889 007b 01        		.byte	1
 1890 007c 01        		.byte	1
 1891 007d 01        		.byte	1
 1892 007e 01        		.byte	1
 1893 007f 00        		.byte	0
 1894               		.section	.bss.scs_timer,"aw",@nobits
 1897               	scs_timer:
 1898 0000 0000      		.zero	2
 1899               		.section	.bss.shift_interrupted,"aw",@nobits
 1902               	shift_interrupted:
 1903 0000 0000      		.zero	2
 1904               		.text
 1905               	.Letext0:
 1906               		.file 3 "/usr/avr/include/stdint.h"
 1907               		.file 4 "/usr/lib/gcc/avr/6.3.0/include/stddef.h"
 1908               		.file 5 "./tmk_core/common/keyboard.h"
 1909               		.file 6 "./tmk_core/common/action.h"
 1910               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1911               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1912               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1913               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1914               		.file 11 "/usr/avr/include/stdio.h"
 1915               		.file 12 "./tmk_core/common/report.h"
 1916               		.file 13 "./tmk_core/common/host.h"
 1917               		.file 14 "./tmk_core/common/debug.h"
 1918               		.file 15 "quantum/keycode_config.h"
 1919               		.file 16 "./tmk_core/common/keycode.h"
 1920               		.file 17 "quantum/quantum_keycodes.h"
 1921               		.file 18 "quantum/keymap.h"
 1922               		.file 19 "./tmk_core/common/action_layer.h"
 1923               		.file 20 "./tmk_core/common/timer.h"
 1924               		.file 21 "./tmk_core/common/action_util.h"
 1925               		.file 22 "/usr/avr/include/stdlib.h"
 1926               		.file 23 "./tmk_core/protocol/lufa/outputselect.h"
 1927               		.file 24 "./tmk_core/common/backlight.h"
 1928               		.file 25 "./quantum/process_keycode/process_unicode_common.h"
 1929               		.file 26 "quantum/quantum.h"
 1930               		.file 27 "./quantum/process_keycode/process_leader.h"
 1931               		.file 28 "./quantum/process_keycode/process_unicode.h"
 1932               		.file 29 "./tmk_core/common/eeconfig.h"
 1933               		.file 30 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccMPYrzd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMPYrzd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMPYrzd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMPYrzd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMPYrzd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMPYrzd.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccMPYrzd.s:132    .text.qk_register_mods:0000000000000000 qk_register_mods
     /tmp/ccMPYrzd.s:162    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
     /tmp/ccMPYrzd.s:175    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
     /tmp/ccMPYrzd.s:205    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
     /tmp/ccMPYrzd.s:219    .text.register_code16:0000000000000000 register_code16
     /tmp/ccMPYrzd.s:277    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccMPYrzd.s:332    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccMPYrzd.s:351    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccMPYrzd.s:370    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccMPYrzd.s:388    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccMPYrzd.s:424    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccMPYrzd.s:1902   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccMPYrzd.s:1897   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccMPYrzd.s:845    .text.send_string:0000000000000000 send_string
     /tmp/ccMPYrzd.s:1632   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccMPYrzd.s:1765   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccMPYrzd.s:968    .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccMPYrzd.s:1105   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccMPYrzd.s:1231   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccMPYrzd.s:1248   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccMPYrzd.s:1265   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccMPYrzd.s:1279   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccMPYrzd.s:1344   .text.send_byte:0000000000000000 send_byte
     /tmp/ccMPYrzd.s:1381   .text.send_word:0000000000000000 send_word
     /tmp/ccMPYrzd.s:1415   .text.send_dword:0000000000000000 send_dword
     /tmp/ccMPYrzd.s:1465   .text.hex_to_keycode:0000000000000000 hex_to_keycode
     /tmp/ccMPYrzd.s:1505   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccMPYrzd.s:1521   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccMPYrzd.s:1521   .text.led_set_user:0000000000000000 led_set_user.localalias.1
     /tmp/ccMPYrzd.s:1538   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccMPYrzd.s:1552   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccMPYrzd.s:1570   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccMPYrzd.s:1584   .text.led_set:0000000000000000 led_set
     /tmp/ccMPYrzd.s:1602   .text.startup_user:0000000000000000 startup_user
     /tmp/ccMPYrzd.s:1616   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
process_leader
process_unicode
debug_config
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
timer_elapsed
unregister_mods
timer_read
register_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
