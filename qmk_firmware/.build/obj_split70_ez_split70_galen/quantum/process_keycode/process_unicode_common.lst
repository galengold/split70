   1               		.file	"process_unicode_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.set_unicode_input_mode,"ax",@progbits
  11               	.global	set_unicode_input_mode
  13               	set_unicode_input_mode:
  14               	.LFB107:
  15               		.file 1 "quantum/process_keycode/process_unicode_common.c"
   1:quantum/process_keycode/process_unicode_common.c **** #include "process_unicode_common.h"
   2:quantum/process_keycode/process_unicode_common.c **** 
   3:quantum/process_keycode/process_unicode_common.c **** uint8_t mods;
   4:quantum/process_keycode/process_unicode_common.c **** 
   5:quantum/process_keycode/process_unicode_common.c **** void set_unicode_input_mode(uint8_t os_target)
   6:quantum/process_keycode/process_unicode_common.c **** {
  16               		.loc 1 6 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
   7:quantum/process_keycode/process_unicode_common.c ****   input_mode = os_target;
  23               		.loc 1 7 0
  24 0000 8093 0000 		sts input_mode,r24
  25 0004 0895      		ret
  26               		.cfi_endproc
  27               	.LFE107:
  29               		.section	.text.get_unicode_input_mode,"ax",@progbits
  30               	.global	get_unicode_input_mode
  32               	get_unicode_input_mode:
  33               	.LFB108:
   8:quantum/process_keycode/process_unicode_common.c **** }
   9:quantum/process_keycode/process_unicode_common.c **** 
  10:quantum/process_keycode/process_unicode_common.c **** uint8_t get_unicode_input_mode(void) {
  34               		.loc 1 10 0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  11:quantum/process_keycode/process_unicode_common.c ****   return input_mode;
  12:quantum/process_keycode/process_unicode_common.c **** }
  40               		.loc 1 12 0
  41 0000 8091 0000 		lds r24,input_mode
  42 0004 0895      		ret
  43               		.cfi_endproc
  44               	.LFE108:
  46               		.section	.text.unicode_input_start,"ax",@progbits
  47               		.weak	unicode_input_start
  49               	unicode_input_start:
  50               	.LFB109:
  13:quantum/process_keycode/process_unicode_common.c **** 
  14:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak))
  15:quantum/process_keycode/process_unicode_common.c **** void unicode_input_start (void) {
  51               		.loc 1 15 0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  16:quantum/process_keycode/process_unicode_common.c ****   // save current mods
  17:quantum/process_keycode/process_unicode_common.c ****   mods = keyboard_report->mods;
  57               		.loc 1 17 0
  58 0000 E091 0000 		lds r30,keyboard_report
  59 0004 F091 0000 		lds r31,keyboard_report+1
  60 0008 8081      		ld r24,Z
  61 000a 8093 0000 		sts mods,r24
  18:quantum/process_keycode/process_unicode_common.c **** 
  19:quantum/process_keycode/process_unicode_common.c ****   // unregister all mods to start from clean state
  20:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LSFT)) unregister_code(KC_LSFT);
  62               		.loc 1 20 0
  63 000e 81FF      		sbrs r24,1
  64 0010 00C0      		rjmp .L4
  65               		.loc 1 20 0 is_stmt 0 discriminator 1
  66 0012 81EE      		ldi r24,lo8(-31)
  67 0014 0E94 0000 		call unregister_code
  68               	.LVL1:
  69               	.L4:
  21:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RSFT)) unregister_code(KC_RSFT);
  70               		.loc 1 21 0 is_stmt 1
  71 0018 8091 0000 		lds r24,mods
  72 001c 85FF      		sbrs r24,5
  73 001e 00C0      		rjmp .L5
  74               		.loc 1 21 0 is_stmt 0 discriminator 1
  75 0020 85EE      		ldi r24,lo8(-27)
  76 0022 0E94 0000 		call unregister_code
  77               	.LVL2:
  78               	.L5:
  22:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LCTL)) unregister_code(KC_LCTL);
  79               		.loc 1 22 0 is_stmt 1
  80 0026 8091 0000 		lds r24,mods
  81 002a 80FF      		sbrs r24,0
  82 002c 00C0      		rjmp .L6
  83               		.loc 1 22 0 is_stmt 0 discriminator 1
  84 002e 80EE      		ldi r24,lo8(-32)
  85 0030 0E94 0000 		call unregister_code
  86               	.LVL3:
  87               	.L6:
  23:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RCTL)) unregister_code(KC_RCTL);
  88               		.loc 1 23 0 is_stmt 1
  89 0034 8091 0000 		lds r24,mods
  90 0038 84FF      		sbrs r24,4
  91 003a 00C0      		rjmp .L7
  92               		.loc 1 23 0 is_stmt 0 discriminator 1
  93 003c 84EE      		ldi r24,lo8(-28)
  94 003e 0E94 0000 		call unregister_code
  95               	.LVL4:
  96               	.L7:
  24:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LALT)) unregister_code(KC_LALT);
  97               		.loc 1 24 0 is_stmt 1
  98 0042 8091 0000 		lds r24,mods
  99 0046 82FF      		sbrs r24,2
 100 0048 00C0      		rjmp .L8
 101               		.loc 1 24 0 is_stmt 0 discriminator 1
 102 004a 82EE      		ldi r24,lo8(-30)
 103 004c 0E94 0000 		call unregister_code
 104               	.LVL5:
 105               	.L8:
  25:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RALT)) unregister_code(KC_RALT);
 106               		.loc 1 25 0 is_stmt 1
 107 0050 8091 0000 		lds r24,mods
 108 0054 86FF      		sbrs r24,6
 109 0056 00C0      		rjmp .L9
 110               		.loc 1 25 0 is_stmt 0 discriminator 1
 111 0058 86EE      		ldi r24,lo8(-26)
 112 005a 0E94 0000 		call unregister_code
 113               	.LVL6:
 114               	.L9:
  26:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LGUI)) unregister_code(KC_LGUI);
 115               		.loc 1 26 0 is_stmt 1
 116 005e 8091 0000 		lds r24,mods
 117 0062 83FF      		sbrs r24,3
 118 0064 00C0      		rjmp .L10
 119               		.loc 1 26 0 is_stmt 0 discriminator 1
 120 0066 83EE      		ldi r24,lo8(-29)
 121 0068 0E94 0000 		call unregister_code
 122               	.LVL7:
 123               	.L10:
  27:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RGUI)) unregister_code(KC_RGUI);
 124               		.loc 1 27 0 is_stmt 1
 125 006c 8091 0000 		lds r24,mods
 126 0070 87FF      		sbrs r24,7
 127 0072 00C0      		rjmp .L11
 128               		.loc 1 27 0 is_stmt 0 discriminator 1
 129 0074 87EE      		ldi r24,lo8(-25)
 130 0076 0E94 0000 		call unregister_code
 131               	.LVL8:
 132               	.L11:
  28:quantum/process_keycode/process_unicode_common.c **** 
  29:quantum/process_keycode/process_unicode_common.c ****   switch(input_mode) {
 133               		.loc 1 29 0 is_stmt 1
 134 007a 8091 0000 		lds r24,input_mode
 135 007e 8130      		cpi r24,lo8(1)
 136 0080 01F0      		breq .L13
 137 0082 00F0      		brlo .L14
 138 0084 8230      		cpi r24,lo8(2)
 139 0086 01F0      		breq .L15
 140 0088 8430      		cpi r24,lo8(4)
 141 008a 01F0      		breq .L16
 142               	.L12:
 143               	.LVL9:
 144               	.LBB4:
 145               	.LBB5:
 146               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 147               		.loc 2 187 0
 148 008c 8FE3      		ldi r24,lo8(-25537)
 149 008e 9CE9      		ldi r25,hi8(-25537)
 150 0090 0197      	1:	sbiw r24,1
 151 0092 01F4      		brne 1b
 152 0094 00C0      		rjmp .
 153 0096 0000      		nop
 154               	.LVL10:
 155 0098 0895      		ret
 156               	.L14:
 157               	.LBE5:
 158               	.LBE4:
  30:quantum/process_keycode/process_unicode_common.c ****   case UC_OSX:
  31:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_LALT);
 159               		.loc 1 31 0
 160 009a 82EE      		ldi r24,lo8(-30)
 161 009c 0E94 0000 		call register_code
 162               	.LVL11:
  32:quantum/process_keycode/process_unicode_common.c ****     break;
 163               		.loc 1 32 0
 164 00a0 00C0      		rjmp .L12
 165               	.L13:
  33:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
  34:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_LCTL);
 166               		.loc 1 34 0
 167 00a2 80EE      		ldi r24,lo8(-32)
 168 00a4 0E94 0000 		call register_code
 169               	.LVL12:
  35:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_LSFT);
 170               		.loc 1 35 0
 171 00a8 81EE      		ldi r24,lo8(-31)
 172 00aa 0E94 0000 		call register_code
 173               	.LVL13:
  36:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_U);
 174               		.loc 1 36 0
 175 00ae 88E1      		ldi r24,lo8(24)
 176 00b0 0E94 0000 		call register_code
 177               	.LVL14:
  37:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_U);
 178               		.loc 1 37 0
 179 00b4 88E1      		ldi r24,lo8(24)
 180 00b6 0E94 0000 		call unregister_code
 181               	.LVL15:
  38:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_LSFT);
 182               		.loc 1 38 0
 183 00ba 81EE      		ldi r24,lo8(-31)
 184 00bc 0E94 0000 		call unregister_code
 185               	.LVL16:
  39:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_LCTL);
 186               		.loc 1 39 0
 187 00c0 80EE      		ldi r24,lo8(-32)
 188               	.L38:
  40:quantum/process_keycode/process_unicode_common.c ****     break;
  41:quantum/process_keycode/process_unicode_common.c ****   case UC_WIN:
  42:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_LALT);
  43:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_PPLS);
  44:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_PPLS);
  45:quantum/process_keycode/process_unicode_common.c ****     break;
  46:quantum/process_keycode/process_unicode_common.c ****   case UC_WINC:
  47:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_RALT);
  48:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_RALT);
  49:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_U);
  50:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_U);
 189               		.loc 1 50 0
 190 00c2 0E94 0000 		call unregister_code
 191               	.LVL17:
 192 00c6 00C0      		rjmp .L12
 193               	.L15:
  42:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_PPLS);
 194               		.loc 1 42 0
 195 00c8 82EE      		ldi r24,lo8(-30)
 196 00ca 0E94 0000 		call register_code
 197               	.LVL18:
  43:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_PPLS);
 198               		.loc 1 43 0
 199 00ce 87E5      		ldi r24,lo8(87)
 200 00d0 0E94 0000 		call register_code
 201               	.LVL19:
  44:quantum/process_keycode/process_unicode_common.c ****     break;
 202               		.loc 1 44 0
 203 00d4 87E5      		ldi r24,lo8(87)
 204 00d6 00C0      		rjmp .L38
 205               	.L16:
  47:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_RALT);
 206               		.loc 1 47 0
 207 00d8 86EE      		ldi r24,lo8(-26)
 208 00da 0E94 0000 		call register_code
 209               	.LVL20:
  48:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_U);
 210               		.loc 1 48 0
 211 00de 86EE      		ldi r24,lo8(-26)
 212 00e0 0E94 0000 		call unregister_code
 213               	.LVL21:
  49:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_U);
 214               		.loc 1 49 0
 215 00e4 88E1      		ldi r24,lo8(24)
 216 00e6 0E94 0000 		call register_code
 217               	.LVL22:
 218               		.loc 1 50 0
 219 00ea 88E1      		ldi r24,lo8(24)
 220 00ec 00C0      		rjmp .L38
 221               		.cfi_endproc
 222               	.LFE109:
 224               		.section	.text.unicode_input_finish,"ax",@progbits
 225               		.weak	unicode_input_finish
 227               	unicode_input_finish:
 228               	.LFB110:
  51:quantum/process_keycode/process_unicode_common.c ****   }
  52:quantum/process_keycode/process_unicode_common.c ****   wait_ms(UNICODE_TYPE_DELAY);
  53:quantum/process_keycode/process_unicode_common.c **** }
  54:quantum/process_keycode/process_unicode_common.c **** 
  55:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak))
  56:quantum/process_keycode/process_unicode_common.c **** void unicode_input_finish (void) {
 229               		.loc 1 56 0
 230               		.cfi_startproc
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
  57:quantum/process_keycode/process_unicode_common.c ****   switch(input_mode) {
 235               		.loc 1 57 0
 236 0000 8091 0000 		lds r24,input_mode
 237 0004 8130      		cpi r24,lo8(1)
 238 0006 01F0      		breq .L41
 239 0008 00F0      		brlo .L42
 240 000a 8230      		cpi r24,lo8(2)
 241 000c 01F4      		brne .L40
 242               	.L42:
  58:quantum/process_keycode/process_unicode_common.c ****     case UC_OSX:
  59:quantum/process_keycode/process_unicode_common.c ****     case UC_WIN:
  60:quantum/process_keycode/process_unicode_common.c ****       unregister_code(KC_LALT);
 243               		.loc 1 60 0
 244 000e 82EE      		ldi r24,lo8(-30)
 245               	.L75:
  61:quantum/process_keycode/process_unicode_common.c ****       break;
  62:quantum/process_keycode/process_unicode_common.c ****     case UC_LNX:
  63:quantum/process_keycode/process_unicode_common.c ****       register_code(KC_SPC);
  64:quantum/process_keycode/process_unicode_common.c ****       unregister_code(KC_SPC);
 246               		.loc 1 64 0
 247 0010 0E94 0000 		call unregister_code
 248               	.LVL23:
 249               	.L40:
  65:quantum/process_keycode/process_unicode_common.c ****       break;
  66:quantum/process_keycode/process_unicode_common.c ****   }
  67:quantum/process_keycode/process_unicode_common.c **** 
  68:quantum/process_keycode/process_unicode_common.c ****   // reregister previously set mods
  69:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LSFT)) register_code(KC_LSFT);
 250               		.loc 1 69 0
 251 0014 8091 0000 		lds r24,mods
 252 0018 81FF      		sbrs r24,1
 253 001a 00C0      		rjmp .L43
 254               		.loc 1 69 0 is_stmt 0 discriminator 1
 255 001c 81EE      		ldi r24,lo8(-31)
 256 001e 0E94 0000 		call register_code
 257               	.LVL24:
 258               	.L43:
  70:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RSFT)) register_code(KC_RSFT);
 259               		.loc 1 70 0 is_stmt 1
 260 0022 8091 0000 		lds r24,mods
 261 0026 85FF      		sbrs r24,5
 262 0028 00C0      		rjmp .L44
 263               		.loc 1 70 0 is_stmt 0 discriminator 1
 264 002a 85EE      		ldi r24,lo8(-27)
 265 002c 0E94 0000 		call register_code
 266               	.LVL25:
 267               	.L44:
  71:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LCTL)) register_code(KC_LCTL);
 268               		.loc 1 71 0 is_stmt 1
 269 0030 8091 0000 		lds r24,mods
 270 0034 80FF      		sbrs r24,0
 271 0036 00C0      		rjmp .L45
 272               		.loc 1 71 0 is_stmt 0 discriminator 1
 273 0038 80EE      		ldi r24,lo8(-32)
 274 003a 0E94 0000 		call register_code
 275               	.LVL26:
 276               	.L45:
  72:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RCTL)) register_code(KC_RCTL);
 277               		.loc 1 72 0 is_stmt 1
 278 003e 8091 0000 		lds r24,mods
 279 0042 84FF      		sbrs r24,4
 280 0044 00C0      		rjmp .L46
 281               		.loc 1 72 0 is_stmt 0 discriminator 1
 282 0046 84EE      		ldi r24,lo8(-28)
 283 0048 0E94 0000 		call register_code
 284               	.LVL27:
 285               	.L46:
  73:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LALT)) register_code(KC_LALT);
 286               		.loc 1 73 0 is_stmt 1
 287 004c 8091 0000 		lds r24,mods
 288 0050 82FF      		sbrs r24,2
 289 0052 00C0      		rjmp .L47
 290               		.loc 1 73 0 is_stmt 0 discriminator 1
 291 0054 82EE      		ldi r24,lo8(-30)
 292 0056 0E94 0000 		call register_code
 293               	.LVL28:
 294               	.L47:
  74:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RALT)) register_code(KC_RALT);
 295               		.loc 1 74 0 is_stmt 1
 296 005a 8091 0000 		lds r24,mods
 297 005e 86FF      		sbrs r24,6
 298 0060 00C0      		rjmp .L48
 299               		.loc 1 74 0 is_stmt 0 discriminator 1
 300 0062 86EE      		ldi r24,lo8(-26)
 301 0064 0E94 0000 		call register_code
 302               	.LVL29:
 303               	.L48:
  75:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_LGUI)) register_code(KC_LGUI);
 304               		.loc 1 75 0 is_stmt 1
 305 0068 8091 0000 		lds r24,mods
 306 006c 83FF      		sbrs r24,3
 307 006e 00C0      		rjmp .L49
 308               		.loc 1 75 0 is_stmt 0 discriminator 1
 309 0070 83EE      		ldi r24,lo8(-29)
 310 0072 0E94 0000 		call register_code
 311               	.LVL30:
 312               	.L49:
  76:quantum/process_keycode/process_unicode_common.c ****   if (mods & MOD_BIT(KC_RGUI)) register_code(KC_RGUI);
 313               		.loc 1 76 0 is_stmt 1
 314 0076 8091 0000 		lds r24,mods
 315 007a 87FF      		sbrs r24,7
 316 007c 00C0      		rjmp .L39
 317               		.loc 1 76 0 is_stmt 0 discriminator 1
 318 007e 87EE      		ldi r24,lo8(-25)
 319 0080 0C94 0000 		jmp register_code
 320               	.LVL31:
 321               	.L41:
  63:quantum/process_keycode/process_unicode_common.c ****       unregister_code(KC_SPC);
 322               		.loc 1 63 0 is_stmt 1
 323 0084 8CE2      		ldi r24,lo8(44)
 324 0086 0E94 0000 		call register_code
 325               	.LVL32:
  64:quantum/process_keycode/process_unicode_common.c ****       break;
 326               		.loc 1 64 0
 327 008a 8CE2      		ldi r24,lo8(44)
 328 008c 00C0      		rjmp .L75
 329               	.L39:
 330 008e 0895      		ret
 331               		.cfi_endproc
 332               	.LFE110:
 334               		.section	.text.register_hex,"ax",@progbits
 335               	.global	register_hex
 337               	register_hex:
 338               	.LFB111:
  77:quantum/process_keycode/process_unicode_common.c **** }
  78:quantum/process_keycode/process_unicode_common.c **** 
  79:quantum/process_keycode/process_unicode_common.c **** void register_hex(uint16_t hex) {
 339               		.loc 1 79 0
 340               		.cfi_startproc
 341               	.LVL33:
 342 0000 EF92      		push r14
 343               	.LCFI0:
 344               		.cfi_def_cfa_offset 3
 345               		.cfi_offset 14, -2
 346 0002 FF92      		push r15
 347               	.LCFI1:
 348               		.cfi_def_cfa_offset 4
 349               		.cfi_offset 15, -3
 350 0004 1F93      		push r17
 351               	.LCFI2:
 352               		.cfi_def_cfa_offset 5
 353               		.cfi_offset 17, -4
 354 0006 CF93      		push r28
 355               	.LCFI3:
 356               		.cfi_def_cfa_offset 6
 357               		.cfi_offset 28, -5
 358 0008 DF93      		push r29
 359               	.LCFI4:
 360               		.cfi_def_cfa_offset 7
 361               		.cfi_offset 29, -6
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 5 */
 365               	.L__stack_usage = 5
 366 000a 7C01      		movw r14,r24
 367               	.LVL34:
 368               		.loc 1 79 0
 369 000c CCE0      		ldi r28,lo8(12)
 370 000e D0E0      		ldi r29,0
 371               	.LVL35:
 372               	.L77:
 373               	.LBB6:
 374               	.LBB7:
  80:quantum/process_keycode/process_unicode_common.c ****   for(int i = 3; i >= 0; i--) {
  81:quantum/process_keycode/process_unicode_common.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 375               		.loc 1 81 0 discriminator 3
 376 0010 C701      		movw r24,r14
 377 0012 0C2E      		mov r0,r28
 378 0014 00C0      		rjmp 2f
 379               		1:
 380 0016 9695      		lsr r25
 381 0018 8795      		ror r24
 382               		2:
 383 001a 0A94      		dec r0
 384 001c 02F4      		brpl 1b
 385 001e 182F      		mov r17,r24
 386 0020 1F70      		andi r17,lo8(15)
 387               	.LVL36:
  82:quantum/process_keycode/process_unicode_common.c ****     register_code(hex_to_keycode(digit));
 388               		.loc 1 82 0 discriminator 3
 389 0022 812F      		mov r24,r17
 390 0024 0E94 0000 		call hex_to_keycode
 391               	.LVL37:
 392 0028 0E94 0000 		call register_code
 393               	.LVL38:
  83:quantum/process_keycode/process_unicode_common.c ****     unregister_code(hex_to_keycode(digit));
 394               		.loc 1 83 0 discriminator 3
 395 002c 812F      		mov r24,r17
 396 002e 0E94 0000 		call hex_to_keycode
 397               	.LVL39:
 398 0032 0E94 0000 		call unregister_code
 399               	.LVL40:
 400 0036 2497      		sbiw r28,4
 401               	.LBE7:
  80:quantum/process_keycode/process_unicode_common.c ****   for(int i = 3; i >= 0; i--) {
 402               		.loc 1 80 0 discriminator 3
 403 0038 CC3F      		cpi r28,-4
 404 003a 8FEF      		ldi r24,-1
 405 003c D807      		cpc r29,r24
 406 003e 01F4      		brne .L77
 407               	/* epilogue start */
 408               	.LBE6:
  84:quantum/process_keycode/process_unicode_common.c ****   }
  85:quantum/process_keycode/process_unicode_common.c **** }...
 409               		.loc 1 85 0
 410 0040 DF91      		pop r29
 411 0042 CF91      		pop r28
 412 0044 1F91      		pop r17
 413               	.LVL41:
 414 0046 FF90      		pop r15
 415 0048 EF90      		pop r14
 416               	.LVL42:
 417 004a 0895      		ret
 418               		.cfi_endproc
 419               	.LFE111:
 421               		.comm	mods,1,1
 422               		.section	.bss.input_mode,"aw",@nobits
 425               	input_mode:
 426 0000 00        		.zero	1
 427               		.text
 428               	.Letext0:
 429               		.file 3 "/usr/avr/include/stdint.h"
 430               		.file 4 "/usr/lib/gcc/avr/6.3.0/include/stddef.h"
 431               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 432               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 433               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 434               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 435               		.file 9 "/usr/avr/include/stdio.h"
 436               		.file 10 "./tmk_core/common/report.h"
 437               		.file 11 "./tmk_core/common/host.h"
 438               		.file 12 "./tmk_core/common/debug.h"
 439               		.file 13 "./quantum/keycode_config.h"
 440               		.file 14 "./quantum/keymap.h"
 441               		.file 15 "./tmk_core/common/action_layer.h"
 442               		.file 16 "./tmk_core/common/timer.h"
 443               		.file 17 "./tmk_core/common/action_util.h"
 444               		.file 18 "/usr/avr/include/stdlib.h"
 445               		.file 19 "quantum/process_keycode/process_unicode_common.h"
 446               		.file 20 "./quantum/quantum.h"
 447               		.file 21 "./tmk_core/common/action.h"
 448               		.file 22 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_unicode_common.c
     /tmp/cc6Qx3HK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6Qx3HK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6Qx3HK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6Qx3HK.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6Qx3HK.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6Qx3HK.s:13     .text.set_unicode_input_mode:0000000000000000 set_unicode_input_mode
     /tmp/cc6Qx3HK.s:425    .bss.input_mode:0000000000000000 input_mode
     /tmp/cc6Qx3HK.s:32     .text.get_unicode_input_mode:0000000000000000 get_unicode_input_mode
     /tmp/cc6Qx3HK.s:49     .text.unicode_input_start:0000000000000000 unicode_input_start
                            *COM*:0000000000000001 mods
     /tmp/cc6Qx3HK.s:227    .text.unicode_input_finish:0000000000000000 unicode_input_finish
     /tmp/cc6Qx3HK.s:337    .text.register_hex:0000000000000000 register_hex

UNDEFINED SYMBOLS
keyboard_report
unregister_code
register_code
hex_to_keycode
__do_clear_bss
