   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  11               	.global	get_oneshot_locked_mods
  13               	get_oneshot_locked_mods:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action_util.c"
   1:./tmk_core/common/action_util.c **** /*
   2:./tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.c **** 
   4:./tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.c **** (at your option) any later version.
   8:./tmk_core/common/action_util.c **** 
   9:./tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.c **** 
  14:./tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.c **** */
  17:./tmk_core/common/action_util.c **** #include "host.h"
  18:./tmk_core/common/action_util.c **** #include "report.h"
  19:./tmk_core/common/action_util.c **** #include "debug.h"
  20:./tmk_core/common/action_util.c **** #include "action_util.h"
  21:./tmk_core/common/action_util.c **** #include "action_layer.h"
  22:./tmk_core/common/action_util.c **** #include "timer.h"
  23:./tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:./tmk_core/common/action_util.c **** 
  25:./tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:./tmk_core/common/action_util.c **** 
  27:./tmk_core/common/action_util.c **** 
  28:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  29:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  30:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  31:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  32:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  33:./tmk_core/common/action_util.c **** #endif
  34:./tmk_core/common/action_util.c **** 
  35:./tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  36:./tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  37:./tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  38:./tmk_core/common/action_util.c **** 
  39:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  40:./tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  41:./tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  42:./tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  43:./tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  44:./tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  45:./tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  46:./tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  47:./tmk_core/common/action_util.c **** #endif
  48:./tmk_core/common/action_util.c **** 
  49:./tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  50:./tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  51:./tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  52:./tmk_core/common/action_util.c **** 
  53:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  54:./tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  55:./tmk_core/common/action_util.c **** static int8_t oneshot_locked_mods = 0;
  56:./tmk_core/common/action_util.c **** int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 56 0
  23 0000 8091 0000 		lds r24,oneshot_locked_mods
  24               	/* epilogue start */
  25 0004 0895      		ret
  26               		.cfi_endproc
  27               	.LFE103:
  29               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
  30               	.global	set_oneshot_locked_mods
  32               	set_oneshot_locked_mods:
  33               	.LFB104:
  57:./tmk_core/common/action_util.c **** void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
  34               		.loc 1 57 0
  35               		.cfi_startproc
  36               	.LVL0:
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  41               		.loc 1 57 0
  42 0000 8093 0000 		sts oneshot_locked_mods,r24
  43               	/* epilogue start */
  44 0004 0895      		ret
  45               		.cfi_endproc
  46               	.LFE104:
  48               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
  49               	.global	clear_oneshot_locked_mods
  51               	clear_oneshot_locked_mods:
  52               	.LFB105:
  58:./tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
  53               		.loc 1 58 0
  54               		.cfi_startproc
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 0 */
  58               	.L__stack_usage = 0
  59               		.loc 1 58 0
  60 0000 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  61               	/* epilogue start */
  62 0004 0895      		ret
  63               		.cfi_endproc
  64               	.LFE105:
  66               		.section	.text.get_oneshot_layer,"ax",@progbits
  67               	.global	get_oneshot_layer
  69               	get_oneshot_layer:
  70               	.LFB106:
  59:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  60:./tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  61:./tmk_core/common/action_util.c **** inline bool has_oneshot_mods_timed_out() {
  62:./tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  63:./tmk_core/common/action_util.c **** }
  64:./tmk_core/common/action_util.c **** #endif
  65:./tmk_core/common/action_util.c **** #endif
  66:./tmk_core/common/action_util.c **** 
  67:./tmk_core/common/action_util.c **** /* oneshot layer */
  68:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  69:./tmk_core/common/action_util.c **** /* oneshot_layer_data bits
  70:./tmk_core/common/action_util.c **** * LLLL LSSS
  71:./tmk_core/common/action_util.c **** * where:
  72:./tmk_core/common/action_util.c **** *   L => are layer bits
  73:./tmk_core/common/action_util.c **** *   S => oneshot state bits
  74:./tmk_core/common/action_util.c **** */
  75:./tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  76:./tmk_core/common/action_util.c **** 
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
  71               		.loc 1 77 0
  72               		.cfi_startproc
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
  77               		.loc 1 77 0
  78 0000 8091 0000 		lds r24,oneshot_layer_data
  79 0004 8595      		asr r24
  80 0006 8595      		asr r24
  81 0008 8595      		asr r24
  82               	/* epilogue start */
  83 000a 0895      		ret
  84               		.cfi_endproc
  85               	.LFE106:
  87               		.section	.text.get_oneshot_layer_state,"ax",@progbits
  88               	.global	get_oneshot_layer_state
  90               	get_oneshot_layer_state:
  91               	.LFB107:
  78:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
  92               		.loc 1 78 0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  98               		.loc 1 78 0
  99 0000 8091 0000 		lds r24,oneshot_layer_data
 100 0004 8770      		andi r24,lo8(7)
 101               	/* epilogue start */
 102 0006 0895      		ret
 103               		.cfi_endproc
 104               	.LFE107:
 106               		.section	.text.set_oneshot_layer,"ax",@progbits
 107               	.global	set_oneshot_layer
 109               	set_oneshot_layer:
 110               	.LFB108:
  79:./tmk_core/common/action_util.c **** 
  80:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  81:./tmk_core/common/action_util.c **** static int16_t oneshot_layer_time = 0;
  82:./tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  83:./tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  84:./tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  85:./tmk_core/common/action_util.c **** }
  86:./tmk_core/common/action_util.c **** #endif
  87:./tmk_core/common/action_util.c **** 
  88:./tmk_core/common/action_util.c **** /* Oneshot layer */
  89:./tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
  90:./tmk_core/common/action_util.c **** {
 111               		.loc 1 90 0
 112               		.cfi_startproc
 113               	.LVL1:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  91:./tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 118               		.loc 1 91 0
 119 0000 98E0      		ldi r25,lo8(8)
 120 0002 899F      		mul r24,r25
 121 0004 9001      		movw r18,r0
 122 0006 1124      		clr __zero_reg__
 123 0008 622B      		or r22,r18
 124               	.LVL2:
 125 000a 6093 0000 		sts oneshot_layer_data,r22
  92:./tmk_core/common/action_util.c ****     layer_on(layer);
 126               		.loc 1 92 0
 127 000e 0C94 0000 		jmp layer_on
 128               	.LVL3:
 129               		.cfi_endproc
 130               	.LFE108:
 132               		.section	.text.reset_oneshot_layer,"ax",@progbits
 133               	.global	reset_oneshot_layer
 135               	reset_oneshot_layer:
 136               	.LFB109:
  93:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  94:./tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
  95:./tmk_core/common/action_util.c **** #endif
  96:./tmk_core/common/action_util.c **** }
  97:./tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 137               		.loc 1 97 0
 138               		.cfi_startproc
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
  98:./tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 143               		.loc 1 98 0
 144 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 145               	/* epilogue start */
  99:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 100:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 101:./tmk_core/common/action_util.c **** #endif
 102:./tmk_core/common/action_util.c **** }
 146               		.loc 1 102 0
 147 0004 0895      		ret
 148               		.cfi_endproc
 149               	.LFE109:
 151               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 152               	.global	clear_oneshot_layer_state
 154               	clear_oneshot_layer_state:
 155               	.LFB110:
 103:./tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 104:./tmk_core/common/action_util.c **** {
 156               		.loc 1 104 0
 157               		.cfi_startproc
 158               	.LVL4:
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 105:./tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 163               		.loc 1 105 0
 164 0000 9091 0000 		lds r25,oneshot_layer_data
 165               	.LVL5:
 106:./tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 166               		.loc 1 106 0
 167 0004 8095      		com r24
 168               	.LVL6:
 169 0006 8923      		and r24,r25
 170               	.LVL7:
 171 0008 8093 0000 		sts oneshot_layer_data,r24
 172               	.LBB8:
 173               	.LBB9:
  78:./tmk_core/common/action_util.c **** 
 174               		.loc 1 78 0
 175 000c 282F      		mov r18,r24
 176 000e 2770      		andi r18,lo8(7)
 177               	.LBE9:
 178               	.LBE8:
 107:./tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 179               		.loc 1 107 0
 180 0010 01F4      		brne .L8
 181               		.loc 1 107 0 is_stmt 0 discriminator 1
 182 0012 282F      		mov r18,r24
 183 0014 082E      		mov __tmp_reg__,r24
 184 0016 000C      		lsl r0
 185 0018 330B      		sbc r19,r19
 186 001a 9217      		cp r25,r18
 187 001c 1306      		cpc __zero_reg__,r19
 188 001e 01F0      		breq .L8
 108:./tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 189               		.loc 1 108 0 is_stmt 1
 190 0020 8595      		asr r24
 191 0022 8595      		asr r24
 192 0024 8595      		asr r24
 193 0026 0C94 0000 		jmp layer_off
 194               	.LVL8:
 195               	.L8:
 196               	/* epilogue start */
 109:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:./tmk_core/common/action_util.c **** #endif
 112:./tmk_core/common/action_util.c ****     }
 113:./tmk_core/common/action_util.c **** }
 197               		.loc 1 113 0
 198 002a 0895      		ret
 199               		.cfi_endproc
 200               	.LFE110:
 202               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 203               	.global	is_oneshot_layer_active
 205               	is_oneshot_layer_active:
 206               	.LFB111:
 114:./tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 115:./tmk_core/common/action_util.c **** {
 207               		.loc 1 115 0
 208               		.cfi_startproc
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 211               	/* stack size = 0 */
 212               	.L__stack_usage = 0
 213               	.LBB10:
 214               	.LBB11:
  78:./tmk_core/common/action_util.c **** 
 215               		.loc 1 78 0
 216 0000 9091 0000 		lds r25,oneshot_layer_data
 217 0004 9770      		andi r25,lo8(7)
 218               	.LBE11:
 219               	.LBE10:
 116:./tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 220               		.loc 1 116 0
 221 0006 81E0      		ldi r24,lo8(1)
 222 0008 01F4      		brne .L11
 223 000a 80E0      		ldi r24,0
 224               	.L11:
 225               	/* epilogue start */
 117:./tmk_core/common/action_util.c **** }
 226               		.loc 1 117 0
 227 000c 0895      		ret
 228               		.cfi_endproc
 229               	.LFE111:
 231               		.section	.text.add_key,"ax",@progbits
 232               	.global	add_key
 234               	add_key:
 235               	.LFB113:
 118:./tmk_core/common/action_util.c **** #endif
 119:./tmk_core/common/action_util.c **** 
 120:./tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 123:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 124:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 125:./tmk_core/common/action_util.c ****     if (oneshot_mods) {
 126:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:./tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 128:./tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 129:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 130:./tmk_core/common/action_util.c ****         }
 131:./tmk_core/common/action_util.c **** #endif
 132:./tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 133:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 134:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 135:./tmk_core/common/action_util.c ****         }
 136:./tmk_core/common/action_util.c ****     }
 137:./tmk_core/common/action_util.c **** 
 138:./tmk_core/common/action_util.c **** #endif
 139:./tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 140:./tmk_core/common/action_util.c **** }
 141:./tmk_core/common/action_util.c **** 
 142:./tmk_core/common/action_util.c **** /* key */
 143:./tmk_core/common/action_util.c **** void add_key(uint8_t key)
 144:./tmk_core/common/action_util.c **** {
 236               		.loc 1 144 0
 237               		.cfi_startproc
 238               	.LVL9:
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 145:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 146:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 243               		.loc 1 146 0
 244 0000 9091 0000 		lds r25,keyboard_protocol
 245 0004 9923      		tst r25
 246 0006 01F0      		breq .L13
 247               		.loc 1 146 0 is_stmt 0 discriminator 1
 248 0008 9091 0000 		lds r25,keymap_config
 249 000c 97FF      		sbrs r25,7
 250 000e 00C0      		rjmp .L13
 251               	.LVL10:
 252               	.LBB16:
 253               	.LBB17:
 147:./tmk_core/common/action_util.c ****         add_key_bit(key);
 148:./tmk_core/common/action_util.c ****         return;
 149:./tmk_core/common/action_util.c ****     }
 150:./tmk_core/common/action_util.c **** #endif
 151:./tmk_core/common/action_util.c ****     add_key_byte(key);
 152:./tmk_core/common/action_util.c **** }
 153:./tmk_core/common/action_util.c **** 
 154:./tmk_core/common/action_util.c **** void del_key(uint8_t key)
 155:./tmk_core/common/action_util.c **** {
 156:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 157:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 158:./tmk_core/common/action_util.c ****         del_key_bit(key);
 159:./tmk_core/common/action_util.c ****         return;
 160:./tmk_core/common/action_util.c ****     }
 161:./tmk_core/common/action_util.c **** #endif
 162:./tmk_core/common/action_util.c ****     del_key_byte(key);
 163:./tmk_core/common/action_util.c **** }
 164:./tmk_core/common/action_util.c **** 
 165:./tmk_core/common/action_util.c **** void clear_keys(void)
 166:./tmk_core/common/action_util.c **** {
 167:./tmk_core/common/action_util.c ****     // not clear mods
 168:./tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 169:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 170:./tmk_core/common/action_util.c ****     }
 171:./tmk_core/common/action_util.c **** }
 172:./tmk_core/common/action_util.c **** 
 173:./tmk_core/common/action_util.c **** 
 174:./tmk_core/common/action_util.c **** /* modifier */
 175:./tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 176:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 177:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 178:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 179:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 180:./tmk_core/common/action_util.c **** 
 181:./tmk_core/common/action_util.c **** /* weak modifier */
 182:./tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 183:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 184:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 185:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 186:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 187:./tmk_core/common/action_util.c **** 
 188:./tmk_core/common/action_util.c **** /* macro modifier */
 189:./tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 190:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 191:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 192:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 193:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 194:./tmk_core/common/action_util.c **** 
 195:./tmk_core/common/action_util.c **** /* Oneshot modifier */
 196:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 197:./tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 198:./tmk_core/common/action_util.c **** {
 199:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 200:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 201:./tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 202:./tmk_core/common/action_util.c **** #endif
 203:./tmk_core/common/action_util.c **** }
 204:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 205:./tmk_core/common/action_util.c **** {
 206:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 207:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 208:./tmk_core/common/action_util.c ****     oneshot_time = 0;
 209:./tmk_core/common/action_util.c **** #endif
 210:./tmk_core/common/action_util.c **** }
 211:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 212:./tmk_core/common/action_util.c **** {
 213:./tmk_core/common/action_util.c ****     return oneshot_mods;
 214:./tmk_core/common/action_util.c **** }
 215:./tmk_core/common/action_util.c **** #endif
 216:./tmk_core/common/action_util.c **** 
 217:./tmk_core/common/action_util.c **** /*
 218:./tmk_core/common/action_util.c ****  * inspect keyboard state
 219:./tmk_core/common/action_util.c ****  */
 220:./tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 221:./tmk_core/common/action_util.c **** {
 222:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 223:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 224:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 225:./tmk_core/common/action_util.c ****             cnt++;
 226:./tmk_core/common/action_util.c ****     }
 227:./tmk_core/common/action_util.c ****     return cnt;
 228:./tmk_core/common/action_util.c **** }
 229:./tmk_core/common/action_util.c **** 
 230:./tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 231:./tmk_core/common/action_util.c **** {
 232:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 233:./tmk_core/common/action_util.c **** }
 234:./tmk_core/common/action_util.c **** 
 235:./tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 236:./tmk_core/common/action_util.c **** {
 237:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 238:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 239:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 240:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 241:./tmk_core/common/action_util.c ****             ;
 242:./tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 243:./tmk_core/common/action_util.c ****     }
 244:./tmk_core/common/action_util.c **** #endif
 245:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 246:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 247:./tmk_core/common/action_util.c ****     do {
 248:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 249:./tmk_core/common/action_util.c ****             break;
 250:./tmk_core/common/action_util.c ****         }
 251:./tmk_core/common/action_util.c ****         i = RO_INC(i);
 252:./tmk_core/common/action_util.c ****     } while (i != cb_tail);
 253:./tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 254:./tmk_core/common/action_util.c **** #else
 255:./tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 256:./tmk_core/common/action_util.c **** #endif
 257:./tmk_core/common/action_util.c **** }
 258:./tmk_core/common/action_util.c **** 
 259:./tmk_core/common/action_util.c **** 
 260:./tmk_core/common/action_util.c **** 
 261:./tmk_core/common/action_util.c **** /* local functions */
 262:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 263:./tmk_core/common/action_util.c **** {
 264:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 265:./tmk_core/common/action_util.c ****     int8_t i = cb_head;
 266:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 267:./tmk_core/common/action_util.c ****     if (cb_count) {
 268:./tmk_core/common/action_util.c ****         do {
 269:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 270:./tmk_core/common/action_util.c ****                 return;
 271:./tmk_core/common/action_util.c ****             }
 272:./tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 273:./tmk_core/common/action_util.c ****                 empty = i;
 274:./tmk_core/common/action_util.c ****             }
 275:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 276:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 277:./tmk_core/common/action_util.c ****         if (i == cb_tail) {
 278:./tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 279:./tmk_core/common/action_util.c ****                 // buffer is full
 280:./tmk_core/common/action_util.c ****                 if (empty == -1) {
 281:./tmk_core/common/action_util.c ****                     // pop head when has no empty space
 282:./tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 283:./tmk_core/common/action_util.c ****                     cb_count--;
 284:./tmk_core/common/action_util.c ****                 }
 285:./tmk_core/common/action_util.c ****                 else {
 286:./tmk_core/common/action_util.c ****                     // left shift when has empty space
 287:./tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 288:./tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 289:./tmk_core/common/action_util.c ****                     do {
 290:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 291:./tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 292:./tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 293:./tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 294:./tmk_core/common/action_util.c ****                         }
 295:./tmk_core/common/action_util.c ****                         else {
 296:./tmk_core/common/action_util.c ****                             offset++;
 297:./tmk_core/common/action_util.c ****                         }
 298:./tmk_core/common/action_util.c ****                         i = RO_INC(i);
 299:./tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 300:./tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 301:./tmk_core/common/action_util.c ****                 }
 302:./tmk_core/common/action_util.c ****             }
 303:./tmk_core/common/action_util.c ****         }
 304:./tmk_core/common/action_util.c ****     }
 305:./tmk_core/common/action_util.c ****     // add to tail
 306:./tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 307:./tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 308:./tmk_core/common/action_util.c ****     cb_count++;
 309:./tmk_core/common/action_util.c **** #else
 310:./tmk_core/common/action_util.c ****     int8_t i = 0;
 311:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 312:./tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 313:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 314:./tmk_core/common/action_util.c ****             break;
 315:./tmk_core/common/action_util.c ****         }
 316:./tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 317:./tmk_core/common/action_util.c ****             empty = i;
 318:./tmk_core/common/action_util.c ****         }
 319:./tmk_core/common/action_util.c ****     }
 320:./tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 321:./tmk_core/common/action_util.c ****         if (empty != -1) {
 322:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 323:./tmk_core/common/action_util.c ****         }
 324:./tmk_core/common/action_util.c ****     }
 325:./tmk_core/common/action_util.c **** #endif
 326:./tmk_core/common/action_util.c **** }
 327:./tmk_core/common/action_util.c **** 
 328:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 329:./tmk_core/common/action_util.c **** {
 330:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 331:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 332:./tmk_core/common/action_util.c ****     if (cb_count) {
 333:./tmk_core/common/action_util.c ****         do {
 334:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 335:./tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 336:./tmk_core/common/action_util.c ****                 cb_count--;
 337:./tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 338:./tmk_core/common/action_util.c ****                     // reset head and tail
 339:./tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 340:./tmk_core/common/action_util.c ****                 }
 341:./tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 342:./tmk_core/common/action_util.c ****                     // left shift when next to tail
 343:./tmk_core/common/action_util.c ****                     do {
 344:./tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 345:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 346:./tmk_core/common/action_util.c ****                             break;
 347:./tmk_core/common/action_util.c ****                         }
 348:./tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 349:./tmk_core/common/action_util.c ****                 }
 350:./tmk_core/common/action_util.c ****                 break;
 351:./tmk_core/common/action_util.c ****             }
 352:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 353:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 354:./tmk_core/common/action_util.c ****     }
 355:./tmk_core/common/action_util.c **** #else
 356:./tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 357:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 358:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 359:./tmk_core/common/action_util.c ****         }
 360:./tmk_core/common/action_util.c ****     }
 361:./tmk_core/common/action_util.c **** #endif
 362:./tmk_core/common/action_util.c **** }
 363:./tmk_core/common/action_util.c **** 
 364:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 365:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 366:./tmk_core/common/action_util.c **** {
 367:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 254               		.loc 1 367 0 is_stmt 1
 255 0010 E82F      		mov r30,r24
 256 0012 E695      		lsr r30
 257 0014 E695      		lsr r30
 258 0016 E695      		lsr r30
 259 0018 EF31      		cpi r30,lo8(31)
 260 001a 01F0      		breq .L12
 368:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 261               		.loc 1 368 0
 262 001c 2091 0000 		lds r18,keyboard_report
 263 0020 3091 0000 		lds r19,keyboard_report+1
 264 0024 E20F      		add r30,r18
 265 0026 F32F      		mov r31,r19
 266 0028 F11D      		adc r31,__zero_reg__
 267 002a 8770      		andi r24,lo8(7)
 268               	.LVL11:
 269 002c 21E0      		ldi r18,lo8(1)
 270 002e 30E0      		ldi r19,0
 271 0030 00C0      		rjmp 2f
 272               		1:
 273 0032 220F      		lsl r18
 274               		2:
 275 0034 8A95      		dec r24
 276 0036 02F4      		brpl 1b
 277 0038 8181      		ldd r24,Z+1
 278 003a 822B      		or r24,r18
 279 003c 8183      		std Z+1,r24
 280 003e 0895      		ret
 281               	.LVL12:
 282               	.L13:
 283               	.LBE17:
 284               	.LBE16:
 285               	.LBB18:
 286               	.LBB19:
 313:./tmk_core/common/action_util.c ****             break;
 287               		.loc 1 313 0
 288 0040 2091 0000 		lds r18,keyboard_report
 289 0044 3091 0000 		lds r19,keyboard_report+1
 290 0048 F901      		movw r30,r18
 291 004a 3296      		adiw r30,2
 292 004c 9FEF      		ldi r25,lo8(-1)
 293 004e 40E0      		ldi r20,0
 294               	.L16:
 295               	.LVL13:
 296 0050 5191      		ld r21,Z+
 297 0052 8517      		cp r24,r21
 298 0054 01F0      		breq .L12
 316:./tmk_core/common/action_util.c ****             empty = i;
 299               		.loc 1 316 0
 300 0056 9F3F      		cpi r25,lo8(-1)
 301 0058 01F4      		brne .L15
 302 005a 5111      		cpse r21,__zero_reg__
 303 005c 00C0      		rjmp .L15
 304 005e 942F      		mov r25,r20
 305               	.LVL14:
 306               	.L15:
 307 0060 4F5F      		subi r20,lo8(-(1))
 308               	.LVL15:
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 309               		.loc 1 312 0
 310 0062 4E31      		cpi r20,lo8(30)
 311 0064 01F4      		brne .L16
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 312               		.loc 1 321 0
 313 0066 9F3F      		cpi r25,lo8(-1)
 314 0068 01F4      		brne .L18
 315               	.LVL16:
 316               	.L12:
 317               	/* epilogue start */
 318               	.LBE19:
 319               	.LBE18:
 152:./tmk_core/common/action_util.c **** 
 320               		.loc 1 152 0
 321 006a 0895      		ret
 322               	.LVL17:
 323               	.L18:
 324               	.LBB21:
 325               	.LBB20:
 322:./tmk_core/common/action_util.c ****         }
 326               		.loc 1 322 0
 327 006c 290F      		add r18,r25
 328 006e 311D      		adc r19,__zero_reg__
 329 0070 97FD      		sbrc r25,7
 330 0072 3A95      		dec r19
 331 0074 F901      		movw r30,r18
 332 0076 8283      		std Z+2,r24
 333 0078 0895      		ret
 334               	.LBE20:
 335               	.LBE21:
 336               		.cfi_endproc
 337               	.LFE113:
 339               		.section	.text.del_key,"ax",@progbits
 340               	.global	del_key
 342               	del_key:
 343               	.LFB114:
 155:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 344               		.loc 1 155 0
 345               		.cfi_startproc
 346               	.LVL18:
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 351               		.loc 1 157 0
 352 0000 9091 0000 		lds r25,keyboard_protocol
 353 0004 9923      		tst r25
 354 0006 01F0      		breq .L29
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 355               		.loc 1 157 0 is_stmt 0 discriminator 1
 356 0008 9091 0000 		lds r25,keymap_config
 357 000c 97FF      		sbrs r25,7
 358 000e 00C0      		rjmp .L29
 359               	.LVL19:
 360               	.LBB27:
 361               	.LBB28:
 369:./tmk_core/common/action_util.c ****     } else {
 370:./tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 371:./tmk_core/common/action_util.c ****     }
 372:./tmk_core/common/action_util.c **** }
 373:./tmk_core/common/action_util.c **** 
 374:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 375:./tmk_core/common/action_util.c **** {
 376:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 362               		.loc 1 376 0 is_stmt 1
 363 0010 E82F      		mov r30,r24
 364 0012 E695      		lsr r30
 365 0014 E695      		lsr r30
 366 0016 E695      		lsr r30
 367 0018 EF31      		cpi r30,lo8(31)
 368 001a 01F0      		breq .L28
 377:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 369               		.loc 1 377 0
 370 001c 2091 0000 		lds r18,keyboard_report
 371 0020 3091 0000 		lds r19,keyboard_report+1
 372 0024 E20F      		add r30,r18
 373 0026 F32F      		mov r31,r19
 374 0028 F11D      		adc r31,__zero_reg__
 375 002a 282F      		mov r18,r24
 376 002c 2770      		andi r18,lo8(7)
 377 002e 81E0      		ldi r24,lo8(1)
 378 0030 90E0      		ldi r25,0
 379               	.LVL20:
 380 0032 00C0      		rjmp 2f
 381               		1:
 382 0034 880F      		lsl r24
 383               		2:
 384 0036 2A95      		dec r18
 385 0038 02F4      		brpl 1b
 386 003a 8095      		com r24
 387 003c 9181      		ldd r25,Z+1
 388 003e 8923      		and r24,r25
 389 0040 8183      		std Z+1,r24
 390 0042 0895      		ret
 391               	.LVL21:
 392               	.L29:
 393               	.LBE28:
 394               	.LBE27:
 395               	.LBB29:
 396               	.LBB30:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 397               		.loc 1 357 0
 398 0044 2091 0000 		lds r18,keyboard_report
 399 0048 3091 0000 		lds r19,keyboard_report+1
 400 004c F901      		movw r30,r18
 401 004e 3296      		adiw r30,2
 402 0050 205E      		subi r18,-32
 403 0052 3F4F      		sbci r19,-1
 404               	.L33:
 405               	.LVL22:
 406 0054 9191      		ld r25,Z+
 407               	.LVL23:
 408 0056 8913      		cpse r24,r25
 409 0058 00C0      		rjmp .L32
 358:./tmk_core/common/action_util.c ****         }
 410               		.loc 1 358 0
 411 005a DF01      		movw r26,r30
 412 005c 1197      		sbiw r26,1
 413 005e 1C92      		st X,__zero_reg__
 414               	.L32:
 415               	.LVL24:
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 416               		.loc 1 356 0
 417 0060 E217      		cp r30,r18
 418 0062 F307      		cpc r31,r19
 419 0064 01F4      		brne .L33
 420               	.LVL25:
 421               	.L28:
 422               	/* epilogue start */
 423               	.LBE30:
 424               	.LBE29:
 163:./tmk_core/common/action_util.c **** 
 425               		.loc 1 163 0
 426 0066 0895      		ret
 427               		.cfi_endproc
 428               	.LFE114:
 430               		.section	.text.clear_keys,"ax",@progbits
 431               	.global	clear_keys
 433               	clear_keys:
 434               	.LFB115:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 435               		.loc 1 166 0
 436               		.cfi_startproc
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 439               	/* stack size = 0 */
 440               	.L__stack_usage = 0
 441               	.LVL26:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 442               		.loc 1 166 0
 443 0000 81E0      		ldi r24,lo8(1)
 444 0002 90E0      		ldi r25,0
 445               	.LVL27:
 446               	.L42:
 447               	.LBB31:
 169:./tmk_core/common/action_util.c ****     }
 448               		.loc 1 169 0 discriminator 3
 449 0004 E091 0000 		lds r30,keyboard_report
 450 0008 F091 0000 		lds r31,keyboard_report+1
 451 000c E80F      		add r30,r24
 452 000e F91F      		adc r31,r25
 453 0010 1082      		st Z,__zero_reg__
 454               	.LVL28:
 455 0012 0196      		adiw r24,1
 456               	.LVL29:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 457               		.loc 1 168 0 discriminator 3
 458 0014 8032      		cpi r24,32
 459 0016 9105      		cpc r25,__zero_reg__
 460 0018 01F4      		brne .L42
 461               	/* epilogue start */
 462               	.LBE31:
 171:./tmk_core/common/action_util.c **** 
 463               		.loc 1 171 0
 464 001a 0895      		ret
 465               		.cfi_endproc
 466               	.LFE115:
 468               		.section	.text.get_mods,"ax",@progbits
 469               	.global	get_mods
 471               	get_mods:
 472               	.LFB116:
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 473               		.loc 1 175 0
 474               		.cfi_startproc
 475               	/* prologue: function */
 476               	/* frame size = 0 */
 477               	/* stack size = 0 */
 478               	.L__stack_usage = 0
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 479               		.loc 1 175 0
 480 0000 8091 0000 		lds r24,real_mods
 481               	/* epilogue start */
 482 0004 0895      		ret
 483               		.cfi_endproc
 484               	.LFE116:
 486               		.section	.text.add_mods,"ax",@progbits
 487               	.global	add_mods
 489               	add_mods:
 490               	.LFB117:
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 491               		.loc 1 176 0
 492               		.cfi_startproc
 493               	.LVL30:
 494               	/* prologue: function */
 495               	/* frame size = 0 */
 496               	/* stack size = 0 */
 497               	.L__stack_usage = 0
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 498               		.loc 1 176 0
 499 0000 9091 0000 		lds r25,real_mods
 500 0004 892B      		or r24,r25
 501               	.LVL31:
 502 0006 8093 0000 		sts real_mods,r24
 503               	/* epilogue start */
 504 000a 0895      		ret
 505               		.cfi_endproc
 506               	.LFE117:
 508               		.section	.text.del_mods,"ax",@progbits
 509               	.global	del_mods
 511               	del_mods:
 512               	.LFB118:
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 513               		.loc 1 177 0
 514               		.cfi_startproc
 515               	.LVL32:
 516               	/* prologue: function */
 517               	/* frame size = 0 */
 518               	/* stack size = 0 */
 519               	.L__stack_usage = 0
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 520               		.loc 1 177 0
 521 0000 982F      		mov r25,r24
 522 0002 9095      		com r25
 523 0004 8091 0000 		lds r24,real_mods
 524               	.LVL33:
 525 0008 8923      		and r24,r25
 526 000a 8093 0000 		sts real_mods,r24
 527               	/* epilogue start */
 528 000e 0895      		ret
 529               		.cfi_endproc
 530               	.LFE118:
 532               		.section	.text.set_mods,"ax",@progbits
 533               	.global	set_mods
 535               	set_mods:
 536               	.LFB119:
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 537               		.loc 1 178 0
 538               		.cfi_startproc
 539               	.LVL34:
 540               	/* prologue: function */
 541               	/* frame size = 0 */
 542               	/* stack size = 0 */
 543               	.L__stack_usage = 0
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 544               		.loc 1 178 0
 545 0000 8093 0000 		sts real_mods,r24
 546               	/* epilogue start */
 547 0004 0895      		ret
 548               		.cfi_endproc
 549               	.LFE119:
 551               		.section	.text.clear_mods,"ax",@progbits
 552               	.global	clear_mods
 554               	clear_mods:
 555               	.LFB120:
 179:./tmk_core/common/action_util.c **** 
 556               		.loc 1 179 0
 557               		.cfi_startproc
 558               	/* prologue: function */
 559               	/* frame size = 0 */
 560               	/* stack size = 0 */
 561               	.L__stack_usage = 0
 179:./tmk_core/common/action_util.c **** 
 562               		.loc 1 179 0
 563 0000 1092 0000 		sts real_mods,__zero_reg__
 564               	/* epilogue start */
 565 0004 0895      		ret
 566               		.cfi_endproc
 567               	.LFE120:
 569               		.section	.text.get_weak_mods,"ax",@progbits
 570               	.global	get_weak_mods
 572               	get_weak_mods:
 573               	.LFB121:
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 574               		.loc 1 182 0
 575               		.cfi_startproc
 576               	/* prologue: function */
 577               	/* frame size = 0 */
 578               	/* stack size = 0 */
 579               	.L__stack_usage = 0
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 580               		.loc 1 182 0
 581 0000 8091 0000 		lds r24,weak_mods
 582               	/* epilogue start */
 583 0004 0895      		ret
 584               		.cfi_endproc
 585               	.LFE121:
 587               		.section	.text.add_weak_mods,"ax",@progbits
 588               	.global	add_weak_mods
 590               	add_weak_mods:
 591               	.LFB122:
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 592               		.loc 1 183 0
 593               		.cfi_startproc
 594               	.LVL35:
 595               	/* prologue: function */
 596               	/* frame size = 0 */
 597               	/* stack size = 0 */
 598               	.L__stack_usage = 0
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 599               		.loc 1 183 0
 600 0000 9091 0000 		lds r25,weak_mods
 601 0004 892B      		or r24,r25
 602               	.LVL36:
 603 0006 8093 0000 		sts weak_mods,r24
 604               	/* epilogue start */
 605 000a 0895      		ret
 606               		.cfi_endproc
 607               	.LFE122:
 609               		.section	.text.del_weak_mods,"ax",@progbits
 610               	.global	del_weak_mods
 612               	del_weak_mods:
 613               	.LFB123:
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 614               		.loc 1 184 0
 615               		.cfi_startproc
 616               	.LVL37:
 617               	/* prologue: function */
 618               	/* frame size = 0 */
 619               	/* stack size = 0 */
 620               	.L__stack_usage = 0
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 621               		.loc 1 184 0
 622 0000 982F      		mov r25,r24
 623 0002 9095      		com r25
 624 0004 8091 0000 		lds r24,weak_mods
 625               	.LVL38:
 626 0008 8923      		and r24,r25
 627 000a 8093 0000 		sts weak_mods,r24
 628               	/* epilogue start */
 629 000e 0895      		ret
 630               		.cfi_endproc
 631               	.LFE123:
 633               		.section	.text.set_weak_mods,"ax",@progbits
 634               	.global	set_weak_mods
 636               	set_weak_mods:
 637               	.LFB124:
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 638               		.loc 1 185 0
 639               		.cfi_startproc
 640               	.LVL39:
 641               	/* prologue: function */
 642               	/* frame size = 0 */
 643               	/* stack size = 0 */
 644               	.L__stack_usage = 0
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 645               		.loc 1 185 0
 646 0000 8093 0000 		sts weak_mods,r24
 647               	/* epilogue start */
 648 0004 0895      		ret
 649               		.cfi_endproc
 650               	.LFE124:
 652               		.section	.text.clear_weak_mods,"ax",@progbits
 653               	.global	clear_weak_mods
 655               	clear_weak_mods:
 656               	.LFB125:
 186:./tmk_core/common/action_util.c **** 
 657               		.loc 1 186 0
 658               		.cfi_startproc
 659               	/* prologue: function */
 660               	/* frame size = 0 */
 661               	/* stack size = 0 */
 662               	.L__stack_usage = 0
 186:./tmk_core/common/action_util.c **** 
 663               		.loc 1 186 0
 664 0000 1092 0000 		sts weak_mods,__zero_reg__
 665               	/* epilogue start */
 666 0004 0895      		ret
 667               		.cfi_endproc
 668               	.LFE125:
 670               		.section	.text.get_macro_mods,"ax",@progbits
 671               	.global	get_macro_mods
 673               	get_macro_mods:
 674               	.LFB126:
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 675               		.loc 1 189 0
 676               		.cfi_startproc
 677               	/* prologue: function */
 678               	/* frame size = 0 */
 679               	/* stack size = 0 */
 680               	.L__stack_usage = 0
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 681               		.loc 1 189 0
 682 0000 8091 0000 		lds r24,macro_mods
 683               	/* epilogue start */
 684 0004 0895      		ret
 685               		.cfi_endproc
 686               	.LFE126:
 688               		.section	.text.add_macro_mods,"ax",@progbits
 689               	.global	add_macro_mods
 691               	add_macro_mods:
 692               	.LFB127:
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 693               		.loc 1 190 0
 694               		.cfi_startproc
 695               	.LVL40:
 696               	/* prologue: function */
 697               	/* frame size = 0 */
 698               	/* stack size = 0 */
 699               	.L__stack_usage = 0
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 700               		.loc 1 190 0
 701 0000 9091 0000 		lds r25,macro_mods
 702 0004 892B      		or r24,r25
 703               	.LVL41:
 704 0006 8093 0000 		sts macro_mods,r24
 705               	/* epilogue start */
 706 000a 0895      		ret
 707               		.cfi_endproc
 708               	.LFE127:
 710               		.section	.text.del_macro_mods,"ax",@progbits
 711               	.global	del_macro_mods
 713               	del_macro_mods:
 714               	.LFB128:
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 715               		.loc 1 191 0
 716               		.cfi_startproc
 717               	.LVL42:
 718               	/* prologue: function */
 719               	/* frame size = 0 */
 720               	/* stack size = 0 */
 721               	.L__stack_usage = 0
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 722               		.loc 1 191 0
 723 0000 982F      		mov r25,r24
 724 0002 9095      		com r25
 725 0004 8091 0000 		lds r24,macro_mods
 726               	.LVL43:
 727 0008 8923      		and r24,r25
 728 000a 8093 0000 		sts macro_mods,r24
 729               	/* epilogue start */
 730 000e 0895      		ret
 731               		.cfi_endproc
 732               	.LFE128:
 734               		.section	.text.set_macro_mods,"ax",@progbits
 735               	.global	set_macro_mods
 737               	set_macro_mods:
 738               	.LFB129:
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 739               		.loc 1 192 0
 740               		.cfi_startproc
 741               	.LVL44:
 742               	/* prologue: function */
 743               	/* frame size = 0 */
 744               	/* stack size = 0 */
 745               	.L__stack_usage = 0
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 746               		.loc 1 192 0
 747 0000 8093 0000 		sts macro_mods,r24
 748               	/* epilogue start */
 749 0004 0895      		ret
 750               		.cfi_endproc
 751               	.LFE129:
 753               		.section	.text.clear_macro_mods,"ax",@progbits
 754               	.global	clear_macro_mods
 756               	clear_macro_mods:
 757               	.LFB130:
 193:./tmk_core/common/action_util.c **** 
 758               		.loc 1 193 0
 759               		.cfi_startproc
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 0 */
 763               	.L__stack_usage = 0
 193:./tmk_core/common/action_util.c **** 
 764               		.loc 1 193 0
 765 0000 1092 0000 		sts macro_mods,__zero_reg__
 766               	/* epilogue start */
 767 0004 0895      		ret
 768               		.cfi_endproc
 769               	.LFE130:
 771               		.section	.text.set_oneshot_mods,"ax",@progbits
 772               	.global	set_oneshot_mods
 774               	set_oneshot_mods:
 775               	.LFB131:
 198:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 776               		.loc 1 198 0
 777               		.cfi_startproc
 778               	.LVL45:
 779               	/* prologue: function */
 780               	/* frame size = 0 */
 781               	/* stack size = 0 */
 782               	.L__stack_usage = 0
 199:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 783               		.loc 1 199 0
 784 0000 8093 0000 		sts oneshot_mods,r24
 785               	/* epilogue start */
 203:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 786               		.loc 1 203 0
 787 0004 0895      		ret
 788               		.cfi_endproc
 789               	.LFE131:
 791               		.section	.text.clear_oneshot_mods,"ax",@progbits
 792               	.global	clear_oneshot_mods
 794               	clear_oneshot_mods:
 795               	.LFB132:
 205:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 796               		.loc 1 205 0
 797               		.cfi_startproc
 798               	/* prologue: function */
 799               	/* frame size = 0 */
 800               	/* stack size = 0 */
 801               	.L__stack_usage = 0
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 802               		.loc 1 206 0
 803 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 804               	/* epilogue start */
 210:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 805               		.loc 1 210 0
 806 0004 0895      		ret
 807               		.cfi_endproc
 808               	.LFE132:
 810               		.section	.text.get_oneshot_mods,"ax",@progbits
 811               	.global	get_oneshot_mods
 813               	get_oneshot_mods:
 814               	.LFB133:
 212:./tmk_core/common/action_util.c ****     return oneshot_mods;
 815               		.loc 1 212 0
 816               		.cfi_startproc
 817               	/* prologue: function */
 818               	/* frame size = 0 */
 819               	/* stack size = 0 */
 820               	.L__stack_usage = 0
 214:./tmk_core/common/action_util.c **** #endif
 821               		.loc 1 214 0
 822 0000 8091 0000 		lds r24,oneshot_mods
 823               	/* epilogue start */
 824 0004 0895      		ret
 825               		.cfi_endproc
 826               	.LFE133:
 828               		.section	.text.has_anykey,"ax",@progbits
 829               	.global	has_anykey
 831               	has_anykey:
 832               	.LFB134:
 221:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 833               		.loc 1 221 0
 834               		.cfi_startproc
 835               	/* prologue: function */
 836               	/* frame size = 0 */
 837               	/* stack size = 0 */
 838               	.L__stack_usage = 0
 839               	.LVL46:
 840               	.LBB32:
 224:./tmk_core/common/action_util.c ****             cnt++;
 841               		.loc 1 224 0
 842 0000 2091 0000 		lds r18,keyboard_report
 843 0004 3091 0000 		lds r19,keyboard_report+1
 844 0008 F901      		movw r30,r18
 845 000a 3196      		adiw r30,1
 846 000c 205E      		subi r18,-32
 847 000e 3F4F      		sbci r19,-1
 848               	.LBE32:
 222:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 849               		.loc 1 222 0
 850 0010 80E0      		ldi r24,0
 851               	.LVL47:
 852               	.L64:
 853               	.LBB33:
 224:./tmk_core/common/action_util.c ****             cnt++;
 854               		.loc 1 224 0
 855 0012 9191      		ld r25,Z+
 856               	.LVL48:
 857 0014 9111      		cpse r25,__zero_reg__
 225:./tmk_core/common/action_util.c ****     }
 858               		.loc 1 225 0
 859 0016 8F5F      		subi r24,lo8(-(1))
 860               	.LVL49:
 861               	.L63:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 862               		.loc 1 223 0 discriminator 2
 863 0018 E217      		cp r30,r18
 864 001a F307      		cpc r31,r19
 865 001c 01F4      		brne .L64
 866               	/* epilogue start */
 867               	.LBE33:
 228:./tmk_core/common/action_util.c **** 
 868               		.loc 1 228 0
 869 001e 0895      		ret
 870               		.cfi_endproc
 871               	.LFE134:
 873               		.section	.text.send_keyboard_report,"ax",@progbits
 874               	.global	send_keyboard_report
 876               	send_keyboard_report:
 877               	.LFB112:
 120:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 878               		.loc 1 120 0
 879               		.cfi_startproc
 880               	/* prologue: function */
 881               	/* frame size = 0 */
 882               	/* stack size = 0 */
 883               	.L__stack_usage = 0
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 884               		.loc 1 121 0
 885 0000 E091 0000 		lds r30,keyboard_report
 886 0004 F091 0000 		lds r31,keyboard_report+1
 887 0008 8091 0000 		lds r24,real_mods
 888 000c 8083      		st Z,r24
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 889               		.loc 1 122 0
 890 000e E091 0000 		lds r30,keyboard_report
 891 0012 F091 0000 		lds r31,keyboard_report+1
 892 0016 8081      		ld r24,Z
 893 0018 9091 0000 		lds r25,weak_mods
 894 001c 892B      		or r24,r25
 895 001e 8083      		st Z,r24
 123:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 896               		.loc 1 123 0
 897 0020 E091 0000 		lds r30,keyboard_report
 898 0024 F091 0000 		lds r31,keyboard_report+1
 899 0028 8081      		ld r24,Z
 900 002a 9091 0000 		lds r25,macro_mods
 901 002e 892B      		or r24,r25
 902 0030 8083      		st Z,r24
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 903               		.loc 1 125 0
 904 0032 9091 0000 		lds r25,oneshot_mods
 905 0036 9923      		tst r25
 906 0038 01F0      		breq .L71
 132:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 907               		.loc 1 132 0
 908 003a E091 0000 		lds r30,keyboard_report
 909 003e F091 0000 		lds r31,keyboard_report+1
 910 0042 8081      		ld r24,Z
 911 0044 892B      		or r24,r25
 912 0046 8083      		st Z,r24
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 913               		.loc 1 133 0
 914 0048 0E94 0000 		call has_anykey
 915               	.LVL50:
 916 004c 8111      		cpse r24,__zero_reg__
 917               	.LBB36:
 918               	.LBB37:
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 919               		.loc 1 206 0
 920 004e 1092 0000 		sts oneshot_mods,__zero_reg__
 921               	.L71:
 922               	.LBE37:
 923               	.LBE36:
 139:./tmk_core/common/action_util.c **** }
 924               		.loc 1 139 0
 925 0052 8091 0000 		lds r24,keyboard_report
 926 0056 9091 0000 		lds r25,keyboard_report+1
 927 005a 0C94 0000 		jmp host_keyboard_send
 928               	.LVL51:
 929               		.cfi_endproc
 930               	.LFE112:
 932               		.section	.text.has_anymod,"ax",@progbits
 933               	.global	has_anymod
 935               	has_anymod:
 936               	.LFB135:
 231:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 937               		.loc 1 231 0
 938               		.cfi_startproc
 939               	/* prologue: function */
 940               	/* frame size = 0 */
 941               	/* stack size = 0 */
 942               	.L__stack_usage = 0
 232:./tmk_core/common/action_util.c **** }
 943               		.loc 1 232 0
 944 0000 8091 0000 		lds r24,real_mods
 945 0004 0C94 0000 		jmp bitpop
 946               	.LVL52:
 947               		.cfi_endproc
 948               	.LFE135:
 950               		.section	.text.get_first_key,"ax",@progbits
 951               	.global	get_first_key
 953               	get_first_key:
 954               	.LFB136:
 236:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 955               		.loc 1 236 0
 956               		.cfi_startproc
 957 0000 CF93      		push r28
 958               	.LCFI0:
 959               		.cfi_def_cfa_offset 3
 960               		.cfi_offset 28, -2
 961 0002 DF93      		push r29
 962               	.LCFI1:
 963               		.cfi_def_cfa_offset 4
 964               		.cfi_offset 29, -3
 965               	/* prologue: function */
 966               	/* frame size = 0 */
 967               	/* stack size = 2 */
 968               	.L__stack_usage = 2
 969 0004 E091 0000 		lds r30,keyboard_report
 970 0008 F091 0000 		lds r31,keyboard_report+1
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 971               		.loc 1 238 0
 972 000c 8091 0000 		lds r24,keyboard_protocol
 973 0010 8823      		tst r24
 974 0012 01F0      		breq .L78
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 975               		.loc 1 238 0 is_stmt 0 discriminator 1
 976 0014 8091 0000 		lds r24,keymap_config
 977 0018 DF01      		movw r26,r30
 978 001a 1196      		adiw r26,1
 979               	.LBB38:
 239:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 980               		.loc 1 239 0 is_stmt 1 discriminator 1
 981 001c C0E0      		ldi r28,0
 982               	.LBE38:
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 983               		.loc 1 238 0 discriminator 1
 984 001e 87FD      		sbrc r24,7
 985 0020 00C0      		rjmp .L79
 986               	.L78:
 255:./tmk_core/common/action_util.c **** #endif
 987               		.loc 1 255 0
 988 0022 8281      		ldd r24,Z+2
 989 0024 00C0      		rjmp .L77
 990               	.LVL53:
 991               	.L81:
 992               	.LBB39:
 240:./tmk_core/common/action_util.c ****             ;
 993               		.loc 1 240 0 discriminator 3
 994 0026 CF5F      		subi r28,lo8(-(1))
 995               	.LVL54:
 996 0028 CF31      		cpi r28,lo8(31)
 997 002a 01F0      		breq .L80
 998               	.LVL55:
 999               	.L79:
 240:./tmk_core/common/action_util.c ****             ;
 1000               		.loc 1 240 0 is_stmt 0 discriminator 2
 1001 002c 8D91      		ld r24,X+
 1002 002e 8823      		tst r24
 1003 0030 01F0      		breq .L81
 1004               	.L80:
 242:./tmk_core/common/action_util.c ****     }
 1005               		.loc 1 242 0 is_stmt 1
 1006 0032 D0E0      		ldi r29,0
 1007 0034 EC0F      		add r30,r28
 1008 0036 FD1F      		adc r31,r29
 1009 0038 8181      		ldd r24,Z+1
 1010 003a 0E94 0000 		call biton
 1011               	.LVL56:
 1012 003e 93E0      		ldi r25,3
 1013               		1:
 1014 0040 CC0F      		lsl r28
 1015 0042 DD1F      		rol r29
 1016 0044 9A95      		dec r25
 1017 0046 01F4      		brne 1b
 1018               	.LVL57:
 1019 0048 8C2B      		or r24,r28
 1020               	.L77:
 1021               	/* epilogue start */
 1022               	.LBE39:
 257:./tmk_core/common/action_util.c **** 
 1023               		.loc 1 257 0
 1024 004a DF91      		pop r29
 1025 004c CF91      		pop r28
 1026 004e 0895      		ret
 1027               		.cfi_endproc
 1028               	.LFE136:
 1030               		.section	.bss.oneshot_layer_data,"aw",@nobits
 1033               	oneshot_layer_data:
 1034 0000 00        		.zero	1
 1035               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 1038               	oneshot_locked_mods:
 1039 0000 00        		.zero	1
 1040               		.section	.bss.oneshot_mods,"aw",@nobits
 1043               	oneshot_mods:
 1044 0000 00        		.zero	1
 1045               	.global	keyboard_report
 1046               		.section	.data.keyboard_report,"aw",@progbits
 1049               	keyboard_report:
 1050 0000 0000      		.word	__compound_literal.0
 1051               		.section	.bss.__compound_literal.0,"aw",@nobits
 1054               	__compound_literal.0:
 1055 0000 0000 0000 		.zero	32
 1055      0000 0000 
 1055      0000 0000 
 1055      0000 0000 
 1055      0000 0000 
 1056               		.section	.bss.macro_mods,"aw",@nobits
 1059               	macro_mods:
 1060 0000 00        		.zero	1
 1061               		.section	.bss.weak_mods,"aw",@nobits
 1064               	weak_mods:
 1065 0000 00        		.zero	1
 1066               		.section	.bss.real_mods,"aw",@nobits
 1069               	real_mods:
 1070 0000 00        		.zero	1
 1071               		.text
 1072               	.Letext0:
 1073               		.file 2 "/usr/avr/include/stdint.h"
 1074               		.file 3 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1075               		.file 4 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1076               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1077               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1078               		.file 7 "/usr/avr/include/stdio.h"
 1079               		.file 8 "./tmk_core/common/report.h"
 1080               		.file 9 "./tmk_core/common/host.h"
 1081               		.file 10 "./tmk_core/common/debug.h"
 1082               		.file 11 "./tmk_core/common/action_util.h"
 1083               		.file 12 "./tmk_core/common/action_layer.h"
 1084               		.file 13 "./tmk_core/common/timer.h"
 1085               		.file 14 "./quantum/keycode_config.h"
 1086               		.file 15 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccvgHWiz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvgHWiz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvgHWiz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvgHWiz.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvgHWiz.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvgHWiz.s:13     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/ccvgHWiz.s:1038   .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/ccvgHWiz.s:32     .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/ccvgHWiz.s:51     .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/ccvgHWiz.s:69     .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/ccvgHWiz.s:1033   .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/ccvgHWiz.s:90     .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/ccvgHWiz.s:109    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/ccvgHWiz.s:135    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/ccvgHWiz.s:154    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/ccvgHWiz.s:205    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/ccvgHWiz.s:234    .text.add_key:0000000000000000 add_key
     /tmp/ccvgHWiz.s:1049   .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccvgHWiz.s:342    .text.del_key:0000000000000000 del_key
     /tmp/ccvgHWiz.s:433    .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccvgHWiz.s:471    .text.get_mods:0000000000000000 get_mods
     /tmp/ccvgHWiz.s:1069   .bss.real_mods:0000000000000000 real_mods
     /tmp/ccvgHWiz.s:489    .text.add_mods:0000000000000000 add_mods
     /tmp/ccvgHWiz.s:511    .text.del_mods:0000000000000000 del_mods
     /tmp/ccvgHWiz.s:535    .text.set_mods:0000000000000000 set_mods
     /tmp/ccvgHWiz.s:554    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccvgHWiz.s:572    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccvgHWiz.s:1064   .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccvgHWiz.s:590    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccvgHWiz.s:612    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccvgHWiz.s:636    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccvgHWiz.s:655    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccvgHWiz.s:673    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/ccvgHWiz.s:1059   .bss.macro_mods:0000000000000000 macro_mods
     /tmp/ccvgHWiz.s:691    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/ccvgHWiz.s:713    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/ccvgHWiz.s:737    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/ccvgHWiz.s:756    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/ccvgHWiz.s:774    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccvgHWiz.s:1043   .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccvgHWiz.s:794    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccvgHWiz.s:813    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/ccvgHWiz.s:831    .text.has_anykey:0000000000000000 has_anykey
     /tmp/ccvgHWiz.s:876    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccvgHWiz.s:935    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccvgHWiz.s:953    .text.get_first_key:0000000000000000 get_first_key
     /tmp/ccvgHWiz.s:1054   .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
layer_on
layer_off
keyboard_protocol
keymap_config
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
