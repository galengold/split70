   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  11               	.global	get_oneshot_locked_mods
  13               	get_oneshot_locked_mods:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action_util.c"
   1:./tmk_core/common/action_util.c **** /*
   2:./tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.c **** 
   4:./tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.c **** (at your option) any later version.
   8:./tmk_core/common/action_util.c **** 
   9:./tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.c **** 
  14:./tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.c **** */
  17:./tmk_core/common/action_util.c **** #include "host.h"
  18:./tmk_core/common/action_util.c **** #include "report.h"
  19:./tmk_core/common/action_util.c **** #include "debug.h"
  20:./tmk_core/common/action_util.c **** #include "action_util.h"
  21:./tmk_core/common/action_util.c **** #include "action_layer.h"
  22:./tmk_core/common/action_util.c **** #include "timer.h"
  23:./tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:./tmk_core/common/action_util.c **** 
  25:./tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:./tmk_core/common/action_util.c **** 
  27:./tmk_core/common/action_util.c **** 
  28:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  29:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  30:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  31:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  32:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  33:./tmk_core/common/action_util.c **** #endif
  34:./tmk_core/common/action_util.c **** 
  35:./tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  36:./tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  37:./tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  38:./tmk_core/common/action_util.c **** 
  39:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  40:./tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  41:./tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  42:./tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  43:./tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  44:./tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  45:./tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  46:./tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  47:./tmk_core/common/action_util.c **** #endif
  48:./tmk_core/common/action_util.c **** 
  49:./tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  50:./tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  51:./tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  52:./tmk_core/common/action_util.c **** 
  53:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  54:./tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  55:./tmk_core/common/action_util.c **** static int8_t oneshot_locked_mods = 0;
  56:./tmk_core/common/action_util.c **** int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 56 0
  23 0000 8091 0000 		lds r24,oneshot_locked_mods
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE103:
  28               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
  29               	.global	set_oneshot_locked_mods
  31               	set_oneshot_locked_mods:
  32               	.LFB104:
  57:./tmk_core/common/action_util.c **** void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
  33               		.loc 1 57 0
  34               		.cfi_startproc
  35               	.LVL0:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40               		.loc 1 57 0
  41 0000 8093 0000 		sts oneshot_locked_mods,r24
  42 0004 0895      		ret
  43               		.cfi_endproc
  44               	.LFE104:
  46               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
  47               	.global	clear_oneshot_locked_mods
  49               	clear_oneshot_locked_mods:
  50               	.LFB105:
  58:./tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
  51               		.loc 1 58 0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               		.loc 1 58 0
  58 0000 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  59 0004 0895      		ret
  60               		.cfi_endproc
  61               	.LFE105:
  63               		.section	.text.get_oneshot_layer,"ax",@progbits
  64               	.global	get_oneshot_layer
  66               	get_oneshot_layer:
  67               	.LFB106:
  59:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  60:./tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  61:./tmk_core/common/action_util.c **** inline bool has_oneshot_mods_timed_out() {
  62:./tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  63:./tmk_core/common/action_util.c **** }
  64:./tmk_core/common/action_util.c **** #endif
  65:./tmk_core/common/action_util.c **** #endif
  66:./tmk_core/common/action_util.c **** 
  67:./tmk_core/common/action_util.c **** /* oneshot layer */
  68:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  69:./tmk_core/common/action_util.c **** /* oneshot_layer_data bits
  70:./tmk_core/common/action_util.c **** * LLLL LSSS
  71:./tmk_core/common/action_util.c **** * where:
  72:./tmk_core/common/action_util.c **** *   L => are layer bits
  73:./tmk_core/common/action_util.c **** *   S => oneshot state bits
  74:./tmk_core/common/action_util.c **** */
  75:./tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  76:./tmk_core/common/action_util.c **** 
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
  68               		.loc 1 77 0
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74               		.loc 1 77 0
  75 0000 8091 0000 		lds r24,oneshot_layer_data
  76 0004 8595      		asr r24
  77 0006 8595      		asr r24
  78 0008 8595      		asr r24
  79 000a 0895      		ret
  80               		.cfi_endproc
  81               	.LFE106:
  83               		.section	.text.get_oneshot_layer_state,"ax",@progbits
  84               	.global	get_oneshot_layer_state
  86               	get_oneshot_layer_state:
  87               	.LFB107:
  78:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
  88               		.loc 1 78 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  94               		.loc 1 78 0
  95 0000 8091 0000 		lds r24,oneshot_layer_data
  96 0004 8770      		andi r24,lo8(7)
  97 0006 0895      		ret
  98               		.cfi_endproc
  99               	.LFE107:
 101               		.section	.text.set_oneshot_layer,"ax",@progbits
 102               	.global	set_oneshot_layer
 104               	set_oneshot_layer:
 105               	.LFB108:
  79:./tmk_core/common/action_util.c **** 
  80:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  81:./tmk_core/common/action_util.c **** static int16_t oneshot_layer_time = 0;
  82:./tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  83:./tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  84:./tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  85:./tmk_core/common/action_util.c **** }
  86:./tmk_core/common/action_util.c **** #endif
  87:./tmk_core/common/action_util.c **** 
  88:./tmk_core/common/action_util.c **** /* Oneshot layer */
  89:./tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
  90:./tmk_core/common/action_util.c **** {
 106               		.loc 1 90 0
 107               		.cfi_startproc
 108               	.LVL1:
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  91:./tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 113               		.loc 1 91 0
 114 0000 98E0      		ldi r25,lo8(8)
 115 0002 899F      		mul r24,r25
 116 0004 9001      		movw r18,r0
 117 0006 1124      		clr __zero_reg__
 118 0008 622B      		or r22,r18
 119               	.LVL2:
 120 000a 6093 0000 		sts oneshot_layer_data,r22
  92:./tmk_core/common/action_util.c ****     layer_on(layer);
 121               		.loc 1 92 0
 122 000e 0C94 0000 		jmp layer_on
 123               	.LVL3:
 124               		.cfi_endproc
 125               	.LFE108:
 127               		.section	.text.reset_oneshot_layer,"ax",@progbits
 128               	.global	reset_oneshot_layer
 130               	reset_oneshot_layer:
 131               	.LFB109:
  93:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  94:./tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
  95:./tmk_core/common/action_util.c **** #endif
  96:./tmk_core/common/action_util.c **** }
  97:./tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 132               		.loc 1 97 0
 133               		.cfi_startproc
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
  98:./tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 138               		.loc 1 98 0
 139 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 140 0004 0895      		ret
 141               		.cfi_endproc
 142               	.LFE109:
 144               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 145               	.global	clear_oneshot_layer_state
 147               	clear_oneshot_layer_state:
 148               	.LFB110:
  99:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 100:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 101:./tmk_core/common/action_util.c **** #endif
 102:./tmk_core/common/action_util.c **** }
 103:./tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 104:./tmk_core/common/action_util.c **** {
 149               		.loc 1 104 0
 150               		.cfi_startproc
 151               	.LVL4:
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
 105:./tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 156               		.loc 1 105 0
 157 0000 2091 0000 		lds r18,oneshot_layer_data
 158               	.LVL5:
 106:./tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 159               		.loc 1 106 0
 160 0004 8095      		com r24
 161               	.LVL6:
 162 0006 8223      		and r24,r18
 163               	.LVL7:
 164 0008 8093 0000 		sts oneshot_layer_data,r24
 165               	.LBB8:
 166               	.LBB9:
  78:./tmk_core/common/action_util.c **** 
 167               		.loc 1 78 0
 168 000c 982F      		mov r25,r24
 169 000e 9770      		andi r25,lo8(7)
 170               	.LBE9:
 171               	.LBE8:
 107:./tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 172               		.loc 1 107 0
 173 0010 01F4      		brne .L8
 174               		.loc 1 107 0 is_stmt 0 discriminator 1
 175 0012 30E0      		ldi r19,0
 176 0014 482F      		mov r20,r24
 177 0016 082E      		mov __tmp_reg__,r24
 178 0018 000C      		lsl r0
 179 001a 550B      		sbc r21,r21
 180 001c 2417      		cp r18,r20
 181 001e 3507      		cpc r19,r21
 182 0020 01F0      		breq .L8
 108:./tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 183               		.loc 1 108 0 is_stmt 1
 184 0022 8595      		asr r24
 185 0024 8595      		asr r24
 186 0026 8595      		asr r24
 187 0028 0C94 0000 		jmp layer_off
 188               	.LVL8:
 189               	.L8:
 190 002c 0895      		ret
 191               		.cfi_endproc
 192               	.LFE110:
 194               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 195               	.global	is_oneshot_layer_active
 197               	is_oneshot_layer_active:
 198               	.LFB111:
 109:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:./tmk_core/common/action_util.c **** #endif
 112:./tmk_core/common/action_util.c ****     }
 113:./tmk_core/common/action_util.c **** }
 114:./tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 115:./tmk_core/common/action_util.c **** {
 199               		.loc 1 115 0
 200               		.cfi_startproc
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 205               	.LBB10:
 206               	.LBB11:
  78:./tmk_core/common/action_util.c **** 
 207               		.loc 1 78 0
 208 0000 9091 0000 		lds r25,oneshot_layer_data
 209 0004 9770      		andi r25,lo8(7)
 210               	.LBE11:
 211               	.LBE10:
 116:./tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 212               		.loc 1 116 0
 213 0006 81E0      		ldi r24,lo8(1)
 214 0008 01F4      		brne .L11
 215 000a 80E0      		ldi r24,0
 216               	.L11:
 117:./tmk_core/common/action_util.c **** }
 217               		.loc 1 117 0
 218 000c 0895      		ret
 219               		.cfi_endproc
 220               	.LFE111:
 222               		.section	.text.add_key,"ax",@progbits
 223               	.global	add_key
 225               	add_key:
 226               	.LFB113:
 118:./tmk_core/common/action_util.c **** #endif
 119:./tmk_core/common/action_util.c **** 
 120:./tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 123:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 124:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 125:./tmk_core/common/action_util.c ****     if (oneshot_mods) {
 126:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:./tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 128:./tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 129:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 130:./tmk_core/common/action_util.c ****         }
 131:./tmk_core/common/action_util.c **** #endif
 132:./tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 133:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 134:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 135:./tmk_core/common/action_util.c ****         }
 136:./tmk_core/common/action_util.c ****     }
 137:./tmk_core/common/action_util.c **** 
 138:./tmk_core/common/action_util.c **** #endif
 139:./tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 140:./tmk_core/common/action_util.c **** }
 141:./tmk_core/common/action_util.c **** 
 142:./tmk_core/common/action_util.c **** /* key */
 143:./tmk_core/common/action_util.c **** void add_key(uint8_t key)
 144:./tmk_core/common/action_util.c **** {
 227               		.loc 1 144 0
 228               		.cfi_startproc
 229               	.LVL9:
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 0 */
 233               	.L__stack_usage = 0
 145:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 146:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 234               		.loc 1 146 0
 235 0000 9091 0000 		lds r25,keyboard_protocol
 236 0004 9923      		tst r25
 237 0006 01F0      		breq .L13
 238               		.loc 1 146 0 is_stmt 0 discriminator 1
 239 0008 9091 0000 		lds r25,keymap_config
 240 000c 97FF      		sbrs r25,7
 241 000e 00C0      		rjmp .L13
 242               	.LVL10:
 243               	.LBB16:
 244               	.LBB17:
 147:./tmk_core/common/action_util.c ****         add_key_bit(key);
 148:./tmk_core/common/action_util.c ****         return;
 149:./tmk_core/common/action_util.c ****     }
 150:./tmk_core/common/action_util.c **** #endif
 151:./tmk_core/common/action_util.c ****     add_key_byte(key);
 152:./tmk_core/common/action_util.c **** }
 153:./tmk_core/common/action_util.c **** 
 154:./tmk_core/common/action_util.c **** void del_key(uint8_t key)
 155:./tmk_core/common/action_util.c **** {
 156:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 157:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 158:./tmk_core/common/action_util.c ****         del_key_bit(key);
 159:./tmk_core/common/action_util.c ****         return;
 160:./tmk_core/common/action_util.c ****     }
 161:./tmk_core/common/action_util.c **** #endif
 162:./tmk_core/common/action_util.c ****     del_key_byte(key);
 163:./tmk_core/common/action_util.c **** }
 164:./tmk_core/common/action_util.c **** 
 165:./tmk_core/common/action_util.c **** void clear_keys(void)
 166:./tmk_core/common/action_util.c **** {
 167:./tmk_core/common/action_util.c ****     // not clear mods
 168:./tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 169:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 170:./tmk_core/common/action_util.c ****     }
 171:./tmk_core/common/action_util.c **** }
 172:./tmk_core/common/action_util.c **** 
 173:./tmk_core/common/action_util.c **** 
 174:./tmk_core/common/action_util.c **** /* modifier */
 175:./tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 176:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 177:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 178:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 179:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 180:./tmk_core/common/action_util.c **** 
 181:./tmk_core/common/action_util.c **** /* weak modifier */
 182:./tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 183:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 184:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 185:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 186:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 187:./tmk_core/common/action_util.c **** 
 188:./tmk_core/common/action_util.c **** /* macro modifier */
 189:./tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 190:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 191:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 192:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 193:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 194:./tmk_core/common/action_util.c **** 
 195:./tmk_core/common/action_util.c **** /* Oneshot modifier */
 196:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 197:./tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 198:./tmk_core/common/action_util.c **** {
 199:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 200:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 201:./tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 202:./tmk_core/common/action_util.c **** #endif
 203:./tmk_core/common/action_util.c **** }
 204:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 205:./tmk_core/common/action_util.c **** {
 206:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 207:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 208:./tmk_core/common/action_util.c ****     oneshot_time = 0;
 209:./tmk_core/common/action_util.c **** #endif
 210:./tmk_core/common/action_util.c **** }
 211:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 212:./tmk_core/common/action_util.c **** {
 213:./tmk_core/common/action_util.c ****     return oneshot_mods;
 214:./tmk_core/common/action_util.c **** }
 215:./tmk_core/common/action_util.c **** #endif
 216:./tmk_core/common/action_util.c **** 
 217:./tmk_core/common/action_util.c **** /*
 218:./tmk_core/common/action_util.c ****  * inspect keyboard state
 219:./tmk_core/common/action_util.c ****  */
 220:./tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 221:./tmk_core/common/action_util.c **** {
 222:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 223:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 224:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 225:./tmk_core/common/action_util.c ****             cnt++;
 226:./tmk_core/common/action_util.c ****     }
 227:./tmk_core/common/action_util.c ****     return cnt;
 228:./tmk_core/common/action_util.c **** }
 229:./tmk_core/common/action_util.c **** 
 230:./tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 231:./tmk_core/common/action_util.c **** {
 232:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 233:./tmk_core/common/action_util.c **** }
 234:./tmk_core/common/action_util.c **** 
 235:./tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 236:./tmk_core/common/action_util.c **** {
 237:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 238:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 239:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 240:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 241:./tmk_core/common/action_util.c ****             ;
 242:./tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 243:./tmk_core/common/action_util.c ****     }
 244:./tmk_core/common/action_util.c **** #endif
 245:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 246:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 247:./tmk_core/common/action_util.c ****     do {
 248:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 249:./tmk_core/common/action_util.c ****             break;
 250:./tmk_core/common/action_util.c ****         }
 251:./tmk_core/common/action_util.c ****         i = RO_INC(i);
 252:./tmk_core/common/action_util.c ****     } while (i != cb_tail);
 253:./tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 254:./tmk_core/common/action_util.c **** #else
 255:./tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 256:./tmk_core/common/action_util.c **** #endif
 257:./tmk_core/common/action_util.c **** }
 258:./tmk_core/common/action_util.c **** 
 259:./tmk_core/common/action_util.c **** 
 260:./tmk_core/common/action_util.c **** 
 261:./tmk_core/common/action_util.c **** /* local functions */
 262:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 263:./tmk_core/common/action_util.c **** {
 264:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 265:./tmk_core/common/action_util.c ****     int8_t i = cb_head;
 266:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 267:./tmk_core/common/action_util.c ****     if (cb_count) {
 268:./tmk_core/common/action_util.c ****         do {
 269:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 270:./tmk_core/common/action_util.c ****                 return;
 271:./tmk_core/common/action_util.c ****             }
 272:./tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 273:./tmk_core/common/action_util.c ****                 empty = i;
 274:./tmk_core/common/action_util.c ****             }
 275:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 276:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 277:./tmk_core/common/action_util.c ****         if (i == cb_tail) {
 278:./tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 279:./tmk_core/common/action_util.c ****                 // buffer is full
 280:./tmk_core/common/action_util.c ****                 if (empty == -1) {
 281:./tmk_core/common/action_util.c ****                     // pop head when has no empty space
 282:./tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 283:./tmk_core/common/action_util.c ****                     cb_count--;
 284:./tmk_core/common/action_util.c ****                 }
 285:./tmk_core/common/action_util.c ****                 else {
 286:./tmk_core/common/action_util.c ****                     // left shift when has empty space
 287:./tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 288:./tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 289:./tmk_core/common/action_util.c ****                     do {
 290:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 291:./tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 292:./tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 293:./tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 294:./tmk_core/common/action_util.c ****                         }
 295:./tmk_core/common/action_util.c ****                         else {
 296:./tmk_core/common/action_util.c ****                             offset++;
 297:./tmk_core/common/action_util.c ****                         }
 298:./tmk_core/common/action_util.c ****                         i = RO_INC(i);
 299:./tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 300:./tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 301:./tmk_core/common/action_util.c ****                 }
 302:./tmk_core/common/action_util.c ****             }
 303:./tmk_core/common/action_util.c ****         }
 304:./tmk_core/common/action_util.c ****     }
 305:./tmk_core/common/action_util.c ****     // add to tail
 306:./tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 307:./tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 308:./tmk_core/common/action_util.c ****     cb_count++;
 309:./tmk_core/common/action_util.c **** #else
 310:./tmk_core/common/action_util.c ****     int8_t i = 0;
 311:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 312:./tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 313:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 314:./tmk_core/common/action_util.c ****             break;
 315:./tmk_core/common/action_util.c ****         }
 316:./tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 317:./tmk_core/common/action_util.c ****             empty = i;
 318:./tmk_core/common/action_util.c ****         }
 319:./tmk_core/common/action_util.c ****     }
 320:./tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 321:./tmk_core/common/action_util.c ****         if (empty != -1) {
 322:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 323:./tmk_core/common/action_util.c ****         }
 324:./tmk_core/common/action_util.c ****     }
 325:./tmk_core/common/action_util.c **** #endif
 326:./tmk_core/common/action_util.c **** }
 327:./tmk_core/common/action_util.c **** 
 328:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 329:./tmk_core/common/action_util.c **** {
 330:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 331:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 332:./tmk_core/common/action_util.c ****     if (cb_count) {
 333:./tmk_core/common/action_util.c ****         do {
 334:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 335:./tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 336:./tmk_core/common/action_util.c ****                 cb_count--;
 337:./tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 338:./tmk_core/common/action_util.c ****                     // reset head and tail
 339:./tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 340:./tmk_core/common/action_util.c ****                 }
 341:./tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 342:./tmk_core/common/action_util.c ****                     // left shift when next to tail
 343:./tmk_core/common/action_util.c ****                     do {
 344:./tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 345:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 346:./tmk_core/common/action_util.c ****                             break;
 347:./tmk_core/common/action_util.c ****                         }
 348:./tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 349:./tmk_core/common/action_util.c ****                 }
 350:./tmk_core/common/action_util.c ****                 break;
 351:./tmk_core/common/action_util.c ****             }
 352:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 353:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 354:./tmk_core/common/action_util.c ****     }
 355:./tmk_core/common/action_util.c **** #else
 356:./tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 357:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 358:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 359:./tmk_core/common/action_util.c ****         }
 360:./tmk_core/common/action_util.c ****     }
 361:./tmk_core/common/action_util.c **** #endif
 362:./tmk_core/common/action_util.c **** }
 363:./tmk_core/common/action_util.c **** 
 364:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 365:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 366:./tmk_core/common/action_util.c **** {
 367:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 245               		.loc 1 367 0 is_stmt 1
 246 0010 982F      		mov r25,r24
 247 0012 9695      		lsr r25
 248 0014 9695      		lsr r25
 249 0016 9695      		lsr r25
 250 0018 9F31      		cpi r25,lo8(31)
 251 001a 01F0      		breq .L12
 368:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 252               		.loc 1 368 0
 253 001c E091 0000 		lds r30,keyboard_report
 254 0020 F091 0000 		lds r31,keyboard_report+1
 255 0024 E90F      		add r30,r25
 256 0026 F11D      		adc r31,__zero_reg__
 257 0028 8770      		andi r24,lo8(7)
 258               	.LVL11:
 259 002a 21E0      		ldi r18,lo8(1)
 260 002c 30E0      		ldi r19,0
 261 002e 00C0      		rjmp 2f
 262               		1:
 263 0030 220F      		lsl r18
 264               		2:
 265 0032 8A95      		dec r24
 266 0034 02F4      		brpl 1b
 267 0036 8181      		ldd r24,Z+1
 268 0038 822B      		or r24,r18
 269 003a 8183      		std Z+1,r24
 270 003c 0895      		ret
 271               	.LVL12:
 272               	.L13:
 273               	.LBE17:
 274               	.LBE16:
 275               	.LBB18:
 276               	.LBB19:
 313:./tmk_core/common/action_util.c ****             break;
 277               		.loc 1 313 0
 278 003e 2091 0000 		lds r18,keyboard_report
 279 0042 3091 0000 		lds r19,keyboard_report+1
 280 0046 F901      		movw r30,r18
 281 0048 3296      		adiw r30,2
 282 004a 9FEF      		ldi r25,lo8(-1)
 283 004c 40E0      		ldi r20,0
 284               	.L16:
 285               	.LVL13:
 286 004e 5191      		ld r21,Z+
 287 0050 8517      		cp r24,r21
 288 0052 01F0      		breq .L12
 316:./tmk_core/common/action_util.c ****             empty = i;
 289               		.loc 1 316 0
 290 0054 9F3F      		cpi r25,lo8(-1)
 291 0056 01F4      		brne .L15
 292 0058 5111      		cpse r21,__zero_reg__
 293 005a 00C0      		rjmp .L15
 294 005c 942F      		mov r25,r20
 295               	.LVL14:
 296               	.L15:
 297 005e 4F5F      		subi r20,lo8(-(1))
 298               	.LVL15:
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 299               		.loc 1 312 0
 300 0060 4E31      		cpi r20,lo8(30)
 301 0062 01F4      		brne .L16
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 302               		.loc 1 321 0
 303 0064 9F3F      		cpi r25,lo8(-1)
 304 0066 01F4      		brne .L18
 305               	.LVL16:
 306               	.L12:
 307 0068 0895      		ret
 308               	.LVL17:
 309               	.L18:
 322:./tmk_core/common/action_util.c ****         }
 310               		.loc 1 322 0
 311 006a 290F      		add r18,r25
 312 006c 311D      		adc r19,__zero_reg__
 313 006e 97FD      		sbrc r25,7
 314 0070 3A95      		dec r19
 315 0072 F901      		movw r30,r18
 316 0074 8283      		std Z+2,r24
 317 0076 0895      		ret
 318               	.LBE19:
 319               	.LBE18:
 320               		.cfi_endproc
 321               	.LFE113:
 323               		.section	.text.del_key,"ax",@progbits
 324               	.global	del_key
 326               	del_key:
 327               	.LFB114:
 155:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 328               		.loc 1 155 0
 329               		.cfi_startproc
 330               	.LVL18:
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 335               		.loc 1 157 0
 336 0000 9091 0000 		lds r25,keyboard_protocol
 337 0004 9923      		tst r25
 338 0006 01F0      		breq .L29
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 339               		.loc 1 157 0 is_stmt 0 discriminator 1
 340 0008 9091 0000 		lds r25,keymap_config
 341 000c 97FF      		sbrs r25,7
 342 000e 00C0      		rjmp .L29
 343               	.LVL19:
 344               	.LBB25:
 345               	.LBB26:
 369:./tmk_core/common/action_util.c ****     } else {
 370:./tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 371:./tmk_core/common/action_util.c ****     }
 372:./tmk_core/common/action_util.c **** }
 373:./tmk_core/common/action_util.c **** 
 374:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 375:./tmk_core/common/action_util.c **** {
 376:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 346               		.loc 1 376 0 is_stmt 1
 347 0010 982F      		mov r25,r24
 348 0012 9695      		lsr r25
 349 0014 9695      		lsr r25
 350 0016 9695      		lsr r25
 351 0018 9F31      		cpi r25,lo8(31)
 352 001a 01F0      		breq .L28
 377:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 353               		.loc 1 377 0
 354 001c E091 0000 		lds r30,keyboard_report
 355 0020 F091 0000 		lds r31,keyboard_report+1
 356 0024 E90F      		add r30,r25
 357 0026 F11D      		adc r31,__zero_reg__
 358 0028 282F      		mov r18,r24
 359 002a 2770      		andi r18,lo8(7)
 360 002c 81E0      		ldi r24,lo8(1)
 361 002e 90E0      		ldi r25,0
 362               	.LVL20:
 363 0030 00C0      		rjmp 2f
 364               		1:
 365 0032 880F      		lsl r24
 366               		2:
 367 0034 2A95      		dec r18
 368 0036 02F4      		brpl 1b
 369 0038 8095      		com r24
 370 003a 9181      		ldd r25,Z+1
 371 003c 8923      		and r24,r25
 372 003e 8183      		std Z+1,r24
 373 0040 0895      		ret
 374               	.LVL21:
 375               	.L29:
 376               	.LBE26:
 377               	.LBE25:
 378               	.LBB27:
 379               	.LBB28:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 380               		.loc 1 357 0
 381 0042 E091 0000 		lds r30,keyboard_report
 382 0046 F091 0000 		lds r31,keyboard_report+1
 383 004a 9F01      		movw r18,r30
 384 004c 225E      		subi r18,-30
 385 004e 3F4F      		sbci r19,-1
 386               	.L33:
 387               	.LVL22:
 388 0050 9281      		ldd r25,Z+2
 389 0052 8913      		cpse r24,r25
 390 0054 00C0      		rjmp .L32
 358:./tmk_core/common/action_util.c ****         }
 391               		.loc 1 358 0
 392 0056 1282      		std Z+2,__zero_reg__
 393               	.L32:
 394               	.LVL23:
 395 0058 3196      		adiw r30,1
 396               	.LVL24:
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 397               		.loc 1 356 0
 398 005a E217      		cp r30,r18
 399 005c F307      		cpc r31,r19
 400 005e 01F4      		brne .L33
 401               	.LVL25:
 402               	.L28:
 403 0060 0895      		ret
 404               	.LBE28:
 405               	.LBE27:
 406               		.cfi_endproc
 407               	.LFE114:
 409               		.section	.text.clear_keys,"ax",@progbits
 410               	.global	clear_keys
 412               	clear_keys:
 413               	.LFB115:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 414               		.loc 1 166 0
 415               		.cfi_startproc
 416               	/* prologue: function */
 417               	/* frame size = 0 */
 418               	/* stack size = 0 */
 419               	.L__stack_usage = 0
 420               	.LVL26:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 421               		.loc 1 166 0
 422 0000 81E0      		ldi r24,lo8(1)
 423 0002 90E0      		ldi r25,0
 424               	.LVL27:
 425               	.L40:
 426               	.LBB29:
 169:./tmk_core/common/action_util.c ****     }
 427               		.loc 1 169 0 discriminator 3
 428 0004 E091 0000 		lds r30,keyboard_report
 429 0008 F091 0000 		lds r31,keyboard_report+1
 430 000c E80F      		add r30,r24
 431 000e F91F      		adc r31,r25
 432 0010 1082      		st Z,__zero_reg__
 433               	.LVL28:
 434 0012 0196      		adiw r24,1
 435               	.LVL29:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 436               		.loc 1 168 0 discriminator 3
 437 0014 8032      		cpi r24,32
 438 0016 9105      		cpc r25,__zero_reg__
 439 0018 01F4      		brne .L40
 440               	/* epilogue start */
 441               	.LBE29:
 171:./tmk_core/common/action_util.c **** 
 442               		.loc 1 171 0
 443 001a 0895      		ret
 444               		.cfi_endproc
 445               	.LFE115:
 447               		.section	.text.get_mods,"ax",@progbits
 448               	.global	get_mods
 450               	get_mods:
 451               	.LFB116:
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 452               		.loc 1 175 0
 453               		.cfi_startproc
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 458               		.loc 1 175 0
 459 0000 8091 0000 		lds r24,real_mods
 460 0004 0895      		ret
 461               		.cfi_endproc
 462               	.LFE116:
 464               		.section	.text.add_mods,"ax",@progbits
 465               	.global	add_mods
 467               	add_mods:
 468               	.LFB117:
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 469               		.loc 1 176 0
 470               		.cfi_startproc
 471               	.LVL30:
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 0 */
 475               	.L__stack_usage = 0
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 476               		.loc 1 176 0
 477 0000 9091 0000 		lds r25,real_mods
 478 0004 892B      		or r24,r25
 479               	.LVL31:
 480 0006 8093 0000 		sts real_mods,r24
 481 000a 0895      		ret
 482               		.cfi_endproc
 483               	.LFE117:
 485               		.section	.text.del_mods,"ax",@progbits
 486               	.global	del_mods
 488               	del_mods:
 489               	.LFB118:
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 490               		.loc 1 177 0
 491               		.cfi_startproc
 492               	.LVL32:
 493               	/* prologue: function */
 494               	/* frame size = 0 */
 495               	/* stack size = 0 */
 496               	.L__stack_usage = 0
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 497               		.loc 1 177 0
 498 0000 982F      		mov r25,r24
 499 0002 9095      		com r25
 500 0004 8091 0000 		lds r24,real_mods
 501               	.LVL33:
 502 0008 8923      		and r24,r25
 503 000a 8093 0000 		sts real_mods,r24
 504 000e 0895      		ret
 505               		.cfi_endproc
 506               	.LFE118:
 508               		.section	.text.set_mods,"ax",@progbits
 509               	.global	set_mods
 511               	set_mods:
 512               	.LFB119:
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 513               		.loc 1 178 0
 514               		.cfi_startproc
 515               	.LVL34:
 516               	/* prologue: function */
 517               	/* frame size = 0 */
 518               	/* stack size = 0 */
 519               	.L__stack_usage = 0
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 520               		.loc 1 178 0
 521 0000 8093 0000 		sts real_mods,r24
 522 0004 0895      		ret
 523               		.cfi_endproc
 524               	.LFE119:
 526               		.section	.text.clear_mods,"ax",@progbits
 527               	.global	clear_mods
 529               	clear_mods:
 530               	.LFB120:
 179:./tmk_core/common/action_util.c **** 
 531               		.loc 1 179 0
 532               		.cfi_startproc
 533               	/* prologue: function */
 534               	/* frame size = 0 */
 535               	/* stack size = 0 */
 536               	.L__stack_usage = 0
 179:./tmk_core/common/action_util.c **** 
 537               		.loc 1 179 0
 538 0000 1092 0000 		sts real_mods,__zero_reg__
 539 0004 0895      		ret
 540               		.cfi_endproc
 541               	.LFE120:
 543               		.section	.text.get_weak_mods,"ax",@progbits
 544               	.global	get_weak_mods
 546               	get_weak_mods:
 547               	.LFB121:
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 548               		.loc 1 182 0
 549               		.cfi_startproc
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 0 */
 553               	.L__stack_usage = 0
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 554               		.loc 1 182 0
 555 0000 8091 0000 		lds r24,weak_mods
 556 0004 0895      		ret
 557               		.cfi_endproc
 558               	.LFE121:
 560               		.section	.text.add_weak_mods,"ax",@progbits
 561               	.global	add_weak_mods
 563               	add_weak_mods:
 564               	.LFB122:
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 565               		.loc 1 183 0
 566               		.cfi_startproc
 567               	.LVL35:
 568               	/* prologue: function */
 569               	/* frame size = 0 */
 570               	/* stack size = 0 */
 571               	.L__stack_usage = 0
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 572               		.loc 1 183 0
 573 0000 9091 0000 		lds r25,weak_mods
 574 0004 892B      		or r24,r25
 575               	.LVL36:
 576 0006 8093 0000 		sts weak_mods,r24
 577 000a 0895      		ret
 578               		.cfi_endproc
 579               	.LFE122:
 581               		.section	.text.del_weak_mods,"ax",@progbits
 582               	.global	del_weak_mods
 584               	del_weak_mods:
 585               	.LFB123:
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 586               		.loc 1 184 0
 587               		.cfi_startproc
 588               	.LVL37:
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 0 */
 592               	.L__stack_usage = 0
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 593               		.loc 1 184 0
 594 0000 982F      		mov r25,r24
 595 0002 9095      		com r25
 596 0004 8091 0000 		lds r24,weak_mods
 597               	.LVL38:
 598 0008 8923      		and r24,r25
 599 000a 8093 0000 		sts weak_mods,r24
 600 000e 0895      		ret
 601               		.cfi_endproc
 602               	.LFE123:
 604               		.section	.text.set_weak_mods,"ax",@progbits
 605               	.global	set_weak_mods
 607               	set_weak_mods:
 608               	.LFB124:
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 609               		.loc 1 185 0
 610               		.cfi_startproc
 611               	.LVL39:
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 0 */
 615               	.L__stack_usage = 0
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 616               		.loc 1 185 0
 617 0000 8093 0000 		sts weak_mods,r24
 618 0004 0895      		ret
 619               		.cfi_endproc
 620               	.LFE124:
 622               		.section	.text.clear_weak_mods,"ax",@progbits
 623               	.global	clear_weak_mods
 625               	clear_weak_mods:
 626               	.LFB125:
 186:./tmk_core/common/action_util.c **** 
 627               		.loc 1 186 0
 628               		.cfi_startproc
 629               	/* prologue: function */
 630               	/* frame size = 0 */
 631               	/* stack size = 0 */
 632               	.L__stack_usage = 0
 186:./tmk_core/common/action_util.c **** 
 633               		.loc 1 186 0
 634 0000 1092 0000 		sts weak_mods,__zero_reg__
 635 0004 0895      		ret
 636               		.cfi_endproc
 637               	.LFE125:
 639               		.section	.text.get_macro_mods,"ax",@progbits
 640               	.global	get_macro_mods
 642               	get_macro_mods:
 643               	.LFB126:
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 644               		.loc 1 189 0
 645               		.cfi_startproc
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 650               		.loc 1 189 0
 651 0000 8091 0000 		lds r24,macro_mods
 652 0004 0895      		ret
 653               		.cfi_endproc
 654               	.LFE126:
 656               		.section	.text.add_macro_mods,"ax",@progbits
 657               	.global	add_macro_mods
 659               	add_macro_mods:
 660               	.LFB127:
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 661               		.loc 1 190 0
 662               		.cfi_startproc
 663               	.LVL40:
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 0 */
 667               	.L__stack_usage = 0
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 668               		.loc 1 190 0
 669 0000 9091 0000 		lds r25,macro_mods
 670 0004 892B      		or r24,r25
 671               	.LVL41:
 672 0006 8093 0000 		sts macro_mods,r24
 673 000a 0895      		ret
 674               		.cfi_endproc
 675               	.LFE127:
 677               		.section	.text.del_macro_mods,"ax",@progbits
 678               	.global	del_macro_mods
 680               	del_macro_mods:
 681               	.LFB128:
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 682               		.loc 1 191 0
 683               		.cfi_startproc
 684               	.LVL42:
 685               	/* prologue: function */
 686               	/* frame size = 0 */
 687               	/* stack size = 0 */
 688               	.L__stack_usage = 0
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 689               		.loc 1 191 0
 690 0000 982F      		mov r25,r24
 691 0002 9095      		com r25
 692 0004 8091 0000 		lds r24,macro_mods
 693               	.LVL43:
 694 0008 8923      		and r24,r25
 695 000a 8093 0000 		sts macro_mods,r24
 696 000e 0895      		ret
 697               		.cfi_endproc
 698               	.LFE128:
 700               		.section	.text.set_macro_mods,"ax",@progbits
 701               	.global	set_macro_mods
 703               	set_macro_mods:
 704               	.LFB129:
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 705               		.loc 1 192 0
 706               		.cfi_startproc
 707               	.LVL44:
 708               	/* prologue: function */
 709               	/* frame size = 0 */
 710               	/* stack size = 0 */
 711               	.L__stack_usage = 0
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 712               		.loc 1 192 0
 713 0000 8093 0000 		sts macro_mods,r24
 714 0004 0895      		ret
 715               		.cfi_endproc
 716               	.LFE129:
 718               		.section	.text.clear_macro_mods,"ax",@progbits
 719               	.global	clear_macro_mods
 721               	clear_macro_mods:
 722               	.LFB130:
 193:./tmk_core/common/action_util.c **** 
 723               		.loc 1 193 0
 724               		.cfi_startproc
 725               	/* prologue: function */
 726               	/* frame size = 0 */
 727               	/* stack size = 0 */
 728               	.L__stack_usage = 0
 193:./tmk_core/common/action_util.c **** 
 729               		.loc 1 193 0
 730 0000 1092 0000 		sts macro_mods,__zero_reg__
 731 0004 0895      		ret
 732               		.cfi_endproc
 733               	.LFE130:
 735               		.section	.text.set_oneshot_mods,"ax",@progbits
 736               	.global	set_oneshot_mods
 738               	set_oneshot_mods:
 739               	.LFB131:
 198:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 740               		.loc 1 198 0
 741               		.cfi_startproc
 742               	.LVL45:
 743               	/* prologue: function */
 744               	/* frame size = 0 */
 745               	/* stack size = 0 */
 746               	.L__stack_usage = 0
 199:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 747               		.loc 1 199 0
 748 0000 8093 0000 		sts oneshot_mods,r24
 749 0004 0895      		ret
 750               		.cfi_endproc
 751               	.LFE131:
 753               		.section	.text.clear_oneshot_mods,"ax",@progbits
 754               	.global	clear_oneshot_mods
 756               	clear_oneshot_mods:
 757               	.LFB132:
 205:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 758               		.loc 1 205 0
 759               		.cfi_startproc
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 0 */
 763               	.L__stack_usage = 0
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 764               		.loc 1 206 0
 765 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 766 0004 0895      		ret
 767               		.cfi_endproc
 768               	.LFE132:
 770               		.section	.text.get_oneshot_mods,"ax",@progbits
 771               	.global	get_oneshot_mods
 773               	get_oneshot_mods:
 774               	.LFB133:
 212:./tmk_core/common/action_util.c ****     return oneshot_mods;
 775               		.loc 1 212 0
 776               		.cfi_startproc
 777               	/* prologue: function */
 778               	/* frame size = 0 */
 779               	/* stack size = 0 */
 780               	.L__stack_usage = 0
 214:./tmk_core/common/action_util.c **** #endif
 781               		.loc 1 214 0
 782 0000 8091 0000 		lds r24,oneshot_mods
 783 0004 0895      		ret
 784               		.cfi_endproc
 785               	.LFE133:
 787               		.section	.text.has_anykey,"ax",@progbits
 788               	.global	has_anykey
 790               	has_anykey:
 791               	.LFB134:
 221:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 792               		.loc 1 221 0
 793               		.cfi_startproc
 794               	/* prologue: function */
 795               	/* frame size = 0 */
 796               	/* stack size = 0 */
 797               	.L__stack_usage = 0
 798               	.LVL46:
 799               	.LBB30:
 224:./tmk_core/common/action_util.c ****             cnt++;
 800               		.loc 1 224 0
 801 0000 2091 0000 		lds r18,keyboard_report
 802 0004 3091 0000 		lds r19,keyboard_report+1
 803 0008 F901      		movw r30,r18
 804 000a 3196      		adiw r30,1
 805 000c 205E      		subi r18,-32
 806 000e 3F4F      		sbci r19,-1
 807               	.LBE30:
 222:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 808               		.loc 1 222 0
 809 0010 80E0      		ldi r24,0
 810               	.LVL47:
 811               	.L62:
 812               	.LBB31:
 224:./tmk_core/common/action_util.c ****             cnt++;
 813               		.loc 1 224 0
 814 0012 9191      		ld r25,Z+
 815               	.LVL48:
 816 0014 9111      		cpse r25,__zero_reg__
 225:./tmk_core/common/action_util.c ****     }
 817               		.loc 1 225 0
 818 0016 8F5F      		subi r24,lo8(-(1))
 819               	.LVL49:
 820               	.L61:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 821               		.loc 1 223 0 discriminator 2
 822 0018 E217      		cp r30,r18
 823 001a F307      		cpc r31,r19
 824 001c 01F4      		brne .L62
 825               	/* epilogue start */
 826               	.LBE31:
 228:./tmk_core/common/action_util.c **** 
 827               		.loc 1 228 0
 828 001e 0895      		ret
 829               		.cfi_endproc
 830               	.LFE134:
 832               		.section	.text.send_keyboard_report,"ax",@progbits
 833               	.global	send_keyboard_report
 835               	send_keyboard_report:
 836               	.LFB112:
 120:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 837               		.loc 1 120 0
 838               		.cfi_startproc
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 0 */
 842               	.L__stack_usage = 0
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 843               		.loc 1 121 0
 844 0000 E091 0000 		lds r30,keyboard_report
 845 0004 F091 0000 		lds r31,keyboard_report+1
 846 0008 8091 0000 		lds r24,real_mods
 847 000c 8083      		st Z,r24
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 848               		.loc 1 122 0
 849 000e E091 0000 		lds r30,keyboard_report
 850 0012 F091 0000 		lds r31,keyboard_report+1
 851 0016 8081      		ld r24,Z
 852 0018 9091 0000 		lds r25,weak_mods
 853 001c 892B      		or r24,r25
 854 001e 8083      		st Z,r24
 123:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 855               		.loc 1 123 0
 856 0020 E091 0000 		lds r30,keyboard_report
 857 0024 F091 0000 		lds r31,keyboard_report+1
 858 0028 8081      		ld r24,Z
 859 002a 9091 0000 		lds r25,macro_mods
 860 002e 892B      		or r24,r25
 861 0030 8083      		st Z,r24
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 862               		.loc 1 125 0
 863 0032 9091 0000 		lds r25,oneshot_mods
 864 0036 9923      		tst r25
 865 0038 01F0      		breq .L69
 132:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 866               		.loc 1 132 0
 867 003a E091 0000 		lds r30,keyboard_report
 868 003e F091 0000 		lds r31,keyboard_report+1
 869 0042 8081      		ld r24,Z
 870 0044 892B      		or r24,r25
 871 0046 8083      		st Z,r24
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 872               		.loc 1 133 0
 873 0048 0E94 0000 		call has_anykey
 874               	.LVL50:
 875 004c 8111      		cpse r24,__zero_reg__
 876               	.LBB34:
 877               	.LBB35:
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 878               		.loc 1 206 0
 879 004e 1092 0000 		sts oneshot_mods,__zero_reg__
 880               	.L69:
 881               	.LBE35:
 882               	.LBE34:
 139:./tmk_core/common/action_util.c **** }
 883               		.loc 1 139 0
 884 0052 8091 0000 		lds r24,keyboard_report
 885 0056 9091 0000 		lds r25,keyboard_report+1
 886 005a 0C94 0000 		jmp host_keyboard_send
 887               	.LVL51:
 888               		.cfi_endproc
 889               	.LFE112:
 891               		.section	.text.has_anymod,"ax",@progbits
 892               	.global	has_anymod
 894               	has_anymod:
 895               	.LFB135:
 231:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 896               		.loc 1 231 0
 897               		.cfi_startproc
 898               	/* prologue: function */
 899               	/* frame size = 0 */
 900               	/* stack size = 0 */
 901               	.L__stack_usage = 0
 232:./tmk_core/common/action_util.c **** }
 902               		.loc 1 232 0
 903 0000 8091 0000 		lds r24,real_mods
 904 0004 0C94 0000 		jmp bitpop
 905               	.LVL52:
 906               		.cfi_endproc
 907               	.LFE135:
 909               		.section	.text.get_first_key,"ax",@progbits
 910               	.global	get_first_key
 912               	get_first_key:
 913               	.LFB136:
 236:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 914               		.loc 1 236 0
 915               		.cfi_startproc
 916 0000 CF93      		push r28
 917               	.LCFI0:
 918               		.cfi_def_cfa_offset 3
 919               		.cfi_offset 28, -2
 920 0002 DF93      		push r29
 921               	.LCFI1:
 922               		.cfi_def_cfa_offset 4
 923               		.cfi_offset 29, -3
 924               	/* prologue: function */
 925               	/* frame size = 0 */
 926               	/* stack size = 2 */
 927               	.L__stack_usage = 2
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 928               		.loc 1 238 0
 929 0004 8091 0000 		lds r24,keyboard_protocol
 930 0008 E091 0000 		lds r30,keyboard_report
 931 000c F091 0000 		lds r31,keyboard_report+1
 932 0010 8823      		tst r24
 933 0012 01F0      		breq .L76
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 934               		.loc 1 238 0 is_stmt 0 discriminator 1
 935 0014 8091 0000 		lds r24,keymap_config
 936 0018 87FF      		sbrs r24,7
 937 001a 00C0      		rjmp .L76
 938 001c DF01      		movw r26,r30
 939 001e 1196      		adiw r26,1
 940               	.LBB36:
 240:./tmk_core/common/action_util.c ****             ;
 941               		.loc 1 240 0 is_stmt 1
 942 0020 C0E0      		ldi r28,0
 943               	.L77:
 944               	.LVL53:
 240:./tmk_core/common/action_util.c ****             ;
 945               		.loc 1 240 0 is_stmt 0 discriminator 2
 946 0022 8D91      		ld r24,X+
 947 0024 8111      		cpse r24,__zero_reg__
 948 0026 00C0      		rjmp .L78
 240:./tmk_core/common/action_util.c ****             ;
 949               		.loc 1 240 0 discriminator 3
 950 0028 CF5F      		subi r28,lo8(-(1))
 951               	.LVL54:
 952 002a CF31      		cpi r28,lo8(31)
 953 002c 01F4      		brne .L77
 954               	.L78:
 242:./tmk_core/common/action_util.c ****     }
 955               		.loc 1 242 0 is_stmt 1
 956 002e D0E0      		ldi r29,0
 957 0030 EC0F      		add r30,r28
 958 0032 FD1F      		adc r31,r29
 959 0034 8181      		ldd r24,Z+1
 960 0036 0E94 0000 		call biton
 961               	.LVL55:
 962 003a 93E0      		ldi r25,3
 963               		1:
 964 003c CC0F      		lsl r28
 965 003e DD1F      		rol r29
 966 0040 9A95      		dec r25
 967 0042 01F4      		brne 1b
 968               	.LVL56:
 969 0044 8C2B      		or r24,r28
 970               	.L75:
 971               	/* epilogue start */
 972               	.LBE36:
 257:./tmk_core/common/action_util.c **** 
 973               		.loc 1 257 0
 974 0046 DF91      		pop r29
 975 0048 CF91      		pop r28
 976 004a 0895      		ret
 977               	.L76:
 255:./tmk_core/common/action_util.c **** #endif
 978               		.loc 1 255 0
 979 004c 8281      		ldd r24,Z+2
 980 004e 00C0      		rjmp .L75
 981               		.cfi_endproc
 982               	.LFE136:
 984               		.section	.bss.oneshot_layer_data,"aw",@nobits
 987               	oneshot_layer_data:
 988 0000 00        		.zero	1
 989               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 992               	oneshot_locked_mods:
 993 0000 00        		.zero	1
 994               		.section	.bss.oneshot_mods,"aw",@nobits
 997               	oneshot_mods:
 998 0000 00        		.zero	1
 999               	.global	keyboard_report
 1000               		.section	.data.keyboard_report,"aw",@progbits
 1003               	keyboard_report:
 1004 0000 0000      		.word	__compound_literal.0
 1005               		.section	.bss.__compound_literal.0,"aw",@nobits
 1008               	__compound_literal.0:
 1009 0000 0000 0000 		.zero	32
 1009      0000 0000 
 1009      0000 0000 
 1009      0000 0000 
 1009      0000 0000 
 1010               		.section	.bss.macro_mods,"aw",@nobits
 1013               	macro_mods:
 1014 0000 00        		.zero	1
 1015               		.section	.bss.weak_mods,"aw",@nobits
 1018               	weak_mods:
 1019 0000 00        		.zero	1
 1020               		.section	.bss.real_mods,"aw",@nobits
 1023               	real_mods:
 1024 0000 00        		.zero	1
 1025               		.text
 1026               	.Letext0:
 1027               		.file 2 "/usr/avr/include/stdint.h"
 1028               		.file 3 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1029               		.file 4 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1030               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1031               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1032               		.file 7 "/usr/avr/include/stdio.h"
 1033               		.file 8 "./tmk_core/common/report.h"
 1034               		.file 9 "./tmk_core/common/host.h"
 1035               		.file 10 "./tmk_core/common/debug.h"
 1036               		.file 11 "./tmk_core/common/action_util.h"
 1037               		.file 12 "./tmk_core/common/action_layer.h"
 1038               		.file 13 "./tmk_core/common/timer.h"
 1039               		.file 14 "./quantum/keycode_config.h"
 1040               		.file 15 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/cceCYcKJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceCYcKJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceCYcKJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceCYcKJ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceCYcKJ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceCYcKJ.s:13     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/cceCYcKJ.s:992    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/cceCYcKJ.s:31     .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/cceCYcKJ.s:49     .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/cceCYcKJ.s:66     .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/cceCYcKJ.s:987    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/cceCYcKJ.s:86     .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/cceCYcKJ.s:104    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/cceCYcKJ.s:130    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/cceCYcKJ.s:147    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/cceCYcKJ.s:197    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/cceCYcKJ.s:225    .text.add_key:0000000000000000 add_key
     /tmp/cceCYcKJ.s:1003   .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/cceCYcKJ.s:326    .text.del_key:0000000000000000 del_key
     /tmp/cceCYcKJ.s:412    .text.clear_keys:0000000000000000 clear_keys
     /tmp/cceCYcKJ.s:450    .text.get_mods:0000000000000000 get_mods
     /tmp/cceCYcKJ.s:1023   .bss.real_mods:0000000000000000 real_mods
     /tmp/cceCYcKJ.s:467    .text.add_mods:0000000000000000 add_mods
     /tmp/cceCYcKJ.s:488    .text.del_mods:0000000000000000 del_mods
     /tmp/cceCYcKJ.s:511    .text.set_mods:0000000000000000 set_mods
     /tmp/cceCYcKJ.s:529    .text.clear_mods:0000000000000000 clear_mods
     /tmp/cceCYcKJ.s:546    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/cceCYcKJ.s:1018   .bss.weak_mods:0000000000000000 weak_mods
     /tmp/cceCYcKJ.s:563    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/cceCYcKJ.s:584    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/cceCYcKJ.s:607    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/cceCYcKJ.s:625    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/cceCYcKJ.s:642    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/cceCYcKJ.s:1013   .bss.macro_mods:0000000000000000 macro_mods
     /tmp/cceCYcKJ.s:659    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/cceCYcKJ.s:680    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/cceCYcKJ.s:703    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/cceCYcKJ.s:721    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/cceCYcKJ.s:738    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/cceCYcKJ.s:997    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/cceCYcKJ.s:756    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/cceCYcKJ.s:773    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/cceCYcKJ.s:790    .text.has_anykey:0000000000000000 has_anykey
     /tmp/cceCYcKJ.s:835    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/cceCYcKJ.s:894    .text.has_anymod:0000000000000000 has_anymod
     /tmp/cceCYcKJ.s:912    .text.get_first_key:0000000000000000 get_first_key
     /tmp/cceCYcKJ.s:1008   .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
layer_on
layer_off
keyboard_protocol
keymap_config
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
