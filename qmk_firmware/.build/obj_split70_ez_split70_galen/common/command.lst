   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LFB117:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 239:./tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 241:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 244:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 245:./tmk_core/common/command.c **** #endif
 246:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 247:./tmk_core/common/command.c **** 
 248:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 249:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 250:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 251:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 252:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 253:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 254:./tmk_core/common/command.c **** #endif
 255:./tmk_core/common/command.c **** 
 256:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 257:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 258:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 259:./tmk_core/common/command.c **** #   endif
 260:./tmk_core/common/command.c **** #endif
 261:./tmk_core/common/command.c **** 	return;
 262:./tmk_core/common/command.c **** }
 263:./tmk_core/common/command.c **** 
 264:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 265:./tmk_core/common/command.c **** static void print_eeconfig(void)
 266:./tmk_core/common/command.c **** {
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 269:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 270:./tmk_core/common/command.c **** 
 271:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 272:./tmk_core/common/command.c **** 
 273:./tmk_core/common/command.c ****     debug_config_t dc;
 274:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 275:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 276:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 277:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 278:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 279:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 280:./tmk_core/common/command.c **** 
 281:./tmk_core/common/command.c ****     keymap_config_t kc;
 282:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 283:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 285:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 288:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 289:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 290:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 291:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 292:./tmk_core/common/command.c **** 
 293:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 294:./tmk_core/common/command.c ****     backlight_config_t bc;
 295:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 296:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 297:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 298:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 299:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 300:./tmk_core/common/command.c **** 
 301:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** }
 304:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 307:./tmk_core/common/command.c **** {
 308:./tmk_core/common/command.c **** 
 309:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 310:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 311:./tmk_core/common/command.c **** #endif
 312:./tmk_core/common/command.c **** 
 313:./tmk_core/common/command.c ****     switch (code) {
 314:./tmk_core/common/command.c **** 
 315:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 316:./tmk_core/common/command.c **** 
 317:./tmk_core/common/command.c **** 		// test breathing sleep LED
 318:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 319:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 320:./tmk_core/common/command.c ****             sleep_led_toggle();
 321:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 322:./tmk_core/common/command.c ****             break;
 323:./tmk_core/common/command.c **** #endif
 324:./tmk_core/common/command.c **** 
 325:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 326:./tmk_core/common/command.c **** 
 327:./tmk_core/common/command.c **** 		// print stored eeprom config
 328:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:./tmk_core/common/command.c ****             print("eeconfig:\n");
 330:./tmk_core/common/command.c ****             print_eeconfig();
 331:./tmk_core/common/command.c ****             break;
 332:./tmk_core/common/command.c **** #endif
 333:./tmk_core/common/command.c **** 
 334:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 335:./tmk_core/common/command.c **** 
 336:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 337:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 338:./tmk_core/common/command.c ****             if (host_get_driver()) {
 339:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 340:./tmk_core/common/command.c ****                 clear_keyboard();
 341:./tmk_core/common/command.c ****                 host_set_driver(0);
 342:./tmk_core/common/command.c ****                 print("Locked.\n");
 343:./tmk_core/common/command.c ****             } else {
 344:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 345:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 346:./tmk_core/common/command.c ****             }
 347:./tmk_core/common/command.c ****             break;
 348:./tmk_core/common/command.c **** #endif
 349:./tmk_core/common/command.c **** 
 350:./tmk_core/common/command.c **** 		// print help
 351:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 352:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 353:./tmk_core/common/command.c ****             command_common_help();
 354:./tmk_core/common/command.c ****             break;
 355:./tmk_core/common/command.c **** 
 356:./tmk_core/common/command.c **** 		// activate console
 357:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 359:./tmk_core/common/command.c ****             debug_keyboard = false;
 360:./tmk_core/common/command.c ****             debug_mouse    = false;
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 362:./tmk_core/common/command.c ****             command_console_help();
 363:./tmk_core/common/command.c ****             print("C> ");
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 365:./tmk_core/common/command.c ****             break;
 366:./tmk_core/common/command.c **** 
 367:./tmk_core/common/command.c ****         // jump to bootloader
 368:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 370:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 371:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 372:./tmk_core/common/command.c **** 	            stop_all_notes();
 373:./tmk_core/common/command.c ****                 shutdown_user();
 374:./tmk_core/common/command.c ****             #else
 375:./tmk_core/common/command.c **** 	            wait_ms(1000);
 376:./tmk_core/common/command.c ****             #endif
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 378:./tmk_core/common/command.c ****             break;
 379:./tmk_core/common/command.c **** 
 380:./tmk_core/common/command.c ****         // debug toggle
 381:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 384:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****                 debug_matrix   = false;
 388:./tmk_core/common/command.c ****                 debug_keyboard = false;
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 390:./tmk_core/common/command.c ****             }
 391:./tmk_core/common/command.c ****             break;
 392:./tmk_core/common/command.c **** 
 393:./tmk_core/common/command.c ****         // debug matrix toggle
 394:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 396:./tmk_core/common/command.c ****             if (debug_matrix) {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 398:./tmk_core/common/command.c ****                 debug_enable = true;
 399:./tmk_core/common/command.c ****             } else {
 400:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 401:./tmk_core/common/command.c ****             }
 402:./tmk_core/common/command.c ****             break;
 403:./tmk_core/common/command.c **** 
 404:./tmk_core/common/command.c ****         // debug keyboard toggle
 405:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 407:./tmk_core/common/command.c ****             if (debug_keyboard) {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 409:./tmk_core/common/command.c ****                 debug_enable = true;
 410:./tmk_core/common/command.c ****             } else {
 411:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 412:./tmk_core/common/command.c ****             }
 413:./tmk_core/common/command.c ****             break;
 414:./tmk_core/common/command.c **** 
 415:./tmk_core/common/command.c ****         // debug mouse toggle
 416:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 419:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 421:./tmk_core/common/command.c ****             } else {
 422:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 423:./tmk_core/common/command.c ****             }
 424:./tmk_core/common/command.c ****             break;
 425:./tmk_core/common/command.c **** 
 426:./tmk_core/common/command.c **** 		// print version
 427:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 428:./tmk_core/common/command.c ****         	print_version();
 429:./tmk_core/common/command.c **** 		    break;
 430:./tmk_core/common/command.c **** 
 431:./tmk_core/common/command.c **** 		// print status
 432:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 433:./tmk_core/common/command.c **** 			print_status();
 434:./tmk_core/common/command.c ****             break;
 435:./tmk_core/common/command.c **** 
 436:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 437:./tmk_core/common/command.c **** 
 438:./tmk_core/common/command.c **** 		// NKRO toggle
 439:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 442:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 443:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 444:./tmk_core/common/command.c ****             } else {
 445:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 446:./tmk_core/common/command.c ****             }
 447:./tmk_core/common/command.c ****             break;
 448:./tmk_core/common/command.c **** #endif
 449:./tmk_core/common/command.c **** 
 450:./tmk_core/common/command.c **** 		// switch layers
 451:./tmk_core/common/command.c **** 
 452:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 453:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 454:./tmk_core/common/command.c ****             switch_default_layer(0);
 455:./tmk_core/common/command.c ****             break;
 456:./tmk_core/common/command.c **** 
 457:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 458:./tmk_core/common/command.c **** 
 459:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 460:./tmk_core/common/command.c ****             switch_default_layer(0);
 461:./tmk_core/common/command.c ****             break;
 462:./tmk_core/common/command.c **** 
 463:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 464:./tmk_core/common/command.c ****             switch_default_layer(1);
 465:./tmk_core/common/command.c ****             break;
 466:./tmk_core/common/command.c **** 
 467:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 468:./tmk_core/common/command.c ****             switch_default_layer(2);
 469:./tmk_core/common/command.c ****             break;
 470:./tmk_core/common/command.c **** 
 471:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 472:./tmk_core/common/command.c ****             switch_default_layer(3);
 473:./tmk_core/common/command.c ****             break;
 474:./tmk_core/common/command.c **** 
 475:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 476:./tmk_core/common/command.c ****             switch_default_layer(4);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c **** 
 479:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 480:./tmk_core/common/command.c ****             switch_default_layer(5);
 481:./tmk_core/common/command.c ****             break;
 482:./tmk_core/common/command.c **** 
 483:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 484:./tmk_core/common/command.c ****             switch_default_layer(6);
 485:./tmk_core/common/command.c ****             break;
 486:./tmk_core/common/command.c **** 
 487:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 488:./tmk_core/common/command.c ****             switch_default_layer(7);
 489:./tmk_core/common/command.c ****             break;
 490:./tmk_core/common/command.c **** 
 491:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 492:./tmk_core/common/command.c ****             switch_default_layer(8);
 493:./tmk_core/common/command.c ****             break;
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 496:./tmk_core/common/command.c ****             switch_default_layer(9);
 497:./tmk_core/common/command.c ****             break;
 498:./tmk_core/common/command.c **** #endif
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c **** 
 501:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 502:./tmk_core/common/command.c **** 
 503:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c ****         case KC_F10:
 507:./tmk_core/common/command.c ****             switch_default_layer(0);
 508:./tmk_core/common/command.c ****             break;
 509:./tmk_core/common/command.c **** #endif
 510:./tmk_core/common/command.c **** 
 511:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 512:./tmk_core/common/command.c **** 
 513:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c ****         case KC_0:
 517:./tmk_core/common/command.c ****             switch_default_layer(0);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c **** #endif
 520:./tmk_core/common/command.c **** 
 521:./tmk_core/common/command.c ****         default:
 522:./tmk_core/common/command.c ****             print("?");
 523:./tmk_core/common/command.c ****             return false;
 524:./tmk_core/common/command.c ****     }
 525:./tmk_core/common/command.c ****     return true;
 526:./tmk_core/common/command.c **** }
 527:./tmk_core/common/command.c **** 
 528:./tmk_core/common/command.c **** 
 529:./tmk_core/common/command.c **** /***********************************************************
 530:./tmk_core/common/command.c ****  * Command console
 531:./tmk_core/common/command.c ****  ***********************************************************/
 532:./tmk_core/common/command.c **** static void command_console_help(void)
 533:./tmk_core/common/command.c **** {
 534:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 535:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 536:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 537:./tmk_core/common/command.c ****           "m:	mousekey\n"
 538:./tmk_core/common/command.c **** #endif
 539:./tmk_core/common/command.c ****     );
 540:./tmk_core/common/command.c **** }
 541:./tmk_core/common/command.c **** 
 542:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 543:./tmk_core/common/command.c **** {
 544:./tmk_core/common/command.c ****     switch (code) {
 545:./tmk_core/common/command.c ****         case KC_H:
 546:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 547:./tmk_core/common/command.c ****             command_console_help();
 548:./tmk_core/common/command.c ****             break;
 549:./tmk_core/common/command.c ****         case KC_Q:
 550:./tmk_core/common/command.c ****         case KC_ESC:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 552:./tmk_core/common/command.c ****             return false;
 553:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 554:./tmk_core/common/command.c ****         case KC_M:
 555:./tmk_core/common/command.c ****             mousekey_console_help();
 556:./tmk_core/common/command.c ****             print("M> ");
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 558:./tmk_core/common/command.c ****             return true;
 559:./tmk_core/common/command.c **** #endif
 560:./tmk_core/common/command.c ****         default:
 561:./tmk_core/common/command.c ****             print("?");
 562:./tmk_core/common/command.c ****             return false;
 563:./tmk_core/common/command.c ****     }
 564:./tmk_core/common/command.c ****     print("C> ");
 565:./tmk_core/common/command.c ****     return true;
 566:./tmk_core/common/command.c **** }
 567:./tmk_core/common/command.c **** 
 568:./tmk_core/common/command.c **** 
 569:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 570:./tmk_core/common/command.c **** /***********************************************************
 571:./tmk_core/common/command.c ****  * Mousekey console
 572:./tmk_core/common/command.c ****  ***********************************************************/
 573:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 574:./tmk_core/common/command.c **** 
 575:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 576:./tmk_core/common/command.c **** {
 577:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 578:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 579:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 580:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 581:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 582:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 583:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 584:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 585:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 586:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 587:./tmk_core/common/command.c **** 
 588:./tmk_core/common/command.c **** }
 589:./tmk_core/common/command.c **** 
 590:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 591:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 592:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 593:./tmk_core/common/command.c **** {
  15               		.loc 1 593 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 594:./tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 594 0
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L3
  25 0004 00F4      		brsh .L4
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L5
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L6
  30 000e 0895      		ret
  31               	.L4:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L5:
 595:./tmk_core/common/command.c ****         case 1:
 596:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 596 0
  42 0020 8091 0000 		lds r24,mk_delay
  43               	.LVL1:
  44 0024 262F      		mov r18,r22
  45 0026 30E0      		ldi r19,0
  46 0028 280F      		add r18,r24
  47 002a 311D      		adc r19,__zero_reg__
  48 002c 2F3F      		cpi r18,-1
  49 002e 3105      		cpc r19,__zero_reg__
  50 0030 04F4      		brge .L10
 597:./tmk_core/common/command.c ****                 mk_delay += inc;
  51               		.loc 1 597 0
  52 0032 680F      		add r22,r24
  53               	.LVL2:
  54 0034 6093 0000 		sts mk_delay,r22
  55 0038 0895      		ret
  56               	.LVL3:
  57               	.L10:
 598:./tmk_core/common/command.c ****             else
 599:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  58               		.loc 1 599 0
  59 003a 8FEF      		ldi r24,lo8(-1)
  60 003c 8093 0000 		sts mk_delay,r24
  61 0040 0895      		ret
  62               	.LVL4:
  63               	.L6:
 600:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 601:./tmk_core/common/command.c ****             break;
 602:./tmk_core/common/command.c ****         case 2:
 603:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  64               		.loc 1 603 0
  65 0042 8091 0000 		lds r24,mk_interval
  66               	.LVL5:
  67 0046 262F      		mov r18,r22
  68 0048 30E0      		ldi r19,0
  69 004a 280F      		add r18,r24
  70 004c 311D      		adc r19,__zero_reg__
  71 004e 2F3F      		cpi r18,-1
  72 0050 3105      		cpc r19,__zero_reg__
  73 0052 04F4      		brge .L11
 604:./tmk_core/common/command.c ****                 mk_interval += inc;
  74               		.loc 1 604 0
  75 0054 680F      		add r22,r24
  76               	.LVL6:
  77 0056 6093 0000 		sts mk_interval,r22
  78 005a 0895      		ret
  79               	.LVL7:
  80               	.L11:
 605:./tmk_core/common/command.c ****             else
 606:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  81               		.loc 1 606 0
  82 005c 8FEF      		ldi r24,lo8(-1)
  83 005e 8093 0000 		sts mk_interval,r24
  84 0062 0895      		ret
  85               	.LVL8:
  86               	.L3:
 607:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 608:./tmk_core/common/command.c ****             break;
 609:./tmk_core/common/command.c ****         case 3:
 610:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  87               		.loc 1 610 0
  88 0064 8091 0000 		lds r24,mk_max_speed
  89               	.LVL9:
  90 0068 262F      		mov r18,r22
  91 006a 30E0      		ldi r19,0
  92 006c 280F      		add r18,r24
  93 006e 311D      		adc r19,__zero_reg__
  94 0070 2F3F      		cpi r18,-1
  95 0072 3105      		cpc r19,__zero_reg__
  96 0074 04F4      		brge .L12
 611:./tmk_core/common/command.c ****                 mk_max_speed += inc;
  97               		.loc 1 611 0
  98 0076 680F      		add r22,r24
  99               	.LVL10:
 100 0078 6093 0000 		sts mk_max_speed,r22
 101 007c 0895      		ret
 102               	.LVL11:
 103               	.L12:
 612:./tmk_core/common/command.c ****             else
 613:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 104               		.loc 1 613 0
 105 007e 8FEF      		ldi r24,lo8(-1)
 106 0080 8093 0000 		sts mk_max_speed,r24
 107 0084 0895      		ret
 108               	.LVL12:
 109               	.L8:
 614:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 615:./tmk_core/common/command.c ****             break;
 616:./tmk_core/common/command.c ****         case 4:
 617:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 110               		.loc 1 617 0
 111 0086 8091 0000 		lds r24,mk_time_to_max
 112               	.LVL13:
 113 008a 262F      		mov r18,r22
 114 008c 30E0      		ldi r19,0
 115 008e 280F      		add r18,r24
 116 0090 311D      		adc r19,__zero_reg__
 117 0092 2F3F      		cpi r18,-1
 118 0094 3105      		cpc r19,__zero_reg__
 119 0096 04F4      		brge .L13
 618:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 120               		.loc 1 618 0
 121 0098 680F      		add r22,r24
 122               	.LVL14:
 123 009a 6093 0000 		sts mk_time_to_max,r22
 124 009e 0895      		ret
 125               	.LVL15:
 126               	.L13:
 619:./tmk_core/common/command.c ****             else
 620:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 127               		.loc 1 620 0
 128 00a0 8FEF      		ldi r24,lo8(-1)
 129 00a2 8093 0000 		sts mk_time_to_max,r24
 130 00a6 0895      		ret
 131               	.LVL16:
 132               	.L7:
 621:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 622:./tmk_core/common/command.c ****             break;
 623:./tmk_core/common/command.c ****         case 5:
 624:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 133               		.loc 1 624 0
 134 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 135               	.LVL17:
 136 00ac 262F      		mov r18,r22
 137 00ae 30E0      		ldi r19,0
 138 00b0 280F      		add r18,r24
 139 00b2 311D      		adc r19,__zero_reg__
 140 00b4 2F3F      		cpi r18,-1
 141 00b6 3105      		cpc r19,__zero_reg__
 142 00b8 04F4      		brge .L14
 625:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 143               		.loc 1 625 0
 144 00ba 680F      		add r22,r24
 145               	.LVL18:
 146 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 147 00c0 0895      		ret
 148               	.LVL19:
 149               	.L14:
 626:./tmk_core/common/command.c ****             else
 627:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 150               		.loc 1 627 0
 151 00c2 8FEF      		ldi r24,lo8(-1)
 152 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 153 00c8 0895      		ret
 154               	.LVL20:
 155               	.L9:
 628:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 629:./tmk_core/common/command.c ****             break;
 630:./tmk_core/common/command.c ****         case 6:
 631:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 156               		.loc 1 631 0
 157 00ca 2091 0000 		lds r18,mk_wheel_time_to_max
 158 00ce 862F      		mov r24,r22
 159               	.LVL21:
 160 00d0 90E0      		ldi r25,0
 161 00d2 820F      		add r24,r18
 162 00d4 911D      		adc r25,__zero_reg__
 163 00d6 8F3F      		cpi r24,-1
 164 00d8 9105      		cpc r25,__zero_reg__
 165 00da 04F4      		brge .L15
 632:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 166               		.loc 1 632 0
 167 00dc 620F      		add r22,r18
 168               	.LVL22:
 169 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 170 00e2 0895      		ret
 171               	.LVL23:
 172               	.L15:
 633:./tmk_core/common/command.c ****             else
 634:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 173               		.loc 1 634 0
 174 00e4 8FEF      		ldi r24,lo8(-1)
 175 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 176 00ea 0895      		ret
 177               		.cfi_endproc
 178               	.LFE117:
 180               		.section	.text.mousekey_param_dec,"ax",@progbits
 182               	mousekey_param_dec:
 183               	.LFB118:
 635:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 636:./tmk_core/common/command.c ****             break;
 637:./tmk_core/common/command.c ****     }
 638:./tmk_core/common/command.c **** }
 639:./tmk_core/common/command.c **** 
 640:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 641:./tmk_core/common/command.c **** {
 184               		.loc 1 641 0
 185               		.cfi_startproc
 186               	.LVL24:
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 642:./tmk_core/common/command.c ****     switch (param) {
 191               		.loc 1 642 0
 192 0000 8330      		cpi r24,lo8(3)
 193 0002 01F0      		breq .L18
 194 0004 00F4      		brsh .L19
 195 0006 8130      		cpi r24,lo8(1)
 196 0008 01F0      		breq .L20
 197 000a 8230      		cpi r24,lo8(2)
 198 000c 01F0      		breq .L21
 199 000e 0895      		ret
 200               	.L19:
 201 0010 8530      		cpi r24,lo8(5)
 202 0012 01F0      		breq .L22
 203 0014 00F0      		brlo .L23
 204 0016 8630      		cpi r24,lo8(6)
 205 0018 01F0      		breq .L24
 206 001a 0895      		ret
 207               	.L20:
 643:./tmk_core/common/command.c ****         case 1:
 644:./tmk_core/common/command.c ****             if (mk_delay > dec)
 208               		.loc 1 644 0
 209 001c 8091 0000 		lds r24,mk_delay
 210               	.LVL25:
 211 0020 6817      		cp r22,r24
 212 0022 00F4      		brsh .L25
 645:./tmk_core/common/command.c ****                 mk_delay -= dec;
 213               		.loc 1 645 0
 214 0024 861B      		sub r24,r22
 215 0026 8093 0000 		sts mk_delay,r24
 216 002a 0895      		ret
 217               	.L25:
 646:./tmk_core/common/command.c ****             else
 647:./tmk_core/common/command.c ****                 mk_delay = 0;
 218               		.loc 1 647 0
 219 002c 1092 0000 		sts mk_delay,__zero_reg__
 220 0030 0895      		ret
 221               	.LVL26:
 222               	.L21:
 648:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 649:./tmk_core/common/command.c ****             break;
 650:./tmk_core/common/command.c ****         case 2:
 651:./tmk_core/common/command.c ****             if (mk_interval > dec)
 223               		.loc 1 651 0
 224 0032 8091 0000 		lds r24,mk_interval
 225               	.LVL27:
 226 0036 6817      		cp r22,r24
 227 0038 00F4      		brsh .L26
 652:./tmk_core/common/command.c ****                 mk_interval -= dec;
 228               		.loc 1 652 0
 229 003a 861B      		sub r24,r22
 230 003c 8093 0000 		sts mk_interval,r24
 231 0040 0895      		ret
 232               	.L26:
 653:./tmk_core/common/command.c ****             else
 654:./tmk_core/common/command.c ****                 mk_interval = 0;
 233               		.loc 1 654 0
 234 0042 1092 0000 		sts mk_interval,__zero_reg__
 235 0046 0895      		ret
 236               	.LVL28:
 237               	.L18:
 655:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 656:./tmk_core/common/command.c ****             break;
 657:./tmk_core/common/command.c ****         case 3:
 658:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 238               		.loc 1 658 0
 239 0048 8091 0000 		lds r24,mk_max_speed
 240               	.LVL29:
 241 004c 6817      		cp r22,r24
 242 004e 00F4      		brsh .L27
 659:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 243               		.loc 1 659 0
 244 0050 861B      		sub r24,r22
 245 0052 8093 0000 		sts mk_max_speed,r24
 246 0056 0895      		ret
 247               	.L27:
 660:./tmk_core/common/command.c ****             else
 661:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 248               		.loc 1 661 0
 249 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 250 005c 0895      		ret
 251               	.LVL30:
 252               	.L23:
 662:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 663:./tmk_core/common/command.c ****             break;
 664:./tmk_core/common/command.c ****         case 4:
 665:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 253               		.loc 1 665 0
 254 005e 8091 0000 		lds r24,mk_time_to_max
 255               	.LVL31:
 256 0062 6817      		cp r22,r24
 257 0064 00F4      		brsh .L28
 666:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 258               		.loc 1 666 0
 259 0066 861B      		sub r24,r22
 260 0068 8093 0000 		sts mk_time_to_max,r24
 261 006c 0895      		ret
 262               	.L28:
 667:./tmk_core/common/command.c ****             else
 668:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 263               		.loc 1 668 0
 264 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 265 0072 0895      		ret
 266               	.LVL32:
 267               	.L22:
 669:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 670:./tmk_core/common/command.c ****             break;
 671:./tmk_core/common/command.c ****         case 5:
 672:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 268               		.loc 1 672 0
 269 0074 8091 0000 		lds r24,mk_wheel_max_speed
 270               	.LVL33:
 271 0078 6817      		cp r22,r24
 272 007a 00F4      		brsh .L29
 673:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 273               		.loc 1 673 0
 274 007c 861B      		sub r24,r22
 275 007e 8093 0000 		sts mk_wheel_max_speed,r24
 276 0082 0895      		ret
 277               	.L29:
 674:./tmk_core/common/command.c ****             else
 675:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 278               		.loc 1 675 0
 279 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 280 0088 0895      		ret
 281               	.LVL34:
 282               	.L24:
 676:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 677:./tmk_core/common/command.c ****             break;
 678:./tmk_core/common/command.c ****         case 6:
 679:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 283               		.loc 1 679 0
 284 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 285               	.LVL35:
 286 008e 6817      		cp r22,r24
 287 0090 00F4      		brsh .L30
 680:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 288               		.loc 1 680 0
 289 0092 861B      		sub r24,r22
 290 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 291 0098 0895      		ret
 292               	.L30:
 681:./tmk_core/common/command.c ****             else
 682:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 293               		.loc 1 682 0
 294 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 295 009e 0895      		ret
 296               		.cfi_endproc
 297               	.LFE118:
 299               		.section	.text.switch_default_layer,"ax",@progbits
 301               	switch_default_layer:
 302               	.LFB122:
 683:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 684:./tmk_core/common/command.c ****             break;
 685:./tmk_core/common/command.c ****     }
 686:./tmk_core/common/command.c **** }
 687:./tmk_core/common/command.c **** 
 688:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 689:./tmk_core/common/command.c **** {
 690:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 691:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 692:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 693:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 694:./tmk_core/common/command.c ****           "3:	max_speed\n"
 695:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 696:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 697:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 698:./tmk_core/common/command.c ****           "\n"
 699:./tmk_core/common/command.c ****           "p:	print values\n"
 700:./tmk_core/common/command.c ****           "d:	set defaults\n"
 701:./tmk_core/common/command.c ****           "up:	+1\n"
 702:./tmk_core/common/command.c ****           "down:	-1\n"
 703:./tmk_core/common/command.c ****           "pgup:	+10\n"
 704:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 705:./tmk_core/common/command.c ****           "\n"
 706:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 707:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 708:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 709:./tmk_core/common/command.c **** }
 710:./tmk_core/common/command.c **** 
 711:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 712:./tmk_core/common/command.c **** {
 713:./tmk_core/common/command.c ****     switch (code) {
 714:./tmk_core/common/command.c ****         case KC_H:
 715:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 716:./tmk_core/common/command.c ****             mousekey_console_help();
 717:./tmk_core/common/command.c ****             break;
 718:./tmk_core/common/command.c ****         case KC_Q:
 719:./tmk_core/common/command.c ****         case KC_ESC:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 722:./tmk_core/common/command.c ****             } else {
 723:./tmk_core/common/command.c ****                 print("C> ");
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 725:./tmk_core/common/command.c ****                 return false;
 726:./tmk_core/common/command.c ****             }
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_P:
 729:./tmk_core/common/command.c ****             mousekey_param_print();
 730:./tmk_core/common/command.c ****             break;
 731:./tmk_core/common/command.c ****         case KC_1:
 732:./tmk_core/common/command.c ****         case KC_2:
 733:./tmk_core/common/command.c ****         case KC_3:
 734:./tmk_core/common/command.c ****         case KC_4:
 735:./tmk_core/common/command.c ****         case KC_5:
 736:./tmk_core/common/command.c ****         case KC_6:
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_UP:
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_DOWN:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGUP:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_PGDN:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 750:./tmk_core/common/command.c ****             break;
 751:./tmk_core/common/command.c ****         case KC_D:
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 758:./tmk_core/common/command.c ****             print("set default\n");
 759:./tmk_core/common/command.c ****             break;
 760:./tmk_core/common/command.c ****         default:
 761:./tmk_core/common/command.c ****             print("?");
 762:./tmk_core/common/command.c ****             return false;
 763:./tmk_core/common/command.c ****     }
 764:./tmk_core/common/command.c ****     if (mousekey_param) {
 765:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 766:./tmk_core/common/command.c ****     } else {
 767:./tmk_core/common/command.c ****         print("M>" );
 768:./tmk_core/common/command.c ****     }
 769:./tmk_core/common/command.c ****     return true;
 770:./tmk_core/common/command.c **** }
 771:./tmk_core/common/command.c **** #endif
 772:./tmk_core/common/command.c **** 
 773:./tmk_core/common/command.c **** 
 774:./tmk_core/common/command.c **** /***********************************************************
 775:./tmk_core/common/command.c ****  * Utilities
 776:./tmk_core/common/command.c ****  ***********************************************************/
 777:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 778:./tmk_core/common/command.c **** {
 779:./tmk_core/common/command.c ****     switch (code) {
 780:./tmk_core/common/command.c ****         case KC_1: return 1;
 781:./tmk_core/common/command.c ****         case KC_2: return 2;
 782:./tmk_core/common/command.c ****         case KC_3: return 3;
 783:./tmk_core/common/command.c ****         case KC_4: return 4;
 784:./tmk_core/common/command.c ****         case KC_5: return 5;
 785:./tmk_core/common/command.c ****         case KC_6: return 6;
 786:./tmk_core/common/command.c ****         case KC_7: return 7;
 787:./tmk_core/common/command.c ****         case KC_8: return 8;
 788:./tmk_core/common/command.c ****         case KC_9: return 9;
 789:./tmk_core/common/command.c ****         case KC_0: return 0;
 790:./tmk_core/common/command.c ****     }
 791:./tmk_core/common/command.c ****     return 0;
 792:./tmk_core/common/command.c **** }
 793:./tmk_core/common/command.c **** 
 794:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 795:./tmk_core/common/command.c **** {
 303               		.loc 1 795 0
 304               		.cfi_startproc
 305               	.LVL36:
 306 0000 0F93      		push r16
 307               	.LCFI0:
 308               		.cfi_def_cfa_offset 3
 309               		.cfi_offset 16, -2
 310 0002 1F93      		push r17
 311               	.LCFI1:
 312               		.cfi_def_cfa_offset 4
 313               		.cfi_offset 17, -3
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 2 */
 317               	.L__stack_usage = 2
 796:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 797:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 318               		.loc 1 797 0
 319 0004 41E0      		ldi r20,lo8(1)
 320 0006 50E0      		ldi r21,0
 321 0008 60E0      		ldi r22,0
 322 000a 70E0      		ldi r23,0
 323 000c 8A01      		movw r16,r20
 324 000e 9B01      		movw r18,r22
 325 0010 00C0      		rjmp 2f
 326               		1:
 327 0012 000F      		lsl r16
 328 0014 111F      		rol r17
 329 0016 221F      		rol r18
 330 0018 331F      		rol r19
 331               		2:
 332 001a 8A95      		dec r24
 333 001c 02F4      		brpl 1b
 334 001e C901      		movw r24,r18
 335 0020 B801      		movw r22,r16
 336 0022 0E94 0000 		call default_layer_set
 337               	.LVL37:
 338               	/* epilogue start */
 798:./tmk_core/common/command.c ****     clear_keyboard();
 799:./tmk_core/common/command.c **** }
 339               		.loc 1 799 0
 340 0026 1F91      		pop r17
 341 0028 0F91      		pop r16
 798:./tmk_core/common/command.c ****     clear_keyboard();
 342               		.loc 1 798 0
 343 002a 0C94 0000 		jmp clear_keyboard
 344               	.LVL38:
 345               		.cfi_endproc
 346               	.LFE122:
 348               		.section	.text.command_common,"ax",@progbits
 350               	command_common:
 351               	.LFB113:
 307:./tmk_core/common/command.c **** 
 352               		.loc 1 307 0
 353               		.cfi_startproc
 354               	.LVL39:
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 0 */
 358               	.L__stack_usage = 0
 313:./tmk_core/common/command.c **** 
 359               		.loc 1 313 0
 360 0000 8732      		cpi r24,lo8(39)
 361 0002 00F0      		brlo .+2
 362 0004 00C0      		rjmp .L34
 363 0006 8E31      		cpi r24,lo8(30)
 364 0008 00F0      		brlo .+2
 365 000a 00C0      		rjmp .L35
 366 000c 8031      		cpi r24,lo8(16)
 367 000e 01F4      		brne .+2
 368 0010 00C0      		rjmp .L36
 369 0012 00F4      		brsh .L37
 370 0014 8730      		cpi r24,lo8(7)
 371 0016 01F4      		brne .+2
 372 0018 00C0      		rjmp .L38
 373 001a 00F4      		brsh .L39
 374 001c 8630      		cpi r24,lo8(6)
 375 001e 01F4      		brne .+2
 376 0020 00C0      		rjmp .L40
 377               	.L56:
 523:./tmk_core/common/command.c ****     }
 378               		.loc 1 523 0
 379 0022 80E0      		ldi r24,0
 380               	.LVL40:
 526:./tmk_core/common/command.c **** 
 381               		.loc 1 526 0
 382 0024 0895      		ret
 383               	.LVL41:
 384               	.L39:
 313:./tmk_core/common/command.c **** 
 385               		.loc 1 313 0
 386 0026 8B30      		cpi r24,lo8(11)
 387 0028 01F4      		brne .+2
 388 002a 00C0      		rjmp .L80
 389 002c 8E30      		cpi r24,lo8(14)
 390 002e 01F4      		brne .L56
 406:./tmk_core/common/command.c ****             if (debug_keyboard) {
 391               		.loc 1 406 0
 392 0030 8091 0000 		lds r24,debug_config
 393               	.LVL42:
 394 0034 82FB      		bst r24,2
 395 0036 9927      		clr r25
 396 0038 90F9      		bld r25,0
 397 003a 21E0      		ldi r18,lo8(1)
 398 003c 9227      		eor r25,r18
 399 003e 90FB      		bst r25,0
 400 0040 82F9      		bld r24,2
 401 0042 8093 0000 		sts debug_config,r24
 407:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 402               		.loc 1 407 0
 403 0046 82FD      		sbrc r24,2
 404 0048 00C0      		rjmp .L55
 405 004a 00C0      		rjmp .L80
 406               	.LVL43:
 407               	.L37:
 313:./tmk_core/common/command.c **** 
 408               		.loc 1 313 0
 409 004c 8631      		cpi r24,lo8(22)
 410 004e 01F4      		brne .+2
 411 0050 00C0      		rjmp .L80
 412 0052 00F4      		brsh .L43
 413 0054 8131      		cpi r24,lo8(17)
 414 0056 01F4      		brne .L56
 440:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 415               		.loc 1 440 0
 416 0058 0E94 0000 		call clear_keyboard
 417               	.LVL44:
 441:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 418               		.loc 1 441 0
 419 005c 8091 0000 		lds r24,keymap_config
 420 0060 87FB      		bst r24,7
 421 0062 9927      		clr r25
 422 0064 90F9      		bld r25,0
 423 0066 21E0      		ldi r18,lo8(1)
 424 0068 9227      		eor r25,r18
 425 006a 90FB      		bst r25,0
 426 006c 87F9      		bld r24,7
 427 006e 8093 0000 		sts keymap_config,r24
 428 0072 00C0      		rjmp .L80
 429               	.LVL45:
 430               	.L43:
 313:./tmk_core/common/command.c **** 
 431               		.loc 1 313 0
 432 0074 8931      		cpi r24,lo8(25)
 433 0076 01F0      		breq .L80
 434 0078 8B31      		cpi r24,lo8(27)
 435 007a 01F4      		brne .L56
 395:./tmk_core/common/command.c ****             if (debug_matrix) {
 436               		.loc 1 395 0
 437 007c 8091 0000 		lds r24,debug_config
 438               	.LVL46:
 439 0080 81FB      		bst r24,1
 440 0082 9927      		clr r25
 441 0084 90F9      		bld r25,0
 442 0086 21E0      		ldi r18,lo8(1)
 443 0088 9227      		eor r25,r18
 444 008a 90FB      		bst r25,0
 445 008c 81F9      		bld r24,1
 446 008e 8093 0000 		sts debug_config,r24
 396:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 447               		.loc 1 396 0
 448 0092 81FF      		sbrs r24,1
 449 0094 00C0      		rjmp .L80
 450               	.L55:
 398:./tmk_core/common/command.c ****             } else {
 451               		.loc 1 398 0
 452 0096 8091 0000 		lds r24,debug_config
 453 009a 8160      		ori r24,lo8(1<<0)
 454 009c 00C0      		rjmp .L81
 455               	.LVL47:
 456               	.L34:
 313:./tmk_core/common/command.c **** 
 457               		.loc 1 313 0
 458 009e 8833      		cpi r24,lo8(56)
 459 00a0 01F0      		breq .L80
 460 00a2 00F4      		brsh .L46
 461 00a4 8932      		cpi r24,lo8(41)
 462 00a6 01F0      		breq .L48
 463 00a8 8533      		cpi r24,lo8(53)
 464 00aa 01F0      		breq .L48
 465 00ac 8732      		cpi r24,lo8(39)
 466 00ae 01F0      		breq .+2
 467 00b0 00C0      		rjmp .L56
 468               	.L48:
 517:./tmk_core/common/command.c ****             break;
 469               		.loc 1 517 0
 470 00b2 80E0      		ldi r24,0
 471               	.LVL48:
 472 00b4 00C0      		rjmp .L79
 473               	.LVL49:
 474               	.L46:
 313:./tmk_core/common/command.c **** 
 475               		.loc 1 313 0
 476 00b6 8334      		cpi r24,lo8(67)
 477 00b8 01F0      		breq .L48
 478 00ba 00F4      		brsh .L50
 479 00bc 8A33      		cpi r24,lo8(58)
 480 00be 00F4      		brsh .+2
 481 00c0 00C0      		rjmp .L56
 504:./tmk_core/common/command.c ****             break;
 482               		.loc 1 504 0
 483 00c2 8953      		subi r24,lo8(-(-57))
 484               	.LVL50:
 485               	.L79:
 517:./tmk_core/common/command.c ****             break;
 486               		.loc 1 517 0
 487 00c4 0E94 0000 		call switch_default_layer
 488               	.LVL51:
 489 00c8 00C0      		rjmp .L80
 490               	.LVL52:
 491               	.L50:
 313:./tmk_core/common/command.c **** 
 492               		.loc 1 313 0
 493 00ca 8834      		cpi r24,lo8(72)
 494 00cc 01F0      		breq .+2
 495 00ce 00C0      		rjmp .L56
 369:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 496               		.loc 1 369 0
 497 00d0 0E94 0000 		call clear_keyboard
 498               	.LVL53:
 499               	.LBB4:
 500               	.LBB5:
 501               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 502               		.loc 2 187 0
 503 00d4 2FEF      		ldi r18,lo8(3199999)
 504 00d6 83ED      		ldi r24,hi8(3199999)
 505 00d8 90E3      		ldi r25,hlo8(3199999)
 506 00da 2150      	1:	subi r18,1
 507 00dc 8040      		sbci r24,0
 508 00de 9040      		sbci r25,0
 509 00e0 01F4      		brne 1b
 510 00e2 00C0      		rjmp .
 511 00e4 0000      		nop
 512               	.LVL54:
 513               	.LBE5:
 514               	.LBE4:
 377:./tmk_core/common/command.c ****             break;
 515               		.loc 1 377 0
 516 00e6 0E94 0000 		call bootloader_jump
 517               	.LVL55:
 518               	.L80:
 525:./tmk_core/common/command.c **** }
 519               		.loc 1 525 0
 520 00ea 81E0      		ldi r24,lo8(1)
 518:./tmk_core/common/command.c **** #endif
 521               		.loc 1 518 0
 522 00ec 0895      		ret
 523               	.LVL56:
 524               	.L40:
 358:./tmk_core/common/command.c ****             debug_keyboard = false;
 525               		.loc 1 358 0
 526 00ee 8091 0000 		lds r24,debug_config
 527               	.LVL57:
 361:./tmk_core/common/command.c ****             command_console_help();
 528               		.loc 1 361 0
 529 00f2 817F      		andi r24,lo8(-15)
 530 00f4 8E7F      		andi r24,lo8(~(1<<0))
 531 00f6 8093 0000 		sts debug_config,r24
 364:./tmk_core/common/command.c ****             break;
 532               		.loc 1 364 0
 533 00fa 81E0      		ldi r24,lo8(1)
 534 00fc 8093 0000 		sts command_state,r24
 365:./tmk_core/common/command.c **** 
 535               		.loc 1 365 0
 536 0100 0895      		ret
 537               	.LVL58:
 538               	.L38:
 382:./tmk_core/common/command.c ****             if (debug_enable) {
 539               		.loc 1 382 0
 540 0102 8091 0000 		lds r24,debug_config
 541               	.LVL59:
 542 0106 982F      		mov r25,r24
 543 0108 9095      		com r25
 544 010a 90FB      		bst r25,0
 545 010c 80F9      		bld r24,0
 546 010e 8093 0000 		sts debug_config,r24
 383:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 547               		.loc 1 383 0
 548 0112 80FD      		sbrc r24,0
 549 0114 00C0      		rjmp .L80
 389:./tmk_core/common/command.c ****             }
 550               		.loc 1 389 0
 551 0116 897F      		andi r24,lo8(-7)
 552 0118 877F      		andi r24,lo8(~(1<<3))
 553               	.L81:
 398:./tmk_core/common/command.c ****             } else {
 554               		.loc 1 398 0
 555 011a 8093 0000 		sts debug_config,r24
 556 011e 00C0      		rjmp .L80
 557               	.LVL60:
 558               	.L36:
 417:./tmk_core/common/command.c ****             if (debug_mouse) {
 559               		.loc 1 417 0
 560 0120 8091 0000 		lds r24,debug_config
 561               	.LVL61:
 562 0124 83FB      		bst r24,3
 563 0126 9927      		clr r25
 564 0128 90F9      		bld r25,0
 565 012a 21E0      		ldi r18,lo8(1)
 566 012c 9227      		eor r25,r18
 567 012e 90FB      		bst r25,0
 568 0130 83F9      		bld r24,3
 569 0132 8093 0000 		sts debug_config,r24
 418:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 570               		.loc 1 418 0
 571 0136 83FD      		sbrc r24,3
 572 0138 00C0      		rjmp .L55
 573 013a 00C0      		rjmp .L80
 574               	.LVL62:
 575               	.L35:
 514:./tmk_core/common/command.c ****             break;
 576               		.loc 1 514 0
 577 013c 8D51      		subi r24,lo8(-(-29))
 578               	.LVL63:
 579 013e 00C0      		rjmp .L79
 580               		.cfi_endproc
 581               	.LFE113:
 583               		.section	.text.command_console_extra,"ax",@progbits
 584               		.weak	command_console_extra
 586               	command_console_extra:
 587               	.LFB109:
 113:./tmk_core/common/command.c ****     (void)code;
 588               		.loc 1 113 0
 589               		.cfi_startproc
 590               	.LVL64:
 591               	/* prologue: function */
 592               	/* frame size = 0 */
 593               	/* stack size = 0 */
 594               	.L__stack_usage = 0
 116:./tmk_core/common/command.c **** 
 595               		.loc 1 116 0
 596 0000 80E0      		ldi r24,0
 597               	.LVL65:
 598 0002 0895      		ret
 599               		.cfi_endproc
 600               	.LFE109:
 602               		.set	command_console_extra.localalias.0,command_console_extra
 603               		.section	.text.command_extra,"ax",@progbits
 604               		.weak	command_extra
 606               	command_extra:
 607               	.LFB124:
 608               		.cfi_startproc
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 0 */
 612               	.L__stack_usage = 0
 613 0000 0C94 0000 		jmp command_console_extra.localalias.0
 614               		.cfi_endproc
 615               	.LFE124:
 617               		.section	.text.numkey2num,"ax",@progbits
 618               	.global	numkey2num
 620               	numkey2num:
 621               	.LFB121:
 778:./tmk_core/common/command.c ****     switch (code) {
 622               		.loc 1 778 0
 623               		.cfi_startproc
 624               	.LVL66:
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 0 */
 628               	.L__stack_usage = 0
 629 0000 8E51      		subi r24,lo8(-(-30))
 630               	.LVL67:
 631 0002 8A30      		cpi r24,lo8(10)
 632 0004 00F4      		brsh .L86
 633 0006 E82F      		mov r30,r24
 634 0008 F0E0      		ldi r31,0
 635 000a E050      		subi r30,lo8(-(CSWTCH.33))
 636 000c F040      		sbci r31,hi8(-(CSWTCH.33))
 637 000e 8081      		ld r24,Z
 638               	.LVL68:
 639 0010 0895      		ret
 640               	.L86:
 778:./tmk_core/common/command.c ****     switch (code) {
 641               		.loc 1 778 0
 642 0012 80E0      		ldi r24,0
 792:./tmk_core/common/command.c **** 
 643               		.loc 1 792 0
 644 0014 0895      		ret
 645               		.cfi_endproc
 646               	.LFE121:
 648               		.section	.text.command_proc,"ax",@progbits
 649               	.global	command_proc
 651               	command_proc:
 652               	.LFB107:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 653               		.loc 1 77 0
 654               		.cfi_startproc
 655               	.LVL69:
 656 0000 CF93      		push r28
 657               	.LCFI2:
 658               		.cfi_def_cfa_offset 3
 659               		.cfi_offset 28, -2
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 1 */
 663               	.L__stack_usage = 1
 664 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 665               		.loc 1 78 0
 666 0004 8091 0000 		lds r24,command_state
 667               	.LVL70:
 668 0008 8130      		cpi r24,lo8(1)
 669 000a 01F0      		breq .L89
 670 000c 00F0      		brlo .L90
 671 000e 8230      		cpi r24,lo8(2)
 672 0010 01F4      		brne .+2
 673 0012 00C0      		rjmp .L91
  96:./tmk_core/common/command.c ****             return false;
 674               		.loc 1 96 0
 675 0014 1092 0000 		sts command_state,__zero_reg__
 676               	.L114:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 677               		.loc 1 81 0
 678 0018 80E0      		ldi r24,0
 679 001a 00C0      		rjmp .L87
 680               	.L90:
  80:./tmk_core/common/command.c ****                 return false;
 681               		.loc 1 80 0
 682 001c E091 0000 		lds r30,keyboard_report
 683 0020 F091 0000 		lds r31,keyboard_report+1
 684 0024 8081      		ld r24,Z
 685 0026 8131      		cpi r24,lo8(17)
 686 0028 01F0      		breq .L95
  80:./tmk_core/common/command.c ****                 return false;
 687               		.loc 1 80 0 is_stmt 0 discriminator 1
 688 002a 8232      		cpi r24,lo8(34)
 689 002c 01F4      		brne .L114
 690               	.L95:
  86:./tmk_core/common/command.c ****             else
 691               		.loc 1 86 0 is_stmt 1
 692 002e 8C2F      		mov r24,r28
 693 0030 0E94 0000 		call command_extra
 694               	.LVL71:
 695 0034 8111      		cpse r24,__zero_reg__
 696 0036 00C0      		rjmp .L116
  86:./tmk_core/common/command.c ****             else
 697               		.loc 1 86 0 is_stmt 0 discriminator 2
 698 0038 8C2F      		mov r24,r28
 699 003a 0E94 0000 		call command_common
 700               	.LVL72:
 701               	.L98:
  88:./tmk_core/common/command.c ****             break;
 702               		.loc 1 88 0 is_stmt 1 discriminator 6
 703 003e 8170      		andi r24,lo8(1)
 704               	.L87:
 705               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 706               		.loc 1 100 0
 707 0040 CF91      		pop r28
 708               	.LVL73:
 709 0042 0895      		ret
 710               	.LVL74:
 711               	.L89:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 712               		.loc 1 85 0
 713 0044 E091 0000 		lds r30,keyboard_report
 714 0048 F091 0000 		lds r31,keyboard_report+1
 715 004c 8081      		ld r24,Z
 716 004e 8131      		cpi r24,lo8(17)
 717 0050 01F0      		breq .L95
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 718               		.loc 1 85 0 is_stmt 0 discriminator 1
 719 0052 8232      		cpi r24,lo8(34)
 720 0054 01F0      		breq .L95
  88:./tmk_core/common/command.c ****             break;
 721               		.loc 1 88 0 is_stmt 1
 722 0056 8C2F      		mov r24,r28
 723 0058 0E94 0000 		call command_console_extra
 724               	.LVL75:
 725 005c 8111      		cpse r24,__zero_reg__
 726 005e 00C0      		rjmp .L118
 727               	.LVL76:
 728               	.LBB10:
 729               	.LBB11:
 544:./tmk_core/common/command.c ****         case KC_H:
 730               		.loc 1 544 0
 731 0060 C431      		cpi r28,lo8(20)
 732 0062 01F0      		breq .L100
 733 0064 00F4      		brsh .L101
 734 0066 CB30      		cpi r28,lo8(11)
 735 0068 01F0      		breq .L118
 736 006a C031      		cpi r28,lo8(16)
 737 006c 01F0      		breq .L102
 738               	.L146:
 739               	.LBE11:
 740               	.LBE10:
  88:./tmk_core/common/command.c ****             break;
 741               		.loc 1 88 0
 742 006e 80E0      		ldi r24,0
 743 0070 00C0      		rjmp .L98
 744               	.LVL77:
 745               	.L116:
  86:./tmk_core/common/command.c ****             else
 746               		.loc 1 86 0
 747 0072 81E0      		ldi r24,lo8(1)
 748 0074 90E0      		ldi r25,0
 749 0076 00C0      		rjmp .L98
 750               	.LVL78:
 751               	.L101:
 752               	.LBB14:
 753               	.LBB12:
 544:./tmk_core/common/command.c ****         case KC_H:
 754               		.loc 1 544 0
 755 0078 C932      		cpi r28,lo8(41)
 756 007a 01F0      		breq .L100
 757 007c C833      		cpi r28,lo8(56)
 758 007e 01F4      		brne .L146
 759               	.LVL79:
 760               	.L118:
 761               	.LBE12:
 762               	.LBE14:
  88:./tmk_core/common/command.c ****             break;
 763               		.loc 1 88 0
 764 0080 81E0      		ldi r24,lo8(1)
 765 0082 00C0      		rjmp .L98
 766               	.LVL80:
 767               	.L100:
 768               	.LBB15:
 769               	.LBB13:
 551:./tmk_core/common/command.c ****             return false;
 770               		.loc 1 551 0
 771 0084 1092 0000 		sts command_state,__zero_reg__
 772 0088 00C0      		rjmp .L146
 773               	.L102:
 557:./tmk_core/common/command.c ****             return true;
 774               		.loc 1 557 0
 775 008a 82E0      		ldi r24,lo8(2)
 776 008c 8093 0000 		sts command_state,r24
 777 0090 00C0      		rjmp .L118
 778               	.LVL81:
 779               	.L91:
 780               	.LBE13:
 781               	.LBE15:
 782               	.LBB16:
 783               	.LBB17:
 713:./tmk_core/common/command.c ****         case KC_H:
 784               		.loc 1 713 0
 785 0092 C932      		cpi r28,lo8(41)
 786 0094 01F0      		breq .L103
 787 0096 00F4      		brsh .L104
 788 0098 C431      		cpi r28,lo8(20)
 789 009a 01F0      		breq .L103
 790 009c 00F4      		brsh .L105
 791 009e C730      		cpi r28,lo8(7)
 792 00a0 01F0      		breq .L106
 793               	.L119:
 794               	.LBE17:
 795               	.LBE16:
  99:./tmk_core/common/command.c **** }
 796               		.loc 1 99 0
 797 00a2 81E0      		ldi r24,lo8(1)
 798 00a4 00C0      		rjmp .L87
 799               	.L105:
 800               	.LBB19:
 801               	.LBB18:
 713:./tmk_core/common/command.c ****         case KC_H:
 802               		.loc 1 713 0
 803 00a6 82EE      		ldi r24,lo8(-30)
 804 00a8 8C0F      		add r24,r28
 805 00aa 8630      		cpi r24,lo8(6)
 806 00ac 00F4      		brsh .L119
 737:./tmk_core/common/command.c ****             break;
 807               		.loc 1 737 0
 808 00ae 8C2F      		mov r24,r28
 809 00b0 0E94 0000 		call numkey2num
 810               	.LVL82:
 811 00b4 8093 0000 		sts mousekey_param,r24
 812 00b8 00C0      		rjmp .L119
 813               	.L104:
 713:./tmk_core/common/command.c ****         case KC_H:
 814               		.loc 1 713 0
 815 00ba CE34      		cpi r28,lo8(78)
 816 00bc 01F0      		breq .L108
 817 00be 00F4      		brsh .L109
 818 00c0 CB34      		cpi r28,lo8(75)
 819 00c2 01F4      		brne .L119
 746:./tmk_core/common/command.c ****             break;
 820               		.loc 1 746 0
 821 00c4 6AE0      		ldi r22,lo8(10)
 822 00c6 00C0      		rjmp .L149
 823               	.L109:
 713:./tmk_core/common/command.c ****         case KC_H:
 824               		.loc 1 713 0
 825 00c8 C135      		cpi r28,lo8(81)
 826 00ca 01F0      		breq .L111
 827 00cc C235      		cpi r28,lo8(82)
 828 00ce 01F4      		brne .L119
 740:./tmk_core/common/command.c ****             break;
 829               		.loc 1 740 0
 830 00d0 61E0      		ldi r22,lo8(1)
 831               	.L149:
 746:./tmk_core/common/command.c ****             break;
 832               		.loc 1 746 0
 833 00d2 8091 0000 		lds r24,mousekey_param
 834 00d6 0E94 0000 		call mousekey_param_inc
 835               	.LVL83:
 836 00da 00C0      		rjmp .L119
 837               	.L103:
 720:./tmk_core/common/command.c ****                 mousekey_param = 0;
 838               		.loc 1 720 0
 839 00dc 8091 0000 		lds r24,mousekey_param
 840 00e0 8823      		tst r24
 841 00e2 01F0      		breq .L113
 721:./tmk_core/common/command.c ****             } else {
 842               		.loc 1 721 0
 843 00e4 1092 0000 		sts mousekey_param,__zero_reg__
 844 00e8 00C0      		rjmp .L119
 845               	.L113:
 724:./tmk_core/common/command.c ****                 return false;
 846               		.loc 1 724 0
 847 00ea 81E0      		ldi r24,lo8(1)
 848 00ec 8093 0000 		sts command_state,r24
 849 00f0 00C0      		rjmp .L87
 850               	.L111:
 743:./tmk_core/common/command.c ****             break;
 851               		.loc 1 743 0
 852 00f2 61E0      		ldi r22,lo8(1)
 853               	.L148:
 749:./tmk_core/common/command.c ****             break;
 854               		.loc 1 749 0
 855 00f4 8091 0000 		lds r24,mousekey_param
 856 00f8 0E94 0000 		call mousekey_param_dec
 857               	.LVL84:
 858 00fc 00C0      		rjmp .L119
 859               	.L108:
 860 00fe 6AE0      		ldi r22,lo8(10)
 861 0100 00C0      		rjmp .L148
 862               	.L106:
 752:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 863               		.loc 1 752 0
 864 0102 1092 0000 		sts mk_delay,__zero_reg__
 753:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 865               		.loc 1 753 0
 866 0106 94E1      		ldi r25,lo8(20)
 867 0108 9093 0000 		sts mk_interval,r25
 754:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 868               		.loc 1 754 0
 869 010c 8093 0000 		sts mk_max_speed,r24
 755:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 870               		.loc 1 755 0
 871 0110 85E0      		ldi r24,lo8(5)
 872 0112 8093 0000 		sts mk_time_to_max,r24
 756:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 873               		.loc 1 756 0
 874 0116 88E0      		ldi r24,lo8(8)
 875 0118 8093 0000 		sts mk_wheel_max_speed,r24
 757:./tmk_core/common/command.c ****             print("set default\n");
 876               		.loc 1 757 0
 877 011c 88E2      		ldi r24,lo8(40)
 878 011e 8093 0000 		sts mk_wheel_time_to_max,r24
 879 0122 00C0      		rjmp .L119
 880               	.LBE18:
 881               	.LBE19:
 882               		.cfi_endproc
 883               	.LFE107:
 885               		.section	.rodata.CSWTCH.33,"a",@progbits
 888               	CSWTCH.33:
 889 0000 01        		.byte	1
 890 0001 02        		.byte	2
 891 0002 03        		.byte	3
 892 0003 04        		.byte	4
 893 0004 05        		.byte	5
 894 0005 06        		.byte	6
 895 0006 07        		.byte	7
 896 0007 08        		.byte	8
 897 0008 09        		.byte	9
 898 0009 00        		.byte	0
 899               		.section	.bss.mousekey_param,"aw",@nobits
 902               	mousekey_param:
 903 0000 00        		.zero	1
 904               	.global	command_state
 905               		.section	.bss.command_state,"aw",@nobits
 908               	command_state:
 909 0000 00        		.zero	1
 910               		.text
 911               	.Letext0:
 912               		.file 3 "/usr/avr/include/stdint.h"
 913               		.file 4 "/usr/lib/gcc/avr/6.3.0/include/stddef.h"
 914               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 915               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 916               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 917               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 918               		.file 9 "/usr/avr/include/stdio.h"
 919               		.file 10 "./tmk_core/common/report.h"
 920               		.file 11 "./tmk_core/common/host.h"
 921               		.file 12 "./tmk_core/common/debug.h"
 922               		.file 13 "./quantum/keycode_config.h"
 923               		.file 14 "./quantum/keymap.h"
 924               		.file 15 "./tmk_core/common/timer.h"
 925               		.file 16 "./tmk_core/common/action_layer.h"
 926               		.file 17 "./tmk_core/common/action_util.h"
 927               		.file 18 "./tmk_core/common/command.h"
 928               		.file 19 "/usr/avr/include/stdlib.h"
 929               		.file 20 "./tmk_core/common/mousekey.h"
 930               		.file 21 "./quantum/process_keycode/process_unicode_common.h"
 931               		.file 22 "./tmk_core/common/action.h"
 932               		.file 23 "./tmk_core/common/bootloader.h"
 933               		.file 24 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccSyqbJF.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSyqbJF.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSyqbJF.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSyqbJF.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSyqbJF.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSyqbJF.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccSyqbJF.s:182    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccSyqbJF.s:301    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccSyqbJF.s:350    .text.command_common:0000000000000000 command_common
     /tmp/ccSyqbJF.s:908    .bss.command_state:0000000000000000 command_state
     /tmp/ccSyqbJF.s:586    .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccSyqbJF.s:586    .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccSyqbJF.s:606    .text.command_extra:0000000000000000 command_extra
     /tmp/ccSyqbJF.s:620    .text.numkey2num:0000000000000000 numkey2num
     /tmp/ccSyqbJF.s:888    .rodata.CSWTCH.33:0000000000000000 CSWTCH.33
     /tmp/ccSyqbJF.s:651    .text.command_proc:0000000000000000 command_proc
     /tmp/ccSyqbJF.s:902    .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
keymap_config
bootloader_jump
keyboard_report
__do_copy_data
__do_clear_bss
