   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.timer_init,"ax",@progbits
  11               	.global	timer_init
  13               	timer_init:
  14               	.LFB5:
  15               		.file 1 "./tmk_core/common/avr/timer.c"
   1:./tmk_core/common/avr/timer.c **** /*
   2:./tmk_core/common/avr/timer.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/avr/timer.c **** 
   4:./tmk_core/common/avr/timer.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/avr/timer.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/avr/timer.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/avr/timer.c **** (at your option) any later version.
   8:./tmk_core/common/avr/timer.c **** 
   9:./tmk_core/common/avr/timer.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/avr/timer.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/avr/timer.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/avr/timer.c **** GNU General Public License for more details.
  13:./tmk_core/common/avr/timer.c **** 
  14:./tmk_core/common/avr/timer.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/avr/timer.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/avr/timer.c **** */
  17:./tmk_core/common/avr/timer.c **** 
  18:./tmk_core/common/avr/timer.c **** #include <avr/io.h>
  19:./tmk_core/common/avr/timer.c **** #include <avr/interrupt.h>
  20:./tmk_core/common/avr/timer.c **** #include <util/atomic.h>
  21:./tmk_core/common/avr/timer.c **** #include <stdint.h>
  22:./tmk_core/common/avr/timer.c **** #include "timer_avr.h"
  23:./tmk_core/common/avr/timer.c **** #include "timer.h"
  24:./tmk_core/common/avr/timer.c **** 
  25:./tmk_core/common/avr/timer.c **** 
  26:./tmk_core/common/avr/timer.c **** // counter resolution 1ms
  27:./tmk_core/common/avr/timer.c **** // NOTE: union { uint32_t timer32; struct { uint16_t dummy; uint16_t timer16; }}
  28:./tmk_core/common/avr/timer.c **** volatile uint32_t timer_count;
  29:./tmk_core/common/avr/timer.c **** 
  30:./tmk_core/common/avr/timer.c **** void timer_init(void)
  31:./tmk_core/common/avr/timer.c **** {
  16               		.loc 1 31 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  32:./tmk_core/common/avr/timer.c **** #if TIMER_PRESCALER == 1
  33:./tmk_core/common/avr/timer.c ****     uint8_t prescaler = 0x01;
  34:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 8
  35:./tmk_core/common/avr/timer.c ****     uint8_t prescaler = 0x02;
  36:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 64
  37:./tmk_core/common/avr/timer.c ****     uint8_t prescaler = 0x03;
  38:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 256
  39:./tmk_core/common/avr/timer.c ****     uint8_t prescaler = 0x04;
  40:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 1024
  41:./tmk_core/common/avr/timer.c ****     uint8_t prescaler = 0x05;
  42:./tmk_core/common/avr/timer.c **** #else
  43:./tmk_core/common/avr/timer.c **** #   error "Timer prescaler value is NOT vaild."
  44:./tmk_core/common/avr/timer.c **** #endif
  45:./tmk_core/common/avr/timer.c **** 
  46:./tmk_core/common/avr/timer.c **** #ifndef __AVR_ATmega32A__
  47:./tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  48:./tmk_core/common/avr/timer.c ****     TCCR0A = 0x02;
  23               		.loc 1 48 0
  24 0000 82E0      		ldi r24,lo8(2)
  25 0002 84BD      		out 0x24,r24
  49:./tmk_core/common/avr/timer.c **** 
  50:./tmk_core/common/avr/timer.c ****     TCCR0B = prescaler;
  26               		.loc 1 50 0
  27 0004 93E0      		ldi r25,lo8(3)
  28 0006 95BD      		out 0x25,r25
  51:./tmk_core/common/avr/timer.c **** 
  52:./tmk_core/common/avr/timer.c ****     OCR0A = TIMER_RAW_TOP;
  29               		.loc 1 52 0
  30 0008 9AEF      		ldi r25,lo8(-6)
  31 000a 97BD      		out 0x27,r25
  53:./tmk_core/common/avr/timer.c ****     TIMSK0 = (1<<OCIE0A);
  32               		.loc 1 53 0
  33 000c 8093 6E00 		sts 110,r24
  34 0010 0895      		ret
  35               		.cfi_endproc
  36               	.LFE5:
  38               		.section	.text.timer_clear,"ax",@progbits
  39               	.global	timer_clear
  41               	timer_clear:
  42               	.LFB6:
  54:./tmk_core/common/avr/timer.c **** #else
  55:./tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  56:./tmk_core/common/avr/timer.c ****     TCCR0 = (1 << WGM01) | prescaler;
  57:./tmk_core/common/avr/timer.c **** 
  58:./tmk_core/common/avr/timer.c ****     OCR0 = TIMER_RAW_TOP;
  59:./tmk_core/common/avr/timer.c ****     TIMSK = (1 << OCIE0);
  60:./tmk_core/common/avr/timer.c **** #endif
  61:./tmk_core/common/avr/timer.c **** }
  62:./tmk_core/common/avr/timer.c **** 
  63:./tmk_core/common/avr/timer.c **** inline
  64:./tmk_core/common/avr/timer.c **** void timer_clear(void)
  65:./tmk_core/common/avr/timer.c **** {
  43               		.loc 1 65 0
  44               		.cfi_startproc
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
  49               	.LBB27:
  66:./tmk_core/common/avr/timer.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  50               		.loc 1 66 0
  51 0000 8FB7      		in r24,__SREG__
  52               	.LVL1:
  53               	.LBB28:
  54               	.LBB29:
  55               		.file 2 "/usr/avr/include/util/atomic.h"
   1:/usr/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/avr/include/util/atomic.h **** 
   4:/usr/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/util/atomic.h **** 
   7:/usr/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/util/atomic.h **** 
  10:/usr/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/avr/include/util/atomic.h ****      distribution.
  14:/usr/avr/include/util/atomic.h **** 
  15:/usr/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/avr/include/util/atomic.h **** 
  19:/usr/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/avr/include/util/atomic.h **** */
  31:/usr/avr/include/util/atomic.h **** 
  32:/usr/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/avr/include/util/atomic.h **** 
  34:/usr/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/avr/include/util/atomic.h **** 
  37:/usr/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/avr/include/util/atomic.h **** 
  40:/usr/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/avr/include/util/atomic.h **** {
  44:/usr/avr/include/util/atomic.h ****     sei();
  45:/usr/avr/include/util/atomic.h ****     return 1;
  46:/usr/avr/include/util/atomic.h **** }
  47:/usr/avr/include/util/atomic.h **** 
  48:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/avr/include/util/atomic.h **** {
  50:/usr/avr/include/util/atomic.h ****     cli();
  56               		.loc 2 50 0
  57               	/* #APP */
  58               	 ;  50 "/usr/avr/include/util/atomic.h" 1
  59 0002 F894      		cli
  60               	 ;  0 "" 2
  61               	.LVL2:
  62               	/* #NOAPP */
  63               	.LBE29:
  64               	.LBE28:
  67:./tmk_core/common/avr/timer.c ****     timer_count = 0;
  65               		.loc 1 67 0
  66 0004 1092 0000 		sts timer_count,__zero_reg__
  67 0008 1092 0000 		sts timer_count+1,__zero_reg__
  68 000c 1092 0000 		sts timer_count+2,__zero_reg__
  69 0010 1092 0000 		sts timer_count+3,__zero_reg__
  70               	.LVL3:
  71               	.LBB30:
  72               	.LBB31:
  51:/usr/avr/include/util/atomic.h ****     return 1;
  52:/usr/avr/include/util/atomic.h **** }
  53:/usr/avr/include/util/atomic.h **** 
  54:/usr/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/avr/include/util/atomic.h **** {
  56:/usr/avr/include/util/atomic.h ****     sei();
  57:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/avr/include/util/atomic.h **** }
  60:/usr/avr/include/util/atomic.h **** 
  61:/usr/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/avr/include/util/atomic.h **** {
  63:/usr/avr/include/util/atomic.h ****     cli();
  64:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/avr/include/util/atomic.h **** }
  67:/usr/avr/include/util/atomic.h **** 
  68:/usr/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/avr/include/util/atomic.h **** {
  70:/usr/avr/include/util/atomic.h ****     SREG = *__s;
  73               		.loc 2 70 0
  74 0014 8FBF      		out __SREG__,r24
  71:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  75               		.loc 2 71 0
  76               	.LVL4:
  77 0016 0895      		ret
  78               	.LBE31:
  79               	.LBE30:
  80               	.LBE27:
  81               		.cfi_endproc
  82               	.LFE6:
  84               		.section	.text.timer_read,"ax",@progbits
  85               	.global	timer_read
  87               	timer_read:
  88               	.LFB7:
  68:./tmk_core/common/avr/timer.c ****   }
  69:./tmk_core/common/avr/timer.c **** }
  70:./tmk_core/common/avr/timer.c **** 
  71:./tmk_core/common/avr/timer.c **** inline
  72:./tmk_core/common/avr/timer.c **** uint16_t timer_read(void)
  73:./tmk_core/common/avr/timer.c **** {
  89               		.loc 1 73 0
  90               		.cfi_startproc
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 0 */
  94               	.L__stack_usage = 0
  95               	.LBB32:
  74:./tmk_core/common/avr/timer.c ****     uint32_t t;
  75:./tmk_core/common/avr/timer.c **** 
  76:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  96               		.loc 1 76 0
  97 0000 2FB7      		in r18,__SREG__
  98               	.LVL5:
  99               	.LBB33:
 100               	.LBB34:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 101               		.loc 2 50 0
 102               	/* #APP */
 103               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 104 0002 F894      		cli
 105               	 ;  0 "" 2
 106               	.LVL6:
 107               	/* #NOAPP */
 108               	.LBE34:
 109               	.LBE33:
  77:./tmk_core/common/avr/timer.c ****       t = timer_count;
 110               		.loc 1 77 0
 111 0004 8091 0000 		lds r24,timer_count
 112 0008 9091 0000 		lds r25,timer_count+1
 113 000c A091 0000 		lds r26,timer_count+2
 114 0010 B091 0000 		lds r27,timer_count+3
 115               	.LVL7:
 116               	.LBB35:
 117               	.LBB36:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 118               		.loc 2 70 0
 119 0014 2FBF      		out __SREG__,r18
 120               		.loc 2 71 0
 121               	.LVL8:
 122               	.LBE36:
 123               	.LBE35:
 124               	.LBE32:
  78:./tmk_core/common/avr/timer.c ****     }
  79:./tmk_core/common/avr/timer.c **** 
  80:./tmk_core/common/avr/timer.c ****     return (t & 0xFFFF);
  81:./tmk_core/common/avr/timer.c **** }
 125               		.loc 1 81 0
 126 0016 0895      		ret
 127               		.cfi_endproc
 128               	.LFE7:
 130               		.section	.text.timer_read32,"ax",@progbits
 131               	.global	timer_read32
 133               	timer_read32:
 134               	.LFB8:
  82:./tmk_core/common/avr/timer.c **** 
  83:./tmk_core/common/avr/timer.c **** inline
  84:./tmk_core/common/avr/timer.c **** uint32_t timer_read32(void)
  85:./tmk_core/common/avr/timer.c **** {
 135               		.loc 1 85 0
 136               		.cfi_startproc
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
 141               	.LBB37:
  86:./tmk_core/common/avr/timer.c ****     uint32_t t;
  87:./tmk_core/common/avr/timer.c **** 
  88:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 142               		.loc 1 88 0
 143 0000 2FB7      		in r18,__SREG__
 144               	.LVL9:
 145               	.LBB38:
 146               	.LBB39:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 147               		.loc 2 50 0
 148               	/* #APP */
 149               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 150 0002 F894      		cli
 151               	 ;  0 "" 2
 152               	.LVL10:
 153               	/* #NOAPP */
 154               	.LBE39:
 155               	.LBE38:
  89:./tmk_core/common/avr/timer.c ****       t = timer_count;
 156               		.loc 1 89 0
 157 0004 6091 0000 		lds r22,timer_count
 158 0008 7091 0000 		lds r23,timer_count+1
 159 000c 8091 0000 		lds r24,timer_count+2
 160 0010 9091 0000 		lds r25,timer_count+3
 161               	.LVL11:
 162               	.LBB40:
 163               	.LBB41:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 164               		.loc 2 70 0
 165 0014 2FBF      		out __SREG__,r18
 166               		.loc 2 71 0
 167               	.LVL12:
 168               	.LBE41:
 169               	.LBE40:
 170               	.LBE37:
  90:./tmk_core/common/avr/timer.c ****     }
  91:./tmk_core/common/avr/timer.c **** 
  92:./tmk_core/common/avr/timer.c ****     return t;
  93:./tmk_core/common/avr/timer.c **** }
 171               		.loc 1 93 0
 172 0016 0895      		ret
 173               		.cfi_endproc
 174               	.LFE8:
 176               		.section	.text.timer_elapsed,"ax",@progbits
 177               	.global	timer_elapsed
 179               	timer_elapsed:
 180               	.LFB9:
  94:./tmk_core/common/avr/timer.c **** 
  95:./tmk_core/common/avr/timer.c **** inline
  96:./tmk_core/common/avr/timer.c **** uint16_t timer_elapsed(uint16_t last)
  97:./tmk_core/common/avr/timer.c **** {
 181               		.loc 1 97 0
 182               		.cfi_startproc
 183               	.LVL13:
 184 0000 CF92      		push r12
 185               	.LCFI0:
 186               		.cfi_def_cfa_offset 3
 187               		.cfi_offset 12, -2
 188 0002 DF92      		push r13
 189               	.LCFI1:
 190               		.cfi_def_cfa_offset 4
 191               		.cfi_offset 13, -3
 192 0004 EF92      		push r14
 193               	.LCFI2:
 194               		.cfi_def_cfa_offset 5
 195               		.cfi_offset 14, -4
 196 0006 FF92      		push r15
 197               	.LCFI3:
 198               		.cfi_def_cfa_offset 6
 199               		.cfi_offset 15, -5
 200 0008 0F93      		push r16
 201               	.LCFI4:
 202               		.cfi_def_cfa_offset 7
 203               		.cfi_offset 16, -6
 204 000a 1F93      		push r17
 205               	.LCFI5:
 206               		.cfi_def_cfa_offset 8
 207               		.cfi_offset 17, -7
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 6 */
 211               	.L__stack_usage = 6
 212               	.LBB42:
  98:./tmk_core/common/avr/timer.c ****     uint32_t t;
  99:./tmk_core/common/avr/timer.c **** 
 100:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 213               		.loc 1 100 0
 214 000c 2FB7      		in r18,__SREG__
 215               	.LVL14:
 216               	.LBB43:
 217               	.LBB44:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 218               		.loc 2 50 0
 219               	/* #APP */
 220               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 221 000e F894      		cli
 222               	 ;  0 "" 2
 223               	.LVL15:
 224               	/* #NOAPP */
 225               	.LBE44:
 226               	.LBE43:
 101:./tmk_core/common/avr/timer.c ****       t = timer_count;
 227               		.loc 1 101 0
 228 0010 4091 0000 		lds r20,timer_count
 229 0014 5091 0000 		lds r21,timer_count+1
 230 0018 6091 0000 		lds r22,timer_count+2
 231 001c 7091 0000 		lds r23,timer_count+3
 232               	.LVL16:
 233               	.LBB45:
 234               	.LBB46:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 235               		.loc 2 70 0
 236 0020 2FBF      		out __SREG__,r18
 237               		.loc 2 71 0
 238               	.LVL17:
 239               	.LBE46:
 240               	.LBE45:
 241               	.LBE42:
 102:./tmk_core/common/avr/timer.c ****     }
 103:./tmk_core/common/avr/timer.c **** 
 104:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_16((t & 0xFFFF), last);
 242               		.loc 1 104 0
 243 0022 6A01      		movw r12,r20
 244 0024 7B01      		movw r14,r22
 245 0026 EE24      		clr r14
 246 0028 FF24      		clr r15
 247 002a 8C01      		movw r16,r24
 248 002c 20E0      		ldi r18,0
 249 002e 30E0      		ldi r19,0
 250 0030 C016      		cp r12,r16
 251 0032 D106      		cpc r13,r17
 252 0034 E206      		cpc r14,r18
 253 0036 F306      		cpc r15,r19
 254 0038 00F0      		brlo .L6
 255               	.LVL18:
 256               	.L8:
 257               		.loc 1 104 0 is_stmt 0 discriminator 2
 258 003a 481B      		sub r20,r24
 259 003c 590B      		sbc r21,r25
 105:./tmk_core/common/avr/timer.c **** }
 260               		.loc 1 105 0 is_stmt 1 discriminator 2
 261 003e CA01      		movw r24,r20
 262               	.LVL19:
 263               	/* epilogue start */
 264 0040 1F91      		pop r17
 265 0042 0F91      		pop r16
 266               	.LVL20:
 267 0044 FF90      		pop r15
 268 0046 EF90      		pop r14
 269 0048 DF90      		pop r13
 270 004a CF90      		pop r12
 271 004c 0895      		ret
 272               	.LVL21:
 273               	.L6:
 104:./tmk_core/common/avr/timer.c **** }
 274               		.loc 1 104 0 discriminator 2
 275 004e 4150      		subi r20,1
 276 0050 5109      		sbc r21,__zero_reg__
 277               	.LVL22:
 278 0052 00C0      		rjmp .L8
 279               		.cfi_endproc
 280               	.LFE9:
 282               		.section	.text.timer_elapsed32,"ax",@progbits
 283               	.global	timer_elapsed32
 285               	timer_elapsed32:
 286               	.LFB10:
 106:./tmk_core/common/avr/timer.c **** 
 107:./tmk_core/common/avr/timer.c **** inline
 108:./tmk_core/common/avr/timer.c **** uint32_t timer_elapsed32(uint32_t last)
 109:./tmk_core/common/avr/timer.c **** {
 287               		.loc 1 109 0
 288               		.cfi_startproc
 289               	.LVL23:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 294 0000 AB01      		movw r20,r22
 295 0002 BC01      		movw r22,r24
 296               	.LBB47:
 110:./tmk_core/common/avr/timer.c ****     uint32_t t;
 111:./tmk_core/common/avr/timer.c **** 
 112:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 297               		.loc 1 112 0
 298 0004 2FB7      		in r18,__SREG__
 299               	.LVL24:
 300               	.LBB48:
 301               	.LBB49:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 302               		.loc 2 50 0
 303               	/* #APP */
 304               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 305 0006 F894      		cli
 306               	 ;  0 "" 2
 307               	.LVL25:
 308               	/* #NOAPP */
 309               	.LBE49:
 310               	.LBE48:
 113:./tmk_core/common/avr/timer.c ****       t = timer_count;
 311               		.loc 1 113 0
 312 0008 8091 0000 		lds r24,timer_count
 313 000c 9091 0000 		lds r25,timer_count+1
 314 0010 A091 0000 		lds r26,timer_count+2
 315 0014 B091 0000 		lds r27,timer_count+3
 316               	.LVL26:
 317               	.LBB50:
 318               	.LBB51:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 319               		.loc 2 70 0
 320 0018 2FBF      		out __SREG__,r18
 321               		.loc 2 71 0
 322               	.LVL27:
 323               	.LBE51:
 324               	.LBE50:
 325               	.LBE47:
 114:./tmk_core/common/avr/timer.c ****     }
 115:./tmk_core/common/avr/timer.c **** 
 116:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_32(t, last);
 326               		.loc 1 116 0
 327 001a 8417      		cp r24,r20
 328 001c 9507      		cpc r25,r21
 329 001e A607      		cpc r26,r22
 330 0020 B707      		cpc r27,r23
 331 0022 00F0      		brlo .L10
 332               	.LVL28:
 333               	.L12:
 334               		.loc 1 116 0 is_stmt 0 discriminator 2
 335 0024 841B      		sub r24,r20
 336 0026 950B      		sbc r25,r21
 337 0028 A60B      		sbc r26,r22
 338 002a B70B      		sbc r27,r23
 117:./tmk_core/common/avr/timer.c **** }
 339               		.loc 1 117 0 is_stmt 1 discriminator 2
 340 002c BC01      		movw r22,r24
 341 002e CD01      		movw r24,r26
 342               	.LVL29:
 343 0030 0895      		ret
 344               	.LVL30:
 345               	.L10:
 116:./tmk_core/common/avr/timer.c **** }
 346               		.loc 1 116 0 discriminator 2
 347 0032 0197      		sbiw r24,1
 348 0034 A109      		sbc r26,__zero_reg__
 349 0036 B109      		sbc r27,__zero_reg__
 350               	.LVL31:
 351 0038 00C0      		rjmp .L12
 352               		.cfi_endproc
 353               	.LFE10:
 355               		.section	.text.__vector_21,"ax",@progbits
 356               	.global	__vector_21
 358               	__vector_21:
 359               	.LFB11:
 118:./tmk_core/common/avr/timer.c **** 
 119:./tmk_core/common/avr/timer.c **** // excecuted once per 1ms.(excess for just timer count?)
 120:./tmk_core/common/avr/timer.c **** #ifndef __AVR_ATmega32A__
 121:./tmk_core/common/avr/timer.c **** #define TIMER_INTERRUPT_VECTOR TIMER0_COMPA_vect
 122:./tmk_core/common/avr/timer.c **** #else
 123:./tmk_core/common/avr/timer.c **** #define TIMER_INTERRUPT_VECTOR TIMER0_COMP_vect
 124:./tmk_core/common/avr/timer.c **** #endif
 125:./tmk_core/common/avr/timer.c **** ISR(TIMER_INTERRUPT_VECTOR, ISR_NOBLOCK)
 126:./tmk_core/common/avr/timer.c **** {
 360               		.loc 1 126 0
 361               		.cfi_startproc
 362 0000 7894      		sei
 363 0002 1F92      		push r1
 364               	.LCFI6:
 365               		.cfi_def_cfa_offset 3
 366               		.cfi_offset 1, -2
 367 0004 0F92      		push r0
 368               	.LCFI7:
 369               		.cfi_def_cfa_offset 4
 370               		.cfi_offset 0, -3
 371 0006 0FB6      		in r0,__SREG__
 372 0008 0F92      		push r0
 373 000a 1124      		clr __zero_reg__
 374 000c 8F93      		push r24
 375               	.LCFI8:
 376               		.cfi_def_cfa_offset 5
 377               		.cfi_offset 24, -4
 378 000e 9F93      		push r25
 379               	.LCFI9:
 380               		.cfi_def_cfa_offset 6
 381               		.cfi_offset 25, -5
 382 0010 AF93      		push r26
 383               	.LCFI10:
 384               		.cfi_def_cfa_offset 7
 385               		.cfi_offset 26, -6
 386 0012 BF93      		push r27
 387               	.LCFI11:
 388               		.cfi_def_cfa_offset 8
 389               		.cfi_offset 27, -7
 390               	/* prologue: Interrupt */
 391               	/* frame size = 0 */
 392               	/* stack size = 7 */
 393               	.L__stack_usage = 7
 127:./tmk_core/common/avr/timer.c ****     timer_count++;
 394               		.loc 1 127 0
 395 0014 8091 0000 		lds r24,timer_count
 396 0018 9091 0000 		lds r25,timer_count+1
 397 001c A091 0000 		lds r26,timer_count+2
 398 0020 B091 0000 		lds r27,timer_count+3
 399 0024 0196      		adiw r24,1
 400 0026 A11D      		adc r26,__zero_reg__
 401 0028 B11D      		adc r27,__zero_reg__
 402 002a 8093 0000 		sts timer_count,r24
 403 002e 9093 0000 		sts timer_count+1,r25
 404 0032 A093 0000 		sts timer_count+2,r26
 405 0036 B093 0000 		sts timer_count+3,r27
 406               	/* epilogue start */
 128:./tmk_core/common/avr/timer.c **** }
 407               		.loc 1 128 0
 408 003a BF91      		pop r27
 409 003c AF91      		pop r26
 410 003e 9F91      		pop r25
 411 0040 8F91      		pop r24
 412 0042 0F90      		pop r0
 413 0044 0FBE      		out __SREG__,r0
 414 0046 0F90      		pop r0
 415 0048 1F90      		pop r1
 416 004a 1895      		reti
 417               		.cfi_endproc
 418               	.LFE11:
 420               		.comm	timer_count,4,1
 421               		.text
 422               	.Letext0:
 423               		.file 3 "/usr/avr/include/stdint.h"
 424               		.file 4 "./tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccbOfWWn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccbOfWWn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccbOfWWn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccbOfWWn.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccbOfWWn.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccbOfWWn.s:13     .text.timer_init:0000000000000000 timer_init
     /tmp/ccbOfWWn.s:41     .text.timer_clear:0000000000000000 timer_clear
                            *COM*:0000000000000004 timer_count
     /tmp/ccbOfWWn.s:87     .text.timer_read:0000000000000000 timer_read
     /tmp/ccbOfWWn.s:133    .text.timer_read32:0000000000000000 timer_read32
     /tmp/ccbOfWWn.s:179    .text.timer_elapsed:0000000000000000 timer_elapsed
     /tmp/ccbOfWWn.s:285    .text.timer_elapsed32:0000000000000000 timer_elapsed32
     /tmp/ccbOfWWn.s:358    .text.__vector_21:0000000000000000 __vector_21

UNDEFINED SYMBOLS
__do_clear_bss
