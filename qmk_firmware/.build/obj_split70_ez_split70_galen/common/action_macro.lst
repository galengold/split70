   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action_macro.c"
   1:./tmk_core/common/action_macro.c **** /*
   2:./tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_macro.c **** 
   4:./tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_macro.c **** (at your option) any later version.
   8:./tmk_core/common/action_macro.c **** 
   9:./tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_macro.c **** 
  14:./tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_macro.c **** */
  17:./tmk_core/common/action_macro.c **** #include "action.h"
  18:./tmk_core/common/action_macro.c **** #include "action_util.h"
  19:./tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:./tmk_core/common/action_macro.c **** #include "wait.h"
  21:./tmk_core/common/action_macro.c **** 
  22:./tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:./tmk_core/common/action_macro.c **** #include "debug.h"
  24:./tmk_core/common/action_macro.c **** #else
  25:./tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:./tmk_core/common/action_macro.c **** #endif
  27:./tmk_core/common/action_macro.c **** 
  28:./tmk_core/common/action_macro.c **** 
  29:./tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:./tmk_core/common/action_macro.c **** 
  31:./tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:./tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:./tmk_core/common/action_macro.c **** {
  16               		.loc 1 33 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35 0008 CF93      		push r28
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 28, -6
  39 000a DF93      		push r29
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 29, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c 8C01      		movw r16,r24
  48               	.LVL1:
  34:./tmk_core/common/action_macro.c ****     macro_t macro = END;
  35:./tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  36:./tmk_core/common/action_macro.c **** 
  37:./tmk_core/common/action_macro.c ****     if (!macro_p) return;
  49               		.loc 1 37 0
  50 000e 892B      		or r24,r25
  51 0010 01F0      		breq .L1
  52 0012 F12C      		mov r15,__zero_reg__
  38:./tmk_core/common/action_macro.c ****     while (true) {
  39:./tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  40:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  41:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  42:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  43:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  44:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  53               		.loc 1 44 0
  54 0014 EE24      		clr r14
  55 0016 E394      		inc r14
  56               	.LVL2:
  57               	.L17:
  58               	.LBB13:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  59               		.loc 1 39 0
  60 0018 E801      		movw r28,r16
  61 001a 2196      		adiw r28,1
  62               	.LVL3:
  63 001c F801      		movw r30,r16
  64               	/* #APP */
  65               	 ;  39 "./tmk_core/common/action_macro.c" 1
  66 001e 8491      		lpm r24, Z
  67               		
  68               	 ;  0 "" 2
  69               	.LVL4:
  70               	/* #NOAPP */
  71               	.LBE13:
  72 0020 8437      		cpi r24,lo8(116)
  73 0022 00F4      		brsh .L3
  74 0024 8430      		cpi r24,lo8(4)
  75 0026 00F0      		brlo .+2
  76 0028 00C0      		rjmp .L4
  77 002a 8130      		cpi r24,lo8(1)
  78 002c 01F0      		breq .L5
  79 002e 8230      		cpi r24,lo8(2)
  80 0030 01F0      		breq .L6
  81               	.LVL5:
  82               	.L1:
  83               	/* epilogue start */
  45:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
  46:./tmk_core/common/action_macro.c ****                 } else {
  47:./tmk_core/common/action_macro.c ****                     register_code(macro);
  48:./tmk_core/common/action_macro.c ****                 }
  49:./tmk_core/common/action_macro.c ****                 break;
  50:./tmk_core/common/action_macro.c ****             case KEY_UP:
  51:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  52:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  53:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  54:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  55:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
  56:./tmk_core/common/action_macro.c ****                 } else {
  57:./tmk_core/common/action_macro.c ****                     unregister_code(macro);
  58:./tmk_core/common/action_macro.c ****                 }
  59:./tmk_core/common/action_macro.c ****                 break;
  60:./tmk_core/common/action_macro.c ****             case WAIT:
  61:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  62:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  63:./tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  64:./tmk_core/common/action_macro.c ****                 break;
  65:./tmk_core/common/action_macro.c ****             case INTERVAL:
  66:./tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  67:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  68:./tmk_core/common/action_macro.c ****                 break;
  69:./tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  70:./tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  71:./tmk_core/common/action_macro.c ****                 register_code(macro);
  72:./tmk_core/common/action_macro.c ****                 break;
  73:./tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  74:./tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  75:./tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
  76:./tmk_core/common/action_macro.c ****                 break;
  77:./tmk_core/common/action_macro.c ****             case END:
  78:./tmk_core/common/action_macro.c ****             default:
  79:./tmk_core/common/action_macro.c ****                 return;
  80:./tmk_core/common/action_macro.c ****         }
  81:./tmk_core/common/action_macro.c ****         // interval
  82:./tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
  83:./tmk_core/common/action_macro.c ****     }
  84:./tmk_core/common/action_macro.c **** }
  84               		.loc 1 84 0
  85 0032 DF91      		pop r29
  86 0034 CF91      		pop r28
  87 0036 1F91      		pop r17
  88 0038 0F91      		pop r16
  89 003a FF90      		pop r15
  90 003c EF90      		pop r14
  91 003e 0895      		ret
  92               	.LVL6:
  93               	.L3:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  94               		.loc 1 39 0
  95 0040 8537      		cpi r24,lo8(117)
  96 0042 01F4      		brne .+2
  97 0044 00C0      		rjmp .L7
  98 0046 00F4      		brsh .+2
  99 0048 00C0      		rjmp .L8
 100 004a 9CE7      		ldi r25,lo8(124)
 101 004c 980F      		add r25,r24
 102 004e 9037      		cpi r25,lo8(112)
 103 0050 00F4      		brsh .L1
  75:./tmk_core/common/action_macro.c ****                 break;
 104               		.loc 1 75 0
 105 0052 8F77      		andi r24,lo8(127)
 106               	.LVL7:
 107 0054 0E94 0000 		call unregister_code
 108               	.LVL8:
 109 0058 00C0      		rjmp .L23
 110               	.LVL9:
 111               	.L5:
 112               	.LBB14:
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 113               		.loc 1 41 0
 114 005a 0E5F      		subi r16,-2
 115 005c 1F4F      		sbci r17,-1
 116               	.LVL10:
 117 005e FE01      		movw r30,r28
 118               	.LVL11:
 119               	/* #APP */
 120               	 ;  41 "./tmk_core/common/action_macro.c" 1
 121 0060 8491      		lpm r24, Z
 122               		
 123               	 ;  0 "" 2
 124               	.LVL12:
 125               	/* #NOAPP */
 126               	.LBE14:
  43:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 127               		.loc 1 43 0
 128 0062 90E2      		ldi r25,lo8(32)
 129 0064 980F      		add r25,r24
 130 0066 9830      		cpi r25,lo8(8)
 131 0068 00F4      		brsh .L10
  44:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 132               		.loc 1 44 0
 133 006a 8770      		andi r24,lo8(7)
 134               	.LVL13:
 135 006c FE2D      		mov r31,r14
 136 006e 00C0      		rjmp 2f
 137               		1:
 138 0070 FF0F      		lsl r31
 139               		2:
 140 0072 8A95      		dec r24
 141 0074 02F4      		brpl 1b
 142 0076 8F2F      		mov r24,r31
 143 0078 0E94 0000 		call add_macro_mods
 144               	.LVL14:
 145               	.L22:
  55:./tmk_core/common/action_macro.c ****                 } else {
 146               		.loc 1 55 0
 147 007c 0E94 0000 		call send_keyboard_report
 148               	.LVL15:
 149 0080 00C0      		rjmp .L11
 150               	.LVL16:
 151               	.L10:
  47:./tmk_core/common/action_macro.c ****                 }
 152               		.loc 1 47 0
 153 0082 0E94 0000 		call register_code
 154               	.LVL17:
 155               	.L11:
 156               	.LBB15:
  82:./tmk_core/common/action_macro.c ****     }
 157               		.loc 1 82 0
 158 0086 8F2D      		mov r24,r15
 159               	.LVL18:
 160               	.L15:
  82:./tmk_core/common/action_macro.c ****     }
 161               		.loc 1 82 0 is_stmt 0 discriminator 1
 162 0088 8823      		tst r24
 163 008a 01F4      		brne .+2
 164 008c 00C0      		rjmp .L17
 165               	.LVL19:
 166               	.LBB16:
 167               	.LBB17:
 168               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 169               		.loc 2 187 0 is_stmt 1
 170 008e EFE9      		ldi r30,lo8(3999)
 171 0090 FFE0      		ldi r31,hi8(3999)
 172 0092 3197      	1:	sbiw r30,1
 173 0094 01F4      		brne 1b
 174 0096 00C0      		rjmp .
 175 0098 0000      		nop
 176 009a 8150      		subi r24,lo8(-(-1))
 177               	.LVL20:
 178 009c 00C0      		rjmp .L15
 179               	.LVL21:
 180               	.L6:
 181               	.LBE17:
 182               	.LBE16:
 183               	.LBE15:
 184               	.LBB18:
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 185               		.loc 1 51 0
 186 009e 0E5F      		subi r16,-2
 187 00a0 1F4F      		sbci r17,-1
 188               	.LVL22:
 189 00a2 FE01      		movw r30,r28
 190               	.LVL23:
 191               	/* #APP */
 192               	 ;  51 "./tmk_core/common/action_macro.c" 1
 193 00a4 8491      		lpm r24, Z
 194               		
 195               	 ;  0 "" 2
 196               	.LVL24:
 197               	/* #NOAPP */
 198               	.LBE18:
  53:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 199               		.loc 1 53 0
 200 00a6 90E2      		ldi r25,lo8(32)
 201 00a8 980F      		add r25,r24
 202 00aa 9830      		cpi r25,lo8(8)
 203 00ac 00F4      		brsh .L12
  54:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 204               		.loc 1 54 0
 205 00ae 8770      		andi r24,lo8(7)
 206               	.LVL25:
 207 00b0 FE2D      		mov r31,r14
 208 00b2 00C0      		rjmp 2f
 209               		1:
 210 00b4 FF0F      		lsl r31
 211               		2:
 212 00b6 8A95      		dec r24
 213 00b8 02F4      		brpl 1b
 214 00ba 8F2F      		mov r24,r31
 215 00bc 0E94 0000 		call del_macro_mods
 216               	.LVL26:
 217 00c0 00C0      		rjmp .L22
 218               	.LVL27:
 219               	.L12:
  57:./tmk_core/common/action_macro.c ****                 }
 220               		.loc 1 57 0
 221 00c2 0E94 0000 		call unregister_code
 222               	.LVL28:
 223 00c6 00C0      		rjmp .L11
 224               	.LVL29:
 225               	.L8:
 226               	.LBB19:
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 227               		.loc 1 61 0
 228 00c8 0E5F      		subi r16,-2
 229 00ca 1F4F      		sbci r17,-1
 230               	.LVL30:
 231 00cc FE01      		movw r30,r28
 232               	.LVL31:
 233               	/* #APP */
 234               	 ;  61 "./tmk_core/common/action_macro.c" 1
 235 00ce C491      		lpm r28, Z
 236               		
 237               	 ;  0 "" 2
 238               	.LVL32:
 239               	/* #NOAPP */
 240               	.L13:
 241               	.LBE19:
 242               	.LBB20:
  63:./tmk_core/common/action_macro.c ****                 break;
 243               		.loc 1 63 0 discriminator 1
 244 00d0 CC23      		tst r28
 245 00d2 01F0      		breq .L11
 246               	.LVL33:
 247               	.LBB21:
 248               	.LBB22:
 249               		.loc 2 187 0
 250 00d4 8FE9      		ldi r24,lo8(3999)
 251 00d6 9FE0      		ldi r25,hi8(3999)
 252 00d8 0197      	1:	sbiw r24,1
 253 00da 01F4      		brne 1b
 254 00dc 00C0      		rjmp .
 255 00de 0000      		nop
 256 00e0 C150      		subi r28,lo8(-(-1))
 257               	.LVL34:
 258 00e2 00C0      		rjmp .L13
 259               	.LVL35:
 260               	.L7:
 261               	.LBE22:
 262               	.LBE21:
 263               	.LBE20:
 264               	.LBB23:
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 265               		.loc 1 66 0
 266 00e4 0E5F      		subi r16,-2
 267 00e6 1F4F      		sbci r17,-1
 268               	.LVL36:
 269 00e8 FE01      		movw r30,r28
 270               	.LVL37:
 271               	/* #APP */
 272               	 ;  66 "./tmk_core/common/action_macro.c" 1
 273 00ea F490      		lpm r15, Z
 274               		
 275               	 ;  0 "" 2
 276               	.LVL38:
 277               	/* #NOAPP */
 278               	.LBE23:
  68:./tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 279               		.loc 1 68 0
 280 00ec 00C0      		rjmp .L11
 281               	.LVL39:
 282               	.L4:
  71:./tmk_core/common/action_macro.c ****                 break;
 283               		.loc 1 71 0
 284 00ee 0E94 0000 		call register_code
 285               	.LVL40:
 286               	.L23:
 287               	.LBB24:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
 288               		.loc 1 39 0
 289 00f2 8E01      		movw r16,r28
 290               	.LVL41:
 291               	.LBE24:
  76:./tmk_core/common/action_macro.c ****             case END:
 292               		.loc 1 76 0
 293 00f4 00C0      		rjmp .L11
 294               		.cfi_endproc
 295               	.LFE103:
 297               		.text
 298               	.Letext0:
 299               		.file 3 "/usr/avr/include/stdint.h"
 300               		.file 4 "./tmk_core/common/action_macro.h"
 301               		.file 5 "./tmk_core/common/keycode.h"
 302               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 303               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 304               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 305               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 306               		.file 10 "/usr/avr/include/stdio.h"
 307               		.file 11 "./tmk_core/common/report.h"
 308               		.file 12 "./tmk_core/common/action_util.h"
 309               		.file 13 "./tmk_core/common/debug.h"
 310               		.file 14 "./tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccc1rfKv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccc1rfKv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccc1rfKv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccc1rfKv.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccc1rfKv.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccc1rfKv.s:13     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
unregister_code
add_macro_mods
send_keyboard_report
register_code
del_macro_mods
