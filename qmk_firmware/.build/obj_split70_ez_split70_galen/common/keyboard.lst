   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** 
  64:./tmk_core/common/keyboard.c **** 
  65:./tmk_core/common/keyboard.c **** 
  66:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  67:./tmk_core/common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  68:./tmk_core/common/keyboard.c **** {
  69:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  70:./tmk_core/common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  71:./tmk_core/common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  72:./tmk_core/common/keyboard.c ****         return false;
  73:./tmk_core/common/keyboard.c **** 
  74:./tmk_core/common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  75:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  76:./tmk_core/common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  77:./tmk_core/common/keyboard.c ****             return true;
  78:./tmk_core/common/keyboard.c ****     }
  79:./tmk_core/common/keyboard.c ****     return false;
  80:./tmk_core/common/keyboard.c **** }
  81:./tmk_core/common/keyboard.c **** #endif
  82:./tmk_core/common/keyboard.c **** 
  83:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
  84:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 84 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	/* epilogue start */
  85:./tmk_core/common/keyboard.c **** }
  23               		.loc 1 85 0
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE103:
  28               		.section	.text.keyboard_setup,"ax",@progbits
  29               	.global	keyboard_setup
  31               	keyboard_setup:
  32               	.LFB104:
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  33               		.loc 1 87 0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  88:./tmk_core/common/keyboard.c ****     matrix_setup();
  39               		.loc 1 88 0
  40 0000 0C94 0000 		jmp matrix_setup
  41               	.LVL0:
  42               		.cfi_endproc
  43               	.LFE104:
  45               		.section	.text.keyboard_init,"ax",@progbits
  46               	.global	keyboard_init
  48               	keyboard_init:
  49               	.LFB105:
  89:./tmk_core/common/keyboard.c **** }
  90:./tmk_core/common/keyboard.c **** 
  91:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  50               		.loc 1 91 0
  51               		.cfi_startproc
  52               	/* prologue: function */
  53               	/* frame size = 0 */
  54               	/* stack size = 0 */
  55               	.L__stack_usage = 0
  92:./tmk_core/common/keyboard.c ****     timer_init();
  56               		.loc 1 92 0
  57 0000 0E94 0000 		call timer_init
  58               	.LVL1:
  93:./tmk_core/common/keyboard.c ****     matrix_init();
  59               		.loc 1 93 0
  60 0004 0E94 0000 		call matrix_init
  61               	.LVL2:
  94:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  95:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
  96:./tmk_core/common/keyboard.c **** #endif
  97:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  98:./tmk_core/common/keyboard.c ****     serial_mouse_init();
  99:./tmk_core/common/keyboard.c **** #endif
 100:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 101:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 102:./tmk_core/common/keyboard.c **** #endif
 103:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 104:./tmk_core/common/keyboard.c ****     bootmagic();
 105:./tmk_core/common/keyboard.c **** #else
 106:./tmk_core/common/keyboard.c ****     magic();
  62               		.loc 1 106 0
  63 0008 0C94 0000 		jmp magic
  64               	.LVL3:
  65               		.cfi_endproc
  66               	.LFE105:
  68               		.section	.text.keyboard_task,"ax",@progbits
  69               	.global	keyboard_task
  71               	keyboard_task:
  72               	.LFB106:
 107:./tmk_core/common/keyboard.c **** #endif
 108:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 109:./tmk_core/common/keyboard.c ****     backlight_init();
 110:./tmk_core/common/keyboard.c **** #endif
 111:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 112:./tmk_core/common/keyboard.c ****     rgblight_init();
 113:./tmk_core/common/keyboard.c **** #endif
 114:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 115:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 116:./tmk_core/common/keyboard.c **** #endif
 117:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 118:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 119:./tmk_core/common/keyboard.c **** #endif
 120:./tmk_core/common/keyboard.c **** }
 121:./tmk_core/common/keyboard.c **** 
 122:./tmk_core/common/keyboard.c **** /*
 123:./tmk_core/common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 124:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 125:./tmk_core/common/keyboard.c ****  */
 126:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 127:./tmk_core/common/keyboard.c **** {
  73               		.loc 1 127 0
  74               		.cfi_startproc
  75 0000 BF92      		push r11
  76               	.LCFI0:
  77               		.cfi_def_cfa_offset 3
  78               		.cfi_offset 11, -2
  79 0002 CF92      		push r12
  80               	.LCFI1:
  81               		.cfi_def_cfa_offset 4
  82               		.cfi_offset 12, -3
  83 0004 DF92      		push r13
  84               	.LCFI2:
  85               		.cfi_def_cfa_offset 5
  86               		.cfi_offset 13, -4
  87 0006 EF92      		push r14
  88               	.LCFI3:
  89               		.cfi_def_cfa_offset 6
  90               		.cfi_offset 14, -5
  91 0008 FF92      		push r15
  92               	.LCFI4:
  93               		.cfi_def_cfa_offset 7
  94               		.cfi_offset 15, -6
  95 000a 0F93      		push r16
  96               	.LCFI5:
  97               		.cfi_def_cfa_offset 8
  98               		.cfi_offset 16, -7
  99 000c 1F93      		push r17
 100               	.LCFI6:
 101               		.cfi_def_cfa_offset 9
 102               		.cfi_offset 17, -8
 103 000e CF93      		push r28
 104               	.LCFI7:
 105               		.cfi_def_cfa_offset 10
 106               		.cfi_offset 28, -9
 107 0010 DF93      		push r29
 108               	.LCFI8:
 109               		.cfi_def_cfa_offset 11
 110               		.cfi_offset 29, -10
 111 0012 CDB7      		in r28,__SP_L__
 112 0014 DEB7      		in r29,__SP_H__
 113               	.LCFI9:
 114               		.cfi_def_cfa_register 28
 115 0016 2A97      		sbiw r28,10
 116               	.LCFI10:
 117               		.cfi_def_cfa_offset 21
 118 0018 0FB6      		in __tmp_reg__,__SREG__
 119 001a F894      		cli
 120 001c DEBF      		out __SP_H__,r29
 121 001e 0FBE      		out __SREG__,__tmp_reg__
 122 0020 CDBF      		out __SP_L__,r28
 123               	/* prologue: function */
 124               	/* frame size = 10 */
 125               	/* stack size = 19 */
 126               	.L__stack_usage = 19
 127               	.LVL4:
 128:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 129:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 130:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_ghost[MATRIX_ROWS];
 131:./tmk_core/common/keyboard.c **** #endif
 132:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 133:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 134:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c ****     matrix_scan();
 128               		.loc 1 136 0
 129 0022 0E94 0000 		call matrix_scan
 130               	.LVL5:
 131 0026 80E0      		ldi r24,lo8(matrix_prev.4959)
 132 0028 C82E      		mov r12,r24
 133 002a 80E0      		ldi r24,hi8(matrix_prev.4959)
 134 002c D82E      		mov r13,r24
 135 002e 10E0      		ldi r17,0
 136 0030 00E0      		ldi r16,0
 137               	.LVL6:
 138               	.L11:
 139 0032 B02E      		mov r11,r16
 140               	.LVL7:
 141               	.LBB6:
 137:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 138:./tmk_core/common/keyboard.c ****         matrix_row = matrix_get_row(r);
 142               		.loc 1 138 0
 143 0034 802F      		mov r24,r16
 144 0036 0E94 0000 		call matrix_get_row
 145               	.LVL8:
 146 003a E82E      		mov r14,r24
 147               	.LVL9:
 139:./tmk_core/common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 148               		.loc 1 139 0
 149 003c F601      		movw r30,r12
 150 003e F190      		ld r15,Z+
 151 0040 6F01      		movw r12,r30
 152               	.LVL10:
 140:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 153               		.loc 1 140 0
 154 0042 F816      		cp r15,r24
 155 0044 01F4      		brne .+2
 156 0046 00C0      		rjmp .L5
 141:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 142:./tmk_core/common/keyboard.c ****             if (has_ghost_in_row(r)) {
 143:./tmk_core/common/keyboard.c ****                 /* Keep track of whether ghosted status has changed for
 144:./tmk_core/common/keyboard.c ****                  * debugging. But don't update matrix_prev until un-ghosted, or
 145:./tmk_core/common/keyboard.c ****                  * the last key would be lost.
 146:./tmk_core/common/keyboard.c ****                  */
 147:./tmk_core/common/keyboard.c ****                 if (debug_matrix && matrix_ghost[r] != matrix_row) {
 148:./tmk_core/common/keyboard.c ****                     matrix_print();
 149:./tmk_core/common/keyboard.c ****                 }
 150:./tmk_core/common/keyboard.c ****                 matrix_ghost[r] = matrix_row;
 151:./tmk_core/common/keyboard.c ****                 continue;
 152:./tmk_core/common/keyboard.c ****             }
 153:./tmk_core/common/keyboard.c ****             matrix_ghost[r] = matrix_row;
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 157               		.loc 1 155 0
 158 0048 8091 0000 		lds r24,debug_config
 159 004c 81FD      		sbrc r24,1
 160               		.loc 1 155 0 is_stmt 0 discriminator 1
 161 004e 0E94 0000 		call matrix_print
 162               	.LVL11:
 163               	.L6:
 164               	.LBE6:
 136:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 165               		.loc 1 136 0 is_stmt 1
 166 0052 90E0      		ldi r25,0
 167 0054 80E0      		ldi r24,0
 168               	.LBB9:
 139:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 169               		.loc 1 139 0
 170 0056 FE24      		eor r15,r14
 171               	.LVL12:
 172               	.LBB7:
 156:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 157:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 173               		.loc 1 157 0
 174 0058 2F2D      		mov r18,r15
 175 005a 30E0      		ldi r19,0
 176               	.LVL13:
 177               	.L10:
 178 005c 482F      		mov r20,r24
 179               	.LVL14:
 180 005e B901      		movw r22,r18
 181 0060 082E      		mov r0,r24
 182 0062 00C0      		rjmp 2f
 183               		1:
 184 0064 7595      		asr r23
 185 0066 6795      		ror r22
 186               		2:
 187 0068 0A94      		dec r0
 188 006a 02F4      		brpl 1b
 189 006c 60FF      		sbrs r22,0
 190 006e 00C0      		rjmp .L7
 158:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 191               		.loc 1 158 0
 192 0070 8E83      		std Y+6,r24
 193 0072 BF82      		std Y+7,r11
 159:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 160:./tmk_core/common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 194               		.loc 1 160 0
 195 0074 81E0      		ldi r24,lo8(1)
 196 0076 90E0      		ldi r25,0
 197               	.LVL15:
 198 0078 6C01      		movw r12,r24
 199 007a 00C0      		rjmp 2f
 200               		1:
 201 007c CC0C      		lsl r12
 202 007e DD1C      		rol r13
 203               		2:
 204 0080 4A95      		dec r20
 205 0082 02F4      		brpl 1b
 206 0084 2E2D      		mov r18,r14
 207 0086 30E0      		ldi r19,0
 208 0088 2C21      		and r18,r12
 209 008a 3D21      		and r19,r13
 210 008c 232B      		or r18,r19
 211 008e 01F4      		brne .L8
 212 0090 80E0      		ldi r24,0
 213               	.L8:
 158:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 214               		.loc 1 158 0
 215 0092 8887      		std Y+8,r24
 161:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 216               		.loc 1 161 0
 217 0094 0E94 0000 		call timer_read
 218               	.LVL16:
 219 0098 8160      		ori r24,1
 158:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 220               		.loc 1 158 0
 221 009a 782F      		mov r23,r24
 222 009c 9A87      		std Y+10,r25
 223 009e 8987      		std Y+9,r24
 224 00a0 4E81      		ldd r20,Y+6
 225 00a2 5F81      		ldd r21,Y+7
 226 00a4 6885      		ldd r22,Y+8
 227 00a6 8A85      		ldd r24,Y+10
 228 00a8 0E94 0000 		call action_exec
 229               	.LVL17:
 162:./tmk_core/common/keyboard.c ****                     });
 163:./tmk_core/common/keyboard.c ****                     // record a processed key
 164:./tmk_core/common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 230               		.loc 1 164 0
 231 00ac F801      		movw r30,r16
 232 00ae E050      		subi r30,lo8(-(matrix_prev.4959))
 233 00b0 F040      		sbci r31,hi8(-(matrix_prev.4959))
 234 00b2 8081      		ld r24,Z
 235 00b4 8C25      		eor r24,r12
 236 00b6 8083      		st Z,r24
 237               	.LVL18:
 238               	.L9:
 239               	.LBE7:
 240               	.LBE9:
 165:./tmk_core/common/keyboard.c ****                     // process a key per task call
 166:./tmk_core/common/keyboard.c ****                     goto MATRIX_LOOP_END;
 167:./tmk_core/common/keyboard.c ****                 }
 168:./tmk_core/common/keyboard.c ****             }
 169:./tmk_core/common/keyboard.c ****         }
 170:./tmk_core/common/keyboard.c ****     }
 171:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 172:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 173:./tmk_core/common/keyboard.c **** 
 174:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 175:./tmk_core/common/keyboard.c **** 
 176:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 177:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 178:./tmk_core/common/keyboard.c ****     mousekey_task();
 241               		.loc 1 178 0
 242 00b8 0E94 0000 		call mousekey_task
 243               	.LVL19:
 179:./tmk_core/common/keyboard.c **** #endif
 180:./tmk_core/common/keyboard.c **** 
 181:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 182:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** 
 185:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 186:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 187:./tmk_core/common/keyboard.c **** #endif
 188:./tmk_core/common/keyboard.c **** 
 189:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 190:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 191:./tmk_core/common/keyboard.c **** #endif
 192:./tmk_core/common/keyboard.c **** 
 193:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 194:./tmk_core/common/keyboard.c **** 	serial_link_update();
 195:./tmk_core/common/keyboard.c **** #endif
 196:./tmk_core/common/keyboard.c **** 
 197:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 198:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 199:./tmk_core/common/keyboard.c **** #endif
 200:./tmk_core/common/keyboard.c **** 
 201:./tmk_core/common/keyboard.c ****     // update LED
 202:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 244               		.loc 1 202 0
 245 00bc 0E94 0000 		call host_keyboard_leds
 246               	.LVL20:
 247 00c0 9091 0000 		lds r25,led_status.4960
 248 00c4 8917      		cp r24,r25
 249 00c6 01F0      		breq .L4
 203:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 250               		.loc 1 203 0
 251 00c8 0E94 0000 		call host_keyboard_leds
 252               	.LVL21:
 253 00cc 8093 0000 		sts led_status.4960,r24
 254               	.LVL22:
 255               	/* epilogue start */
 204:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 205:./tmk_core/common/keyboard.c ****     }
 206:./tmk_core/common/keyboard.c **** }
 256               		.loc 1 206 0
 257 00d0 2A96      		adiw r28,10
 258 00d2 0FB6      		in __tmp_reg__,__SREG__
 259 00d4 F894      		cli
 260 00d6 DEBF      		out __SP_H__,r29
 261 00d8 0FBE      		out __SREG__,__tmp_reg__
 262 00da CDBF      		out __SP_L__,r28
 263 00dc DF91      		pop r29
 264 00de CF91      		pop r28
 265 00e0 1F91      		pop r17
 266 00e2 0F91      		pop r16
 267 00e4 FF90      		pop r15
 268 00e6 EF90      		pop r14
 269               	.LVL23:
 270 00e8 DF90      		pop r13
 271 00ea CF90      		pop r12
 272 00ec BF90      		pop r11
 273               	.LBB10:
 274               	.LBB11:
 207:./tmk_core/common/keyboard.c **** 
 208:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 209:./tmk_core/common/keyboard.c **** {
 210:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 211:./tmk_core/common/keyboard.c ****     led_set(leds);
 275               		.loc 1 211 0
 276 00ee 0C94 0000 		jmp led_set
 277               	.LVL24:
 278               	.L7:
 279 00f2 0196      		adiw r24,1
 280               	.LVL25:
 281               	.LBE11:
 282               	.LBE10:
 283               	.LBB12:
 284               	.LBB8:
 156:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 285               		.loc 1 156 0 discriminator 2
 286 00f4 8630      		cpi r24,6
 287 00f6 9105      		cpc r25,__zero_reg__
 288 00f8 01F0      		breq .+2
 289 00fa 00C0      		rjmp .L10
 290               	.LVL26:
 291               	.L5:
 292 00fc 0F5F      		subi r16,-1
 293 00fe 1F4F      		sbci r17,-1
 294               	.LVL27:
 295               	.LBE8:
 137:./tmk_core/common/keyboard.c ****         matrix_row = matrix_get_row(r);
 296               		.loc 1 137 0
 297 0100 0C30      		cpi r16,12
 298 0102 1105      		cpc r17,__zero_reg__
 299 0104 01F0      		breq .+2
 300 0106 00C0      		rjmp .L11
 301               	.LBE12:
 172:./tmk_core/common/keyboard.c **** 
 302               		.loc 1 172 0
 303 0108 8FEF      		ldi r24,lo8(-1)
 304 010a 8983      		std Y+1,r24
 305 010c 8A83      		std Y+2,r24
 306 010e 1B82      		std Y+3,__zero_reg__
 307 0110 0E94 0000 		call timer_read
 308               	.LVL28:
 309 0114 8160      		ori r24,1
 310 0116 782F      		mov r23,r24
 311 0118 9D83      		std Y+5,r25
 312 011a 8C83      		std Y+4,r24
 313 011c 4981      		ldd r20,Y+1
 314 011e 5A81      		ldd r21,Y+2
 315 0120 6B81      		ldd r22,Y+3
 316 0122 8D81      		ldd r24,Y+5
 317 0124 0E94 0000 		call action_exec
 318               	.LVL29:
 319 0128 00C0      		rjmp .L9
 320               	.LVL30:
 321               	.L4:
 322               	/* epilogue start */
 206:./tmk_core/common/keyboard.c **** 
 323               		.loc 1 206 0
 324 012a 2A96      		adiw r28,10
 325 012c 0FB6      		in __tmp_reg__,__SREG__
 326 012e F894      		cli
 327 0130 DEBF      		out __SP_H__,r29
 328 0132 0FBE      		out __SREG__,__tmp_reg__
 329 0134 CDBF      		out __SP_L__,r28
 330 0136 DF91      		pop r29
 331 0138 CF91      		pop r28
 332 013a 1F91      		pop r17
 333 013c 0F91      		pop r16
 334 013e FF90      		pop r15
 335 0140 EF90      		pop r14
 336               	.LVL31:
 337 0142 DF90      		pop r13
 338 0144 CF90      		pop r12
 339 0146 BF90      		pop r11
 340 0148 0895      		ret
 341               		.cfi_endproc
 342               	.LFE106:
 344               		.section	.text.keyboard_set_leds,"ax",@progbits
 345               	.global	keyboard_set_leds
 347               	keyboard_set_leds:
 348               	.LFB107:
 209:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 349               		.loc 1 209 0
 350               		.cfi_startproc
 351               	.LVL32:
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 356               		.loc 1 211 0
 357 0000 0C94 0000 		jmp led_set
 358               	.LVL33:
 359               		.cfi_endproc
 360               	.LFE107:
 362               		.section	.bss.led_status.4960,"aw",@nobits
 365               	led_status.4960:
 366 0000 00        		.zero	1
 367               		.section	.bss.matrix_prev.4959,"aw",@nobits
 370               	matrix_prev.4959:
 371 0000 0000 0000 		.zero	12
 371      0000 0000 
 371      0000 0000 
 372               		.text
 373               	.Letext0:
 374               		.file 2 "/usr/avr/include/stdint.h"
 375               		.file 3 "./tmk_core/common/keyboard.h"
 376               		.file 4 "./tmk_core/common/matrix.h"
 377               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 378               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 379               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 380               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 381               		.file 9 "/usr/avr/include/stdio.h"
 382               		.file 10 "./tmk_core/common/host.h"
 383               		.file 11 "./tmk_core/common/debug.h"
 384               		.file 12 "./quantum/keycode_config.h"
 385               		.file 13 "./quantum/keymap.h"
 386               		.file 14 "./tmk_core/common/timer.h"
 387               		.file 15 "./tmk_core/common/command.h"
 388               		.file 16 "./tmk_core/common/action_layer.h"
 389               		.file 17 "./tmk_core/common/mousekey.h"
 390               		.file 18 "./tmk_core/common/action.h"
 391               		.file 19 "./tmk_core/common/led.h"
 392               		.file 20 "./tmk_core/common/magic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccnp5t2a.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnp5t2a.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnp5t2a.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnp5t2a.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnp5t2a.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnp5t2a.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccnp5t2a.s:31     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccnp5t2a.s:48     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccnp5t2a.s:71     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccnp5t2a.s:370    .bss.matrix_prev.4959:0000000000000000 matrix_prev.4959
     /tmp/ccnp5t2a.s:365    .bss.led_status.4960:0000000000000000 led_status.4960
     /tmp/ccnp5t2a.s:347    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
matrix_scan
matrix_get_row
debug_config
matrix_print
timer_read
action_exec
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
