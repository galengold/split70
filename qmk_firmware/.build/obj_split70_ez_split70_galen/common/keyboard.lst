   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** 
  64:./tmk_core/common/keyboard.c **** 
  65:./tmk_core/common/keyboard.c **** 
  66:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  67:./tmk_core/common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  68:./tmk_core/common/keyboard.c **** {
  69:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  70:./tmk_core/common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  71:./tmk_core/common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  72:./tmk_core/common/keyboard.c ****         return false;
  73:./tmk_core/common/keyboard.c **** 
  74:./tmk_core/common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  75:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  76:./tmk_core/common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  77:./tmk_core/common/keyboard.c ****             return true;
  78:./tmk_core/common/keyboard.c ****     }
  79:./tmk_core/common/keyboard.c ****     return false;
  80:./tmk_core/common/keyboard.c **** }
  81:./tmk_core/common/keyboard.c **** #endif
  82:./tmk_core/common/keyboard.c **** 
  83:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
  84:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 84 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE103:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB104:
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 87 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  88:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 88 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE104:
  43               		.section	.text.keyboard_init,"ax",@progbits
  44               	.global	keyboard_init
  46               	keyboard_init:
  47               	.LFB105:
  89:./tmk_core/common/keyboard.c **** }
  90:./tmk_core/common/keyboard.c **** 
  91:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  48               		.loc 1 91 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  92:./tmk_core/common/keyboard.c ****     timer_init();
  54               		.loc 1 92 0
  55 0000 0E94 0000 		call timer_init
  56               	.LVL1:
  93:./tmk_core/common/keyboard.c ****     matrix_init();
  57               		.loc 1 93 0
  58 0004 0E94 0000 		call matrix_init
  59               	.LVL2:
  94:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  95:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
  96:./tmk_core/common/keyboard.c **** #endif
  97:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  98:./tmk_core/common/keyboard.c ****     serial_mouse_init();
  99:./tmk_core/common/keyboard.c **** #endif
 100:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 101:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 102:./tmk_core/common/keyboard.c **** #endif
 103:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 104:./tmk_core/common/keyboard.c ****     bootmagic();
 105:./tmk_core/common/keyboard.c **** #else
 106:./tmk_core/common/keyboard.c ****     magic();
  60               		.loc 1 106 0
  61 0008 0C94 0000 		jmp magic
  62               	.LVL3:
  63               		.cfi_endproc
  64               	.LFE105:
  66               		.section	.text.keyboard_task,"ax",@progbits
  67               	.global	keyboard_task
  69               	keyboard_task:
  70               	.LFB106:
 107:./tmk_core/common/keyboard.c **** #endif
 108:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 109:./tmk_core/common/keyboard.c ****     backlight_init();
 110:./tmk_core/common/keyboard.c **** #endif
 111:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 112:./tmk_core/common/keyboard.c ****     rgblight_init();
 113:./tmk_core/common/keyboard.c **** #endif
 114:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 115:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 116:./tmk_core/common/keyboard.c **** #endif
 117:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 118:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 119:./tmk_core/common/keyboard.c **** #endif
 120:./tmk_core/common/keyboard.c **** }
 121:./tmk_core/common/keyboard.c **** 
 122:./tmk_core/common/keyboard.c **** /*
 123:./tmk_core/common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 124:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 125:./tmk_core/common/keyboard.c ****  */
 126:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 127:./tmk_core/common/keyboard.c **** {
  71               		.loc 1 127 0
  72               		.cfi_startproc
  73 0000 BF92      		push r11
  74               	.LCFI0:
  75               		.cfi_def_cfa_offset 3
  76               		.cfi_offset 11, -2
  77 0002 CF92      		push r12
  78               	.LCFI1:
  79               		.cfi_def_cfa_offset 4
  80               		.cfi_offset 12, -3
  81 0004 DF92      		push r13
  82               	.LCFI2:
  83               		.cfi_def_cfa_offset 5
  84               		.cfi_offset 13, -4
  85 0006 EF92      		push r14
  86               	.LCFI3:
  87               		.cfi_def_cfa_offset 6
  88               		.cfi_offset 14, -5
  89 0008 FF92      		push r15
  90               	.LCFI4:
  91               		.cfi_def_cfa_offset 7
  92               		.cfi_offset 15, -6
  93 000a 0F93      		push r16
  94               	.LCFI5:
  95               		.cfi_def_cfa_offset 8
  96               		.cfi_offset 16, -7
  97 000c 1F93      		push r17
  98               	.LCFI6:
  99               		.cfi_def_cfa_offset 9
 100               		.cfi_offset 17, -8
 101 000e CF93      		push r28
 102               	.LCFI7:
 103               		.cfi_def_cfa_offset 10
 104               		.cfi_offset 28, -9
 105 0010 DF93      		push r29
 106               	.LCFI8:
 107               		.cfi_def_cfa_offset 11
 108               		.cfi_offset 29, -10
 109 0012 CDB7      		in r28,__SP_L__
 110 0014 DEB7      		in r29,__SP_H__
 111               	.LCFI9:
 112               		.cfi_def_cfa_register 28
 113 0016 2A97      		sbiw r28,10
 114               	.LCFI10:
 115               		.cfi_def_cfa_offset 21
 116 0018 0FB6      		in __tmp_reg__,__SREG__
 117 001a F894      		cli
 118 001c DEBF      		out __SP_H__,r29
 119 001e 0FBE      		out __SREG__,__tmp_reg__
 120 0020 CDBF      		out __SP_L__,r28
 121               	/* prologue: function */
 122               	/* frame size = 10 */
 123               	/* stack size = 19 */
 124               	.L__stack_usage = 19
 125               	.LVL4:
 128:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 129:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 130:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_ghost[MATRIX_ROWS];
 131:./tmk_core/common/keyboard.c **** #endif
 132:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 133:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 134:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c ****     matrix_scan();
 126               		.loc 1 136 0
 127 0022 0E94 0000 		call matrix_scan
 128               	.LVL5:
 129 0026 80E0      		ldi r24,lo8(matrix_prev.4988)
 130 0028 C82E      		mov r12,r24
 131 002a 80E0      		ldi r24,hi8(matrix_prev.4988)
 132 002c D82E      		mov r13,r24
 133 002e 00E0      		ldi r16,0
 134 0030 10E0      		ldi r17,0
 135               	.LVL6:
 136               	.L6:
 137 0032 B02E      		mov r11,r16
 138               	.LVL7:
 139               	.LBB6:
 137:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 138:./tmk_core/common/keyboard.c ****         matrix_row = matrix_get_row(r);
 140               		.loc 1 138 0
 141 0034 802F      		mov r24,r16
 142 0036 0E94 0000 		call matrix_get_row
 143               	.LVL8:
 144 003a E82E      		mov r14,r24
 145               	.LVL9:
 139:./tmk_core/common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 146               		.loc 1 139 0
 147 003c F601      		movw r30,r12
 148 003e F190      		ld r15,Z+
 149 0040 6F01      		movw r12,r30
 150               	.LVL10:
 140:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 151               		.loc 1 140 0
 152 0042 8F11      		cpse r24,r15
 153 0044 00C0      		rjmp .L5
 154               	.LVL11:
 155               	.L13:
 156 0046 0F5F      		subi r16,-1
 157 0048 1F4F      		sbci r17,-1
 158               	.LVL12:
 137:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 159               		.loc 1 137 0
 160 004a 0C30      		cpi r16,12
 161 004c 1105      		cpc r17,__zero_reg__
 162 004e 01F4      		brne .L6
 163               	.LBE6:
 141:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 142:./tmk_core/common/keyboard.c ****             if (has_ghost_in_row(r)) {
 143:./tmk_core/common/keyboard.c ****                 /* Keep track of whether ghosted status has changed for
 144:./tmk_core/common/keyboard.c ****                  * debugging. But don't update matrix_prev until un-ghosted, or
 145:./tmk_core/common/keyboard.c ****                  * the last key would be lost.
 146:./tmk_core/common/keyboard.c ****                  */
 147:./tmk_core/common/keyboard.c ****                 if (debug_matrix && matrix_ghost[r] != matrix_row) {
 148:./tmk_core/common/keyboard.c ****                     matrix_print();
 149:./tmk_core/common/keyboard.c ****                 }
 150:./tmk_core/common/keyboard.c ****                 matrix_ghost[r] = matrix_row;
 151:./tmk_core/common/keyboard.c ****                 continue;
 152:./tmk_core/common/keyboard.c ****             }
 153:./tmk_core/common/keyboard.c ****             matrix_ghost[r] = matrix_row;
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 156:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 157:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 158:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 159:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 160:./tmk_core/common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 161:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 162:./tmk_core/common/keyboard.c ****                     });
 163:./tmk_core/common/keyboard.c ****                     // record a processed key
 164:./tmk_core/common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 165:./tmk_core/common/keyboard.c ****                     // process a key per task call
 166:./tmk_core/common/keyboard.c ****                     goto MATRIX_LOOP_END;
 167:./tmk_core/common/keyboard.c ****                 }
 168:./tmk_core/common/keyboard.c ****             }
 169:./tmk_core/common/keyboard.c ****         }
 170:./tmk_core/common/keyboard.c ****     }
 171:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 172:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 164               		.loc 1 172 0
 165 0050 8FEF      		ldi r24,lo8(-1)
 166 0052 8983      		std Y+1,r24
 167 0054 8A83      		std Y+2,r24
 168 0056 1B82      		std Y+3,__zero_reg__
 169 0058 0E94 0000 		call timer_read
 170               	.LVL13:
 171 005c 8160      		ori r24,1
 172 005e 782F      		mov r23,r24
 173 0060 9D83      		std Y+5,r25
 174 0062 8C83      		std Y+4,r24
 175 0064 4981      		ldd r20,Y+1
 176 0066 5A81      		ldd r21,Y+2
 177 0068 6B81      		ldd r22,Y+3
 178 006a 8D81      		ldd r24,Y+5
 179 006c 0E94 0000 		call action_exec
 180               	.LVL14:
 181 0070 00C0      		rjmp .L11
 182               	.LVL15:
 183               	.L5:
 184               	.LBB9:
 155:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 185               		.loc 1 155 0
 186 0072 8091 0000 		lds r24,debug_config
 187 0076 81FD      		sbrc r24,1
 155:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 188               		.loc 1 155 0 is_stmt 0 discriminator 1
 189 0078 0E94 0000 		call matrix_print
 190               	.LVL16:
 191               	.L8:
 192               	.LBE9:
 136:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 193               		.loc 1 136 0 is_stmt 1
 194 007c 80E0      		ldi r24,0
 195 007e 90E0      		ldi r25,0
 196               	.LBB10:
 139:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 197               		.loc 1 139 0
 198 0080 FE24      		eor r15,r14
 199               	.LVL17:
 200               	.LBB7:
 157:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 201               		.loc 1 157 0
 202 0082 2F2D      		mov r18,r15
 203 0084 30E0      		ldi r19,0
 204               	.LVL18:
 205               	.L12:
 206 0086 482F      		mov r20,r24
 207               	.LVL19:
 208 0088 B901      		movw r22,r18
 209 008a 082E      		mov r0,r24
 210 008c 00C0      		rjmp 2f
 211               		1:
 212 008e 7595      		asr r23
 213 0090 6795      		ror r22
 214               		2:
 215 0092 0A94      		dec r0
 216 0094 02F4      		brpl 1b
 217 0096 60FF      		sbrs r22,0
 218 0098 00C0      		rjmp .L9
 158:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 219               		.loc 1 158 0
 220 009a 8E83      		std Y+6,r24
 221 009c BF82      		std Y+7,r11
 160:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 222               		.loc 1 160 0
 223 009e 81E0      		ldi r24,lo8(1)
 224 00a0 90E0      		ldi r25,0
 225               	.LVL20:
 226 00a2 6C01      		movw r12,r24
 227 00a4 00C0      		rjmp 2f
 228               		1:
 229 00a6 CC0C      		lsl r12
 230 00a8 DD1C      		rol r13
 231               		2:
 232 00aa 4A95      		dec r20
 233 00ac 02F4      		brpl 1b
 234 00ae 2E2D      		mov r18,r14
 235 00b0 30E0      		ldi r19,0
 236 00b2 2C21      		and r18,r12
 237 00b4 3D21      		and r19,r13
 238 00b6 232B      		or r18,r19
 239 00b8 01F4      		brne .L10
 240 00ba 80E0      		ldi r24,0
 241               	.L10:
 158:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 242               		.loc 1 158 0
 243 00bc 8887      		std Y+8,r24
 161:./tmk_core/common/keyboard.c ****                     });
 244               		.loc 1 161 0
 245 00be 0E94 0000 		call timer_read
 246               	.LVL21:
 247 00c2 8160      		ori r24,1
 158:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 248               		.loc 1 158 0
 249 00c4 782F      		mov r23,r24
 250 00c6 9A87      		std Y+10,r25
 251 00c8 8987      		std Y+9,r24
 252 00ca 4E81      		ldd r20,Y+6
 253 00cc 5F81      		ldd r21,Y+7
 254 00ce 6885      		ldd r22,Y+8
 255 00d0 8A85      		ldd r24,Y+10
 256 00d2 0E94 0000 		call action_exec
 257               	.LVL22:
 164:./tmk_core/common/keyboard.c ****                     // process a key per task call
 258               		.loc 1 164 0
 259 00d6 F801      		movw r30,r16
 260 00d8 E050      		subi r30,lo8(-(matrix_prev.4988))
 261 00da F040      		sbci r31,hi8(-(matrix_prev.4988))
 262 00dc 8081      		ld r24,Z
 263 00de 8C25      		eor r24,r12
 264 00e0 8083      		st Z,r24
 265               	.LVL23:
 266               	.L11:
 267               	.LBE7:
 268               	.LBE10:
 173:./tmk_core/common/keyboard.c **** 
 174:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 175:./tmk_core/common/keyboard.c **** 
 176:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 177:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 178:./tmk_core/common/keyboard.c ****     mousekey_task();
 269               		.loc 1 178 0
 270 00e2 0E94 0000 		call mousekey_task
 271               	.LVL24:
 179:./tmk_core/common/keyboard.c **** #endif
 180:./tmk_core/common/keyboard.c **** 
 181:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 182:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** 
 185:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 186:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 187:./tmk_core/common/keyboard.c **** #endif
 188:./tmk_core/common/keyboard.c **** 
 189:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 190:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 191:./tmk_core/common/keyboard.c **** #endif
 192:./tmk_core/common/keyboard.c **** 
 193:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 194:./tmk_core/common/keyboard.c **** 	serial_link_update();
 195:./tmk_core/common/keyboard.c **** #endif
 196:./tmk_core/common/keyboard.c **** 
 197:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 198:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 199:./tmk_core/common/keyboard.c **** #endif
 200:./tmk_core/common/keyboard.c **** 
 201:./tmk_core/common/keyboard.c ****     // update LED
 202:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 272               		.loc 1 202 0
 273 00e6 0E94 0000 		call host_keyboard_leds
 274               	.LVL25:
 275 00ea 9091 0000 		lds r25,led_status.4989
 276 00ee 8917      		cp r24,r25
 277 00f0 01F0      		breq .L4
 203:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 278               		.loc 1 203 0
 279 00f2 0E94 0000 		call host_keyboard_leds
 280               	.LVL26:
 281 00f6 8093 0000 		sts led_status.4989,r24
 282               	.LVL27:
 283               	/* epilogue start */
 204:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 205:./tmk_core/common/keyboard.c ****     }
 206:./tmk_core/common/keyboard.c **** }
 284               		.loc 1 206 0
 285 00fa 2A96      		adiw r28,10
 286 00fc 0FB6      		in __tmp_reg__,__SREG__
 287 00fe F894      		cli
 288 0100 DEBF      		out __SP_H__,r29
 289 0102 0FBE      		out __SREG__,__tmp_reg__
 290 0104 CDBF      		out __SP_L__,r28
 291 0106 DF91      		pop r29
 292 0108 CF91      		pop r28
 293 010a 1F91      		pop r17
 294 010c 0F91      		pop r16
 295 010e FF90      		pop r15
 296 0110 EF90      		pop r14
 297               	.LVL28:
 298 0112 DF90      		pop r13
 299 0114 CF90      		pop r12
 300 0116 BF90      		pop r11
 301               	.LBB11:
 302               	.LBB12:
 207:./tmk_core/common/keyboard.c **** 
 208:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 209:./tmk_core/common/keyboard.c **** {
 210:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 211:./tmk_core/common/keyboard.c ****     led_set(leds);
 303               		.loc 1 211 0
 304 0118 0C94 0000 		jmp led_set
 305               	.LVL29:
 306               	.L9:
 307 011c 0196      		adiw r24,1
 308               	.LVL30:
 309               	.LBE12:
 310               	.LBE11:
 311               	.LBB13:
 312               	.LBB8:
 156:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 313               		.loc 1 156 0 discriminator 2
 314 011e 8630      		cpi r24,6
 315 0120 9105      		cpc r25,__zero_reg__
 316 0122 01F0      		breq .+2
 317 0124 00C0      		rjmp .L12
 318 0126 00C0      		rjmp .L13
 319               	.LVL31:
 320               	.L4:
 321               	/* epilogue start */
 322               	.LBE8:
 323               	.LBE13:
 206:./tmk_core/common/keyboard.c **** 
 324               		.loc 1 206 0
 325 0128 2A96      		adiw r28,10
 326 012a 0FB6      		in __tmp_reg__,__SREG__
 327 012c F894      		cli
 328 012e DEBF      		out __SP_H__,r29
 329 0130 0FBE      		out __SREG__,__tmp_reg__
 330 0132 CDBF      		out __SP_L__,r28
 331 0134 DF91      		pop r29
 332 0136 CF91      		pop r28
 333 0138 1F91      		pop r17
 334 013a 0F91      		pop r16
 335 013c FF90      		pop r15
 336 013e EF90      		pop r14
 337               	.LVL32:
 338 0140 DF90      		pop r13
 339 0142 CF90      		pop r12
 340 0144 BF90      		pop r11
 341 0146 0895      		ret
 342               		.cfi_endproc
 343               	.LFE106:
 345               		.section	.text.keyboard_set_leds,"ax",@progbits
 346               	.global	keyboard_set_leds
 348               	keyboard_set_leds:
 349               	.LFB107:
 209:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 350               		.loc 1 209 0
 351               		.cfi_startproc
 352               	.LVL33:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
 357               		.loc 1 211 0
 358 0000 0C94 0000 		jmp led_set
 359               	.LVL34:
 360               		.cfi_endproc
 361               	.LFE107:
 363               		.section	.bss.led_status.4989,"aw",@nobits
 366               	led_status.4989:
 367 0000 00        		.zero	1
 368               		.section	.bss.matrix_prev.4988,"aw",@nobits
 371               	matrix_prev.4988:
 372 0000 0000 0000 		.zero	12
 372      0000 0000 
 372      0000 0000 
 373               		.text
 374               	.Letext0:
 375               		.file 2 "/usr/avr/include/stdint.h"
 376               		.file 3 "./tmk_core/common/keyboard.h"
 377               		.file 4 "./tmk_core/common/matrix.h"
 378               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 379               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 380               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 381               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 382               		.file 9 "/usr/avr/include/stdio.h"
 383               		.file 10 "./tmk_core/common/host.h"
 384               		.file 11 "./tmk_core/common/debug.h"
 385               		.file 12 "./quantum/keycode_config.h"
 386               		.file 13 "./quantum/keymap.h"
 387               		.file 14 "./tmk_core/common/timer.h"
 388               		.file 15 "./tmk_core/common/command.h"
 389               		.file 16 "./tmk_core/common/action_layer.h"
 390               		.file 17 "./tmk_core/common/mousekey.h"
 391               		.file 18 "./tmk_core/common/action.h"
 392               		.file 19 "./tmk_core/common/led.h"
 393               		.file 20 "./tmk_core/common/magic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccryNUk4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccryNUk4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccryNUk4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccryNUk4.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccryNUk4.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccryNUk4.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccryNUk4.s:29     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccryNUk4.s:46     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccryNUk4.s:69     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccryNUk4.s:371    .bss.matrix_prev.4988:0000000000000000 matrix_prev.4988
     /tmp/ccryNUk4.s:366    .bss.led_status.4989:0000000000000000 led_status.4989
     /tmp/ccryNUk4.s:348    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
matrix_scan
matrix_get_row
timer_read
action_exec
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
