   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  37:./tmk_core/common/action.c **** #include <fauxclicky.h>
  38:./tmk_core/common/action.c **** #endif
  39:./tmk_core/common/action.c **** 
  40:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  41:./tmk_core/common/action.c **** {
  16               		.loc 1 41 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  42:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  43:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  44:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  45:./tmk_core/common/action.c ****     }
  46:./tmk_core/common/action.c **** 
  47:./tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  48:./tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  49:./tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  50:./tmk_core/common/action.c ****     }
  51:./tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  52:./tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  53:./tmk_core/common/action.c ****     }
  54:./tmk_core/common/action.c ****     fauxclicky_check();
  55:./tmk_core/common/action.c **** #endif
  56:./tmk_core/common/action.c **** 
  57:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  58:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  59:./tmk_core/common/action.c ****         process_hand_swap(&event);
  60:./tmk_core/common/action.c ****     }
  61:./tmk_core/common/action.c **** #endif
  62:./tmk_core/common/action.c **** 
  63:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 63 0
  49 001e 1E82      		std Y+6,__zero_reg__
  50 0020 1D82      		std Y+5,__zero_reg__
  51 0022 85E0      		ldi r24,lo8(5)
  52 0024 FE01      		movw r30,r28
  53 0026 3796      		adiw r30,7
  54 0028 DE01      		movw r26,r28
  55 002a 1196      		adiw r26,1
  56               		0:
  57 002c 0190      		ld r0,Z+
  58 002e 0D92      		st X+,r0
  59 0030 8A95      		dec r24
  60 0032 01F4      		brne 0b
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  67:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
  68:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  69:./tmk_core/common/action.c ****     }
  70:./tmk_core/common/action.c **** #endif
  71:./tmk_core/common/action.c **** 
  72:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  73:./tmk_core/common/action.c ****     action_tapping_process(record);
  61               		.loc 1 73 0
  62 0034 4981      		ldd r20,Y+1
  63               	.LVL1:
  64 0036 5A81      		ldd r21,Y+2
  65               	.LVL2:
  66 0038 6B81      		ldd r22,Y+3
  67 003a 7C81      		ldd r23,Y+4
  68 003c 8D81      		ldd r24,Y+5
  69 003e 9E81      		ldd r25,Y+6
  70               	/* epilogue start */
  74:./tmk_core/common/action.c **** #else
  75:./tmk_core/common/action.c ****     process_record(&record);
  76:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  77:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** #endif
  80:./tmk_core/common/action.c **** }
  71               		.loc 1 80 0
  72 0040 2B96      		adiw r28,11
  73 0042 0FB6      		in __tmp_reg__,__SREG__
  74 0044 F894      		cli
  75 0046 DEBF      		out __SP_H__,r29
  76 0048 0FBE      		out __SREG__,__tmp_reg__
  77 004a CDBF      		out __SP_L__,r28
  78 004c DF91      		pop r29
  79 004e CF91      		pop r28
  73:./tmk_core/common/action.c **** #else
  80               		.loc 1 73 0
  81 0050 0C94 0000 		jmp action_tapping_process
  82               	.LVL3:
  83               		.cfi_endproc
  84               	.LFE103:
  86               		.section	.text.process_record_quantum,"ax",@progbits
  87               		.weak	process_record_quantum
  89               	process_record_quantum:
  90               	.LFB105:
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  83:./tmk_core/common/action.c **** bool swap_hands = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  86:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  87:./tmk_core/common/action.c **** 
  88:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  89:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  90:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  91:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  92:./tmk_core/common/action.c **** 
  93:./tmk_core/common/action.c ****     if (do_swap) {
  94:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  95:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  96:./tmk_core/common/action.c ****     } else {
  97:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  98:./tmk_core/common/action.c ****     }
  99:./tmk_core/common/action.c **** }
 100:./tmk_core/common/action.c **** #endif
 101:./tmk_core/common/action.c **** 
 102:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 103:./tmk_core/common/action.c **** bool disable_action_cache = false;
 104:./tmk_core/common/action.c **** 
 105:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
 106:./tmk_core/common/action.c **** {
 107:./tmk_core/common/action.c ****     disable_action_cache = true;
 108:./tmk_core/common/action.c ****     process_record(record);
 109:./tmk_core/common/action.c ****     disable_action_cache = false;
 110:./tmk_core/common/action.c **** }
 111:./tmk_core/common/action.c **** #else
 112:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
 113:./tmk_core/common/action.c **** {
 114:./tmk_core/common/action.c ****     process_record(record);
 115:./tmk_core/common/action.c **** }
 116:./tmk_core/common/action.c **** #endif
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c **** __attribute__ ((weak))
 119:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  91               		.loc 1 119 0
  92               		.cfi_startproc
  93               	.LVL4:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
 120:./tmk_core/common/action.c ****     return true;
 121:./tmk_core/common/action.c **** }
  98               		.loc 1 121 0
  99 0000 81E0      		ldi r24,lo8(1)
 100               	.LVL5:
 101               	/* epilogue start */
 102 0002 0895      		ret
 103               		.cfi_endproc
 104               	.LFE105:
 106               		.section	.text.register_code,"ax",@progbits
 107               	.global	register_code
 109               	register_code:
 110               	.LFB108:
 122:./tmk_core/common/action.c **** 
 123:./tmk_core/common/action.c **** void process_record(keyrecord_t *record)
 124:./tmk_core/common/action.c **** {
 125:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 126:./tmk_core/common/action.c **** 
 127:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 128:./tmk_core/common/action.c ****         return;
 129:./tmk_core/common/action.c **** 
 130:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 131:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 132:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 133:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 134:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 135:./tmk_core/common/action.c **** #endif
 136:./tmk_core/common/action.c ****     dprintln();
 137:./tmk_core/common/action.c **** 
 138:./tmk_core/common/action.c ****     process_action(record, action);
 139:./tmk_core/common/action.c **** }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 142:./tmk_core/common/action.c **** {
 143:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 144:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 145:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 146:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     if (event.pressed) {
 150:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 151:./tmk_core/common/action.c ****         clear_weak_mods();
 152:./tmk_core/common/action.c ****     }
 153:./tmk_core/common/action.c **** 
 154:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 155:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 156:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 157:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 158:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 159:./tmk_core/common/action.c ****     }
 160:./tmk_core/common/action.c **** #endif
 161:./tmk_core/common/action.c **** 
 162:./tmk_core/common/action.c ****     switch (action.kind.id) {
 163:./tmk_core/common/action.c ****         /* Key and Mods */
 164:./tmk_core/common/action.c ****         case ACT_LMODS:
 165:./tmk_core/common/action.c ****         case ACT_RMODS:
 166:./tmk_core/common/action.c ****             {
 167:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 168:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 169:./tmk_core/common/action.c ****                 if (event.pressed) {
 170:./tmk_core/common/action.c ****                     if (mods) {
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 172:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 173:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 174:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 175:./tmk_core/common/action.c ****                             add_mods(mods);
 176:./tmk_core/common/action.c ****                         } else {
 177:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 178:./tmk_core/common/action.c ****                         }
 179:./tmk_core/common/action.c ****                         send_keyboard_report();
 180:./tmk_core/common/action.c ****                     }
 181:./tmk_core/common/action.c ****                     register_code(action.key.code);
 182:./tmk_core/common/action.c ****                 } else {
 183:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 184:./tmk_core/common/action.c ****                     if (mods) {
 185:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 186:./tmk_core/common/action.c ****                             del_mods(mods);
 187:./tmk_core/common/action.c ****                         } else {
 188:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 189:./tmk_core/common/action.c ****                         }
 190:./tmk_core/common/action.c ****                         send_keyboard_report();
 191:./tmk_core/common/action.c ****                     }
 192:./tmk_core/common/action.c ****                 }
 193:./tmk_core/common/action.c ****             }
 194:./tmk_core/common/action.c ****             break;
 195:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 196:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 197:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 198:./tmk_core/common/action.c ****             {
 199:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 200:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 201:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 202:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 203:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 204:./tmk_core/common/action.c ****                         // Oneshot modifier
 205:./tmk_core/common/action.c ****                         if (event.pressed) {
 206:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 207:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 208:./tmk_core/common/action.c ****                                 register_mods(mods);
 209:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 210:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 211:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 212:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 213:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 214:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 215:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 216:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 217:./tmk_core/common/action.c ****                                 register_mods(mods);
 218:./tmk_core/common/action.c ****                     #endif
 219:./tmk_core/common/action.c ****                             } else {
 220:./tmk_core/common/action.c ****                                 register_mods(mods);
 221:./tmk_core/common/action.c ****                             }
 222:./tmk_core/common/action.c ****                         } else {
 223:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 224:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 226:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 227:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 228:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 229:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 230:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 231:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 232:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 233:./tmk_core/common/action.c ****                                 }
 234:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 235:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 236:./tmk_core/common/action.c ****                     #endif
 237:./tmk_core/common/action.c ****                             } else {
 238:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 239:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 240:./tmk_core/common/action.c ****                             }
 241:./tmk_core/common/action.c ****                         }
 242:./tmk_core/common/action.c ****                         break;
 243:./tmk_core/common/action.c ****     #endif
 244:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 245:./tmk_core/common/action.c ****                         if (event.pressed) {
 246:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 247:./tmk_core/common/action.c ****                                 register_mods(mods);
 248:./tmk_core/common/action.c ****                             }
 249:./tmk_core/common/action.c ****                         } else {
 250:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 251:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 252:./tmk_core/common/action.c ****                             }
 253:./tmk_core/common/action.c ****                         }
 254:./tmk_core/common/action.c ****                         break;
 255:./tmk_core/common/action.c ****                     default:
 256:./tmk_core/common/action.c ****                         if (event.pressed) {
 257:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 258:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 259:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 260:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 261:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 262:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 263:./tmk_core/common/action.c ****                                     register_mods(mods);
 264:./tmk_core/common/action.c ****                                 } else
 265:./tmk_core/common/action.c **** #endif
 266:./tmk_core/common/action.c ****                                 {
 267:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 268:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 269:./tmk_core/common/action.c ****                                 }
 270:./tmk_core/common/action.c ****                             } else {
 271:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 272:./tmk_core/common/action.c ****                                 register_mods(mods);
 273:./tmk_core/common/action.c ****                             }
 274:./tmk_core/common/action.c ****                         } else {
 275:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 276:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 277:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 278:./tmk_core/common/action.c ****                             } else {
 279:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 280:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 281:./tmk_core/common/action.c ****                             }
 282:./tmk_core/common/action.c ****                         }
 283:./tmk_core/common/action.c ****                         break;
 284:./tmk_core/common/action.c ****                 }
 285:./tmk_core/common/action.c ****             }
 286:./tmk_core/common/action.c ****             break;
 287:./tmk_core/common/action.c **** #endif
 288:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 289:./tmk_core/common/action.c ****         /* other HID usage */
 290:./tmk_core/common/action.c ****         case ACT_USAGE:
 291:./tmk_core/common/action.c ****             switch (action.usage.page) {
 292:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 293:./tmk_core/common/action.c ****                     if (event.pressed) {
 294:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 295:./tmk_core/common/action.c ****                     } else {
 296:./tmk_core/common/action.c ****                         host_system_send(0);
 297:./tmk_core/common/action.c ****                     }
 298:./tmk_core/common/action.c ****                     break;
 299:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 300:./tmk_core/common/action.c ****                     if (event.pressed) {
 301:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 302:./tmk_core/common/action.c ****                     } else {
 303:./tmk_core/common/action.c ****                         host_consumer_send(0);
 304:./tmk_core/common/action.c ****                     }
 305:./tmk_core/common/action.c ****                     break;
 306:./tmk_core/common/action.c ****             }
 307:./tmk_core/common/action.c ****             break;
 308:./tmk_core/common/action.c **** #endif
 309:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 310:./tmk_core/common/action.c ****         /* Mouse key */
 311:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 312:./tmk_core/common/action.c ****             if (event.pressed) {
 313:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 314:./tmk_core/common/action.c ****                 mousekey_send();
 315:./tmk_core/common/action.c ****             } else {
 316:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 317:./tmk_core/common/action.c ****                 mousekey_send();
 318:./tmk_core/common/action.c ****             }
 319:./tmk_core/common/action.c ****             break;
 320:./tmk_core/common/action.c **** #endif
 321:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 322:./tmk_core/common/action.c ****         case ACT_LAYER:
 323:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 324:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (!event.pressed) {
 326:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 334:./tmk_core/common/action.c ****                     }
 335:./tmk_core/common/action.c ****                 }
 336:./tmk_core/common/action.c ****             } else {
 337:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 338:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 339:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 340:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 341:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 342:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 343:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 344:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 345:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 346:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 347:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 348:./tmk_core/common/action.c ****                     }
 349:./tmk_core/common/action.c ****                 }
 350:./tmk_core/common/action.c ****             }
 351:./tmk_core/common/action.c ****             break;
 352:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 353:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 354:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 355:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 356:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 357:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 358:./tmk_core/common/action.c ****                     if (event.pressed) {
 359:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 360:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 361:./tmk_core/common/action.c ****                     } else {
 362:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 363:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 364:./tmk_core/common/action.c ****                     }
 365:./tmk_core/common/action.c ****                     break;
 366:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 367:./tmk_core/common/action.c ****                     /* tap toggle */
 368:./tmk_core/common/action.c ****                     if (event.pressed) {
 369:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 370:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 371:./tmk_core/common/action.c ****                         }
 372:./tmk_core/common/action.c ****                     } else {
 373:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 374:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 375:./tmk_core/common/action.c ****                         }
 376:./tmk_core/common/action.c ****                     }
 377:./tmk_core/common/action.c ****                     break;
 378:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 379:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 380:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 381:./tmk_core/common/action.c ****                     break;
 382:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 383:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 384:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 385:./tmk_core/common/action.c ****                     break;
 386:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 387:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 388:./tmk_core/common/action.c ****                                     layer_clear();
 389:./tmk_core/common/action.c ****                     break;
 390:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 391:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 392:./tmk_core/common/action.c ****                     // Oneshot modifier
 393:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 394:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 395:./tmk_core/common/action.c ****                     if (event.pressed) {
 396:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 397:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 398:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 399:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 400:./tmk_core/common/action.c ****                             break;
 401:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 402:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 403:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 404:./tmk_core/common/action.c ****                         }
 405:./tmk_core/common/action.c ****                     } else {
 406:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 407:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 408:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 409:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 410:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 411:./tmk_core/common/action.c ****                         } else {
 412:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 413:./tmk_core/common/action.c ****                         }
 414:./tmk_core/common/action.c ****                     }
 415:./tmk_core/common/action.c ****                 #else
 416:./tmk_core/common/action.c ****                     if (event.pressed) {
 417:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 418:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 419:./tmk_core/common/action.c ****                     } else {
 420:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 421:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 422:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 423:./tmk_core/common/action.c ****                         }
 424:./tmk_core/common/action.c ****                     }
 425:./tmk_core/common/action.c ****                 #endif
 426:./tmk_core/common/action.c ****                     break;
 427:./tmk_core/common/action.c ****             #endif
 428:./tmk_core/common/action.c ****                 default:
 429:./tmk_core/common/action.c ****                     /* tap key */
 430:./tmk_core/common/action.c ****                     if (event.pressed) {
 431:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 432:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 433:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 434:./tmk_core/common/action.c ****                         } else {
 435:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 436:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 437:./tmk_core/common/action.c ****                         }
 438:./tmk_core/common/action.c ****                     } else {
 439:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 440:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 441:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 442:./tmk_core/common/action.c ****                         } else {
 443:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 444:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 445:./tmk_core/common/action.c ****                         }
 446:./tmk_core/common/action.c ****                     }
 447:./tmk_core/common/action.c ****                     break;
 448:./tmk_core/common/action.c ****             }
 449:./tmk_core/common/action.c ****             break;
 450:./tmk_core/common/action.c ****     #endif
 451:./tmk_core/common/action.c **** #endif
 452:./tmk_core/common/action.c ****         /* Extentions */
 453:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 454:./tmk_core/common/action.c ****         case ACT_MACRO:
 455:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 456:./tmk_core/common/action.c ****             break;
 457:./tmk_core/common/action.c **** #endif
 458:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 459:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 460:./tmk_core/common/action.c ****             if (!event.pressed) {
 461:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 462:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 463:./tmk_core/common/action.c ****                         backlight_increase();
 464:./tmk_core/common/action.c ****                         break;
 465:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 466:./tmk_core/common/action.c ****                         backlight_decrease();
 467:./tmk_core/common/action.c ****                         break;
 468:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 469:./tmk_core/common/action.c ****                         backlight_toggle();
 470:./tmk_core/common/action.c ****                         break;
 471:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 472:./tmk_core/common/action.c ****                         backlight_step();
 473:./tmk_core/common/action.c ****                         break;
 474:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 475:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 476:./tmk_core/common/action.c ****                         break;
 477:./tmk_core/common/action.c ****                 }
 478:./tmk_core/common/action.c ****             }
 479:./tmk_core/common/action.c ****             break;
 480:./tmk_core/common/action.c **** #endif
 481:./tmk_core/common/action.c ****         case ACT_COMMAND:
 482:./tmk_core/common/action.c ****             break;
 483:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 484:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 485:./tmk_core/common/action.c ****             switch (action.swap.code) {
 486:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 487:./tmk_core/common/action.c ****                     if (event.pressed) {
 488:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 489:./tmk_core/common/action.c ****                     }
 490:./tmk_core/common/action.c ****                     break;
 491:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 492:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 495:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 496:./tmk_core/common/action.c ****                     break;
 497:./tmk_core/common/action.c ****                 case OP_SH_ON:
 498:./tmk_core/common/action.c ****                     if (!event.pressed) {
 499:./tmk_core/common/action.c ****                         swap_hands = true;
 500:./tmk_core/common/action.c ****                     }
 501:./tmk_core/common/action.c ****                     break;
 502:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 503:./tmk_core/common/action.c ****                     if (!event.pressed) {
 504:./tmk_core/common/action.c ****                         swap_hands = false;
 505:./tmk_core/common/action.c ****                     }
 506:./tmk_core/common/action.c ****                     break;
 507:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 508:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 509:./tmk_core/common/action.c ****                     /* tap toggle */
 510:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 511:./tmk_core/common/action.c ****                         if (!event.pressed) {
 512:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 513:./tmk_core/common/action.c ****                         }
 514:./tmk_core/common/action.c ****                     } else {
 515:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 516:./tmk_core/common/action.c ****                     }
 517:./tmk_core/common/action.c ****                     break;
 518:./tmk_core/common/action.c ****                 default:
 519:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 520:./tmk_core/common/action.c ****                         if (event.pressed) {
 521:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 522:./tmk_core/common/action.c ****                         } else {
 523:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 524:./tmk_core/common/action.c ****                         }
 525:./tmk_core/common/action.c ****                     } else {
 526:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 527:./tmk_core/common/action.c ****                     }
 528:./tmk_core/common/action.c ****     #endif
 529:./tmk_core/common/action.c ****             }
 530:./tmk_core/common/action.c **** #endif
 531:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 532:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 533:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 534:./tmk_core/common/action.c ****             break;
 535:./tmk_core/common/action.c **** #endif
 536:./tmk_core/common/action.c ****         default:
 537:./tmk_core/common/action.c ****             break;
 538:./tmk_core/common/action.c ****     }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 541:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 542:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 543:./tmk_core/common/action.c ****      */
 544:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 545:./tmk_core/common/action.c ****         record->event.pressed = false;
 546:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 547:./tmk_core/common/action.c ****         process_record(record);
 548:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 549:./tmk_core/common/action.c ****     }
 550:./tmk_core/common/action.c **** #endif
 551:./tmk_core/common/action.c **** }
 552:./tmk_core/common/action.c **** 
 553:./tmk_core/common/action.c **** 
 554:./tmk_core/common/action.c **** 
 555:./tmk_core/common/action.c **** 
 556:./tmk_core/common/action.c **** /*
 557:./tmk_core/common/action.c ****  * Utilities for actions.
 558:./tmk_core/common/action.c ****  */
 559:./tmk_core/common/action.c **** void register_code(uint8_t code)
 560:./tmk_core/common/action.c **** {
 111               		.loc 1 560 0
 112               		.cfi_startproc
 113               	.LVL6:
 114 0000 CF93      		push r28
 115               	.LCFI4:
 116               		.cfi_def_cfa_offset 3
 117               		.cfi_offset 28, -2
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 1 */
 121               	.L__stack_usage = 1
 122 0002 C82F      		mov r28,r24
 561:./tmk_core/common/action.c ****     if (code == KC_NO) {
 123               		.loc 1 561 0
 124 0004 8823      		tst r24
 125 0006 01F4      		brne .+2
 126 0008 00C0      		rjmp .L3
 562:./tmk_core/common/action.c ****         return;
 563:./tmk_core/common/action.c ****     }
 564:./tmk_core/common/action.c **** 
 565:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 566:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 127               		.loc 1 566 0
 128 000a 8238      		cpi r24,lo8(-126)
 129 000c 01F4      		brne .L6
 567:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 568:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 569:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 130               		.loc 1 569 0
 131 000e 0E94 0000 		call host_keyboard_leds
 132               	.LVL7:
 133 0012 81FD      		sbrc r24,1
 134 0014 00C0      		rjmp .L3
 570:./tmk_core/common/action.c **** #endif
 571:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 135               		.loc 1 571 0
 136 0016 89E3      		ldi r24,lo8(57)
 137 0018 0E94 0000 		call add_key
 138               	.LVL8:
 572:./tmk_core/common/action.c ****         send_keyboard_report();
 139               		.loc 1 572 0
 140 001c 0E94 0000 		call send_keyboard_report
 141               	.LVL9:
 573:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 142               		.loc 1 573 0
 143 0020 89E3      		ldi r24,lo8(57)
 144               	.L38:
 574:./tmk_core/common/action.c ****         send_keyboard_report();
 575:./tmk_core/common/action.c ****     }
 576:./tmk_core/common/action.c **** 
 577:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 578:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 579:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 580:./tmk_core/common/action.c **** #endif
 581:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 582:./tmk_core/common/action.c ****         send_keyboard_report();
 583:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 145               		.loc 1 583 0
 146 0022 0E94 0000 		call del_key
 147               	.LVL10:
 148               	.L39:
 149               	/* epilogue start */
 584:./tmk_core/common/action.c ****         send_keyboard_report();
 585:./tmk_core/common/action.c ****     }
 586:./tmk_core/common/action.c **** 
 587:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 588:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 589:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 590:./tmk_core/common/action.c **** #endif
 591:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 592:./tmk_core/common/action.c ****         send_keyboard_report();
 593:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 594:./tmk_core/common/action.c ****         send_keyboard_report();
 595:./tmk_core/common/action.c ****     }
 596:./tmk_core/common/action.c **** #endif
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 599:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 600:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 601:./tmk_core/common/action.c **** 
 602:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 603:./tmk_core/common/action.c **** /* TODO: remove
 604:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 605:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 606:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 607:./tmk_core/common/action.c **** 
 608:./tmk_core/common/action.c ****             add_key(code);
 609:./tmk_core/common/action.c ****             send_keyboard_report();
 610:./tmk_core/common/action.c **** 
 611:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 612:./tmk_core/common/action.c ****             send_keyboard_report();
 613:./tmk_core/common/action.c ****             oneshot_cancel();
 614:./tmk_core/common/action.c ****         } else
 615:./tmk_core/common/action.c **** */
 616:./tmk_core/common/action.c **** #endif
 617:./tmk_core/common/action.c ****         {
 618:./tmk_core/common/action.c ****             add_key(code);
 619:./tmk_core/common/action.c ****             send_keyboard_report();
 620:./tmk_core/common/action.c ****         }
 621:./tmk_core/common/action.c ****     }
 622:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 623:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 624:./tmk_core/common/action.c ****         send_keyboard_report();
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 627:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 628:./tmk_core/common/action.c ****     }
 629:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 630:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 631:./tmk_core/common/action.c ****     }
 632:./tmk_core/common/action.c **** }
 150               		.loc 1 632 0
 151 0026 CF91      		pop r28
 584:./tmk_core/common/action.c ****         send_keyboard_report();
 152               		.loc 1 584 0
 153 0028 0C94 0000 		jmp send_keyboard_report
 154               	.LVL11:
 155               	.L6:
 577:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 156               		.loc 1 577 0
 157 002c 8338      		cpi r24,lo8(-125)
 158 002e 01F4      		brne .L8
 579:./tmk_core/common/action.c **** #endif
 159               		.loc 1 579 0
 160 0030 0E94 0000 		call host_keyboard_leds
 161               	.LVL12:
 162 0034 80FD      		sbrc r24,0
 163 0036 00C0      		rjmp .L3
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 164               		.loc 1 581 0
 165 0038 83E5      		ldi r24,lo8(83)
 166 003a 0E94 0000 		call add_key
 167               	.LVL13:
 582:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 168               		.loc 1 582 0
 169 003e 0E94 0000 		call send_keyboard_report
 170               	.LVL14:
 583:./tmk_core/common/action.c ****         send_keyboard_report();
 171               		.loc 1 583 0
 172 0042 83E5      		ldi r24,lo8(83)
 173 0044 00C0      		rjmp .L38
 174               	.LVL15:
 175               	.L8:
 587:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 176               		.loc 1 587 0
 177 0046 8438      		cpi r24,lo8(-124)
 178 0048 01F4      		brne .L9
 589:./tmk_core/common/action.c **** #endif
 179               		.loc 1 589 0
 180 004a 0E94 0000 		call host_keyboard_leds
 181               	.LVL16:
 182 004e 82FD      		sbrc r24,2
 183 0050 00C0      		rjmp .L3
 591:./tmk_core/common/action.c ****         send_keyboard_report();
 184               		.loc 1 591 0
 185 0052 87E4      		ldi r24,lo8(71)
 186 0054 0E94 0000 		call add_key
 187               	.LVL17:
 592:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 188               		.loc 1 592 0
 189 0058 0E94 0000 		call send_keyboard_report
 190               	.LVL18:
 593:./tmk_core/common/action.c ****         send_keyboard_report();
 191               		.loc 1 593 0
 192 005c 87E4      		ldi r24,lo8(71)
 193 005e 00C0      		rjmp .L38
 194               	.LVL19:
 195               	.L9:
 598:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 196               		.loc 1 598 0
 197 0060 8CEF      		ldi r24,lo8(-4)
 198               	.LVL20:
 199 0062 8C0F      		add r24,r28
 200 0064 813A      		cpi r24,lo8(-95)
 201 0066 00F4      		brsh .L10
 600:./tmk_core/common/action.c **** 
 202               		.loc 1 600 0
 203 0068 8C2F      		mov r24,r28
 204 006a 0E94 0000 		call command_proc
 205               	.LVL21:
 206 006e 8111      		cpse r24,__zero_reg__
 207 0070 00C0      		rjmp .L3
 618:./tmk_core/common/action.c ****             send_keyboard_report();
 208               		.loc 1 618 0
 209 0072 8C2F      		mov r24,r28
 210 0074 0E94 0000 		call add_key
 211               	.LVL22:
 212 0078 00C0      		rjmp .L39
 213               	.L10:
 622:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 214               		.loc 1 622 0
 215 007a 80E2      		ldi r24,lo8(32)
 216 007c 8C0F      		add r24,r28
 217 007e 8830      		cpi r24,lo8(8)
 218 0080 00F4      		brsh .L11
 623:./tmk_core/common/action.c ****         send_keyboard_report();
 219               		.loc 1 623 0
 220 0082 C770      		andi r28,lo8(7)
 221               	.LVL23:
 222 0084 81E0      		ldi r24,lo8(1)
 223 0086 00C0      		rjmp 2f
 224               		1:
 225 0088 880F      		lsl r24
 226               		2:
 227 008a CA95      		dec r28
 228 008c 02F4      		brpl 1b
 229 008e 0E94 0000 		call add_mods
 230               	.LVL24:
 231 0092 00C0      		rjmp .L39
 232               	.LVL25:
 233               	.L11:
 626:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 234               		.loc 1 626 0
 235 0094 8BE5      		ldi r24,lo8(91)
 236 0096 8C0F      		add r24,r28
 237 0098 8330      		cpi r24,lo8(3)
 238 009a 00F4      		brsh .L12
 627:./tmk_core/common/action.c ****     }
 239               		.loc 1 627 0
 240 009c 81E8      		ldi r24,lo8(-127)
 241 009e 90E0      		ldi r25,0
 242 00a0 C53A      		cpi r28,lo8(-91)
 243 00a2 01F0      		breq .L13
 627:./tmk_core/common/action.c ****     }
 244               		.loc 1 627 0 is_stmt 0 discriminator 1
 245 00a4 83E8      		ldi r24,lo8(-125)
 246 00a6 90E0      		ldi r25,0
 247 00a8 C63A      		cpi r28,lo8(-90)
 248 00aa 01F4      		brne .L13
 627:./tmk_core/common/action.c ****     }
 249               		.loc 1 627 0
 250 00ac 82E8      		ldi r24,lo8(-126)
 251 00ae 90E0      		ldi r25,0
 252               	.L13:
 253               	/* epilogue start */
 254               		.loc 1 632 0 is_stmt 1 discriminator 12
 255 00b0 CF91      		pop r28
 256               	.LVL26:
 627:./tmk_core/common/action.c ****     }
 257               		.loc 1 627 0 discriminator 12
 258 00b2 0C94 0000 		jmp host_system_send
 259               	.LVL27:
 260               	.L12:
 629:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 261               		.loc 1 629 0
 262 00b6 88E5      		ldi r24,lo8(88)
 263 00b8 8C0F      		add r24,r28
 264 00ba 8531      		cpi r24,lo8(21)
 265 00bc 00F0      		brlo .+2
 266 00be 00C0      		rjmp .L3
 630:./tmk_core/common/action.c ****     }
 267               		.loc 1 630 0
 268 00c0 82EE      		ldi r24,lo8(-30)
 269 00c2 90E0      		ldi r25,0
 270 00c4 C83A      		cpi r28,lo8(-88)
 271 00c6 01F4      		brne .+2
 272 00c8 00C0      		rjmp .L14
 630:./tmk_core/common/action.c ****     }
 273               		.loc 1 630 0 is_stmt 0 discriminator 1
 274 00ca 89EE      		ldi r24,lo8(-23)
 275 00cc 90E0      		ldi r25,0
 276 00ce C93A      		cpi r28,lo8(-87)
 277 00d0 01F4      		brne .+2
 278 00d2 00C0      		rjmp .L14
 630:./tmk_core/common/action.c ****     }
 279               		.loc 1 630 0 discriminator 3
 280 00d4 8AEE      		ldi r24,lo8(-22)
 281 00d6 90E0      		ldi r25,0
 282 00d8 CA3A      		cpi r28,lo8(-86)
 283 00da 01F4      		brne .+2
 284 00dc 00C0      		rjmp .L14
 630:./tmk_core/common/action.c ****     }
 285               		.loc 1 630 0 discriminator 5
 286 00de 85EB      		ldi r24,lo8(-75)
 287 00e0 90E0      		ldi r25,0
 288 00e2 CB3A      		cpi r28,lo8(-85)
 289 00e4 01F4      		brne .+2
 290 00e6 00C0      		rjmp .L14
 630:./tmk_core/common/action.c ****     }
 291               		.loc 1 630 0 discriminator 7
 292 00e8 86EB      		ldi r24,lo8(-74)
 293 00ea 90E0      		ldi r25,0
 294 00ec CC3A      		cpi r28,lo8(-84)
 295 00ee 01F4      		brne .+2
 296 00f0 00C0      		rjmp .L14
 630:./tmk_core/common/action.c ****     }
 297               		.loc 1 630 0 discriminator 9
 298 00f2 83EB      		ldi r24,lo8(-77)
 299 00f4 90E0      		ldi r25,0
 300 00f6 CB3B      		cpi r28,lo8(-69)
 301 00f8 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 302               		.loc 1 630 0 discriminator 11
 303 00fa 84EB      		ldi r24,lo8(-76)
 304 00fc 90E0      		ldi r25,0
 305 00fe CC3B      		cpi r28,lo8(-68)
 306 0100 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 307               		.loc 1 630 0 discriminator 13
 308 0102 87EB      		ldi r24,lo8(-73)
 309 0104 90E0      		ldi r25,0
 310 0106 CD3A      		cpi r28,lo8(-83)
 311 0108 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 312               		.loc 1 630 0 discriminator 15
 313 010a 8CEC      		ldi r24,lo8(-52)
 314 010c 90E0      		ldi r25,0
 315 010e C03B      		cpi r28,lo8(-80)
 316 0110 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 317               		.loc 1 630 0 discriminator 17
 318 0112 8DEC      		ldi r24,lo8(-51)
 319 0114 90E0      		ldi r25,0
 320 0116 CE3A      		cpi r28,lo8(-82)
 321 0118 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 322               		.loc 1 630 0 discriminator 19
 323 011a 83E8      		ldi r24,lo8(-125)
 324 011c 91E0      		ldi r25,lo8(1)
 325 011e CF3A      		cpi r28,lo8(-81)
 326 0120 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 327               		.loc 1 630 0 discriminator 21
 328 0122 8AE8      		ldi r24,lo8(-118)
 329 0124 91E0      		ldi r25,lo8(1)
 330 0126 C13B      		cpi r28,lo8(-79)
 331 0128 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 332               		.loc 1 630 0 discriminator 23
 333 012a 82E9      		ldi r24,lo8(-110)
 334 012c 91E0      		ldi r25,lo8(1)
 335 012e C23B      		cpi r28,lo8(-78)
 336 0130 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 337               		.loc 1 630 0 discriminator 25
 338 0132 84E9      		ldi r24,lo8(-108)
 339 0134 91E0      		ldi r25,lo8(1)
 340 0136 C33B      		cpi r28,lo8(-77)
 341 0138 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 342               		.loc 1 630 0 discriminator 27
 343 013a 81E2      		ldi r24,lo8(33)
 344 013c 92E0      		ldi r25,lo8(2)
 345 013e C43B      		cpi r28,lo8(-76)
 346 0140 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 347               		.loc 1 630 0 discriminator 29
 348 0142 83E2      		ldi r24,lo8(35)
 349 0144 92E0      		ldi r25,lo8(2)
 350 0146 C53B      		cpi r28,lo8(-75)
 351 0148 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 352               		.loc 1 630 0 discriminator 31
 353 014a 84E2      		ldi r24,lo8(36)
 354 014c 92E0      		ldi r25,lo8(2)
 355 014e C63B      		cpi r28,lo8(-74)
 356 0150 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 357               		.loc 1 630 0 discriminator 33
 358 0152 85E2      		ldi r24,lo8(37)
 359 0154 92E0      		ldi r25,lo8(2)
 360 0156 C73B      		cpi r28,lo8(-73)
 361 0158 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 362               		.loc 1 630 0 discriminator 35
 363 015a 86E2      		ldi r24,lo8(38)
 364 015c 92E0      		ldi r25,lo8(2)
 365 015e C83B      		cpi r28,lo8(-72)
 366 0160 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 367               		.loc 1 630 0 discriminator 37
 368 0162 87E2      		ldi r24,lo8(39)
 369 0164 92E0      		ldi r25,lo8(2)
 370 0166 C93B      		cpi r28,lo8(-71)
 371 0168 01F0      		breq .L14
 630:./tmk_core/common/action.c ****     }
 372               		.loc 1 630 0 discriminator 39
 373 016a 90E0      		ldi r25,0
 374 016c 80E0      		ldi r24,0
 375 016e CA3B      		cpi r28,lo8(-70)
 376 0170 01F4      		brne .L14
 630:./tmk_core/common/action.c ****     }
 377               		.loc 1 630 0
 378 0172 8AE2      		ldi r24,lo8(42)
 379 0174 92E0      		ldi r25,lo8(2)
 380               	.L14:
 381               	/* epilogue start */
 382               		.loc 1 632 0 is_stmt 1 discriminator 84
 383 0176 CF91      		pop r28
 384               	.LVL28:
 630:./tmk_core/common/action.c ****     }
 385               		.loc 1 630 0 discriminator 84
 386 0178 0C94 0000 		jmp host_consumer_send
 387               	.LVL29:
 388               	.L3:
 389               	/* epilogue start */
 390               		.loc 1 632 0
 391 017c CF91      		pop r28
 392               	.LVL30:
 393 017e 0895      		ret
 394               		.cfi_endproc
 395               	.LFE108:
 397               		.section	.text.unregister_code,"ax",@progbits
 398               	.global	unregister_code
 400               	unregister_code:
 401               	.LFB109:
 633:./tmk_core/common/action.c **** 
 634:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 635:./tmk_core/common/action.c **** {
 402               		.loc 1 635 0
 403               		.cfi_startproc
 404               	.LVL31:
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 0 */
 408               	.L__stack_usage = 0
 636:./tmk_core/common/action.c ****     if (code == KC_NO) {
 409               		.loc 1 636 0
 410 0000 8823      		tst r24
 411 0002 01F4      		brne .+2
 412 0004 00C0      		rjmp .L40
 637:./tmk_core/common/action.c ****         return;
 638:./tmk_core/common/action.c ****     }
 639:./tmk_core/common/action.c **** 
 640:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 641:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 413               		.loc 1 641 0
 414 0006 8238      		cpi r24,lo8(-126)
 415 0008 01F4      		brne .L43
 642:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 643:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 644:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 416               		.loc 1 644 0
 417 000a 0E94 0000 		call host_keyboard_leds
 418               	.LVL32:
 419 000e 81FF      		sbrs r24,1
 420 0010 00C0      		rjmp .L40
 645:./tmk_core/common/action.c **** #endif
 646:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 421               		.loc 1 646 0
 422 0012 89E3      		ldi r24,lo8(57)
 423 0014 0E94 0000 		call add_key
 424               	.LVL33:
 647:./tmk_core/common/action.c ****         send_keyboard_report();
 425               		.loc 1 647 0
 426 0018 0E94 0000 		call send_keyboard_report
 427               	.LVL34:
 648:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 428               		.loc 1 648 0
 429 001c 89E3      		ldi r24,lo8(57)
 430               	.L59:
 649:./tmk_core/common/action.c ****         send_keyboard_report();
 650:./tmk_core/common/action.c ****     }
 651:./tmk_core/common/action.c **** 
 652:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 653:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 654:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 655:./tmk_core/common/action.c **** #endif
 656:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 657:./tmk_core/common/action.c ****         send_keyboard_report();
 658:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 431               		.loc 1 658 0
 432 001e 0E94 0000 		call del_key
 433               	.LVL35:
 434               	.L60:
 659:./tmk_core/common/action.c ****         send_keyboard_report();
 435               		.loc 1 659 0
 436 0022 0C94 0000 		jmp send_keyboard_report
 437               	.LVL36:
 438               	.L43:
 652:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 439               		.loc 1 652 0
 440 0026 8338      		cpi r24,lo8(-125)
 441 0028 01F4      		brne .L45
 654:./tmk_core/common/action.c **** #endif
 442               		.loc 1 654 0
 443 002a 0E94 0000 		call host_keyboard_leds
 444               	.LVL37:
 445 002e 80FF      		sbrs r24,0
 446 0030 00C0      		rjmp .L40
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 447               		.loc 1 656 0
 448 0032 83E5      		ldi r24,lo8(83)
 449 0034 0E94 0000 		call add_key
 450               	.LVL38:
 657:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 451               		.loc 1 657 0
 452 0038 0E94 0000 		call send_keyboard_report
 453               	.LVL39:
 658:./tmk_core/common/action.c ****         send_keyboard_report();
 454               		.loc 1 658 0
 455 003c 83E5      		ldi r24,lo8(83)
 456 003e 00C0      		rjmp .L59
 457               	.LVL40:
 458               	.L45:
 660:./tmk_core/common/action.c ****     }
 661:./tmk_core/common/action.c **** 
 662:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 459               		.loc 1 662 0
 460 0040 8438      		cpi r24,lo8(-124)
 461 0042 01F4      		brne .L46
 663:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 664:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 462               		.loc 1 664 0
 463 0044 0E94 0000 		call host_keyboard_leds
 464               	.LVL41:
 465 0048 82FF      		sbrs r24,2
 466 004a 00C0      		rjmp .L40
 665:./tmk_core/common/action.c **** #endif
 666:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 467               		.loc 1 666 0
 468 004c 87E4      		ldi r24,lo8(71)
 469 004e 0E94 0000 		call add_key
 470               	.LVL42:
 667:./tmk_core/common/action.c ****         send_keyboard_report();
 471               		.loc 1 667 0
 472 0052 0E94 0000 		call send_keyboard_report
 473               	.LVL43:
 668:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 474               		.loc 1 668 0
 475 0056 87E4      		ldi r24,lo8(71)
 476 0058 00C0      		rjmp .L59
 477               	.LVL44:
 478               	.L46:
 669:./tmk_core/common/action.c ****         send_keyboard_report();
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c **** #endif
 672:./tmk_core/common/action.c **** 
 673:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 479               		.loc 1 673 0
 480 005a 9CEF      		ldi r25,lo8(-4)
 481 005c 980F      		add r25,r24
 482 005e 913A      		cpi r25,lo8(-95)
 483 0060 00F0      		brlo .L59
 674:./tmk_core/common/action.c ****         del_key(code);
 675:./tmk_core/common/action.c ****         send_keyboard_report();
 676:./tmk_core/common/action.c ****     }
 677:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 484               		.loc 1 677 0
 485 0062 90E2      		ldi r25,lo8(32)
 486 0064 980F      		add r25,r24
 487 0066 9830      		cpi r25,lo8(8)
 488 0068 00F4      		brsh .L48
 678:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 489               		.loc 1 678 0
 490 006a 8770      		andi r24,lo8(7)
 491               	.LVL45:
 492 006c 91E0      		ldi r25,lo8(1)
 493 006e 00C0      		rjmp 2f
 494               		1:
 495 0070 990F      		lsl r25
 496               		2:
 497 0072 8A95      		dec r24
 498 0074 02F4      		brpl 1b
 499 0076 892F      		mov r24,r25
 500 0078 0E94 0000 		call del_mods
 501               	.LVL46:
 502 007c 00C0      		rjmp .L60
 503               	.LVL47:
 504               	.L48:
 679:./tmk_core/common/action.c ****         send_keyboard_report();
 680:./tmk_core/common/action.c ****     }
 681:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 505               		.loc 1 681 0
 506 007e 9BE5      		ldi r25,lo8(91)
 507 0080 980F      		add r25,r24
 508 0082 9330      		cpi r25,lo8(3)
 509 0084 00F4      		brsh .L49
 682:./tmk_core/common/action.c ****         host_system_send(0);
 510               		.loc 1 682 0
 511 0086 90E0      		ldi r25,0
 512 0088 80E0      		ldi r24,0
 513               	.LVL48:
 514 008a 0C94 0000 		jmp host_system_send
 515               	.LVL49:
 516               	.L49:
 683:./tmk_core/common/action.c ****     }
 684:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 517               		.loc 1 684 0
 518 008e 885A      		subi r24,lo8(-(88))
 519               	.LVL50:
 520 0090 8531      		cpi r24,lo8(21)
 521 0092 00F4      		brsh .L40
 685:./tmk_core/common/action.c ****         host_consumer_send(0);
 522               		.loc 1 685 0
 523 0094 90E0      		ldi r25,0
 524 0096 80E0      		ldi r24,0
 525               	.LVL51:
 526 0098 0C94 0000 		jmp host_consumer_send
 527               	.LVL52:
 528               	.L40:
 529               	/* epilogue start */
 686:./tmk_core/common/action.c ****     }
 687:./tmk_core/common/action.c **** }
 530               		.loc 1 687 0
 531 009c 0895      		ret
 532               		.cfi_endproc
 533               	.LFE109:
 535               		.section	.text.register_mods,"ax",@progbits
 536               	.global	register_mods
 538               	register_mods:
 539               	.LFB110:
 688:./tmk_core/common/action.c **** 
 689:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 690:./tmk_core/common/action.c **** {
 540               		.loc 1 690 0
 541               		.cfi_startproc
 542               	.LVL53:
 543               	/* prologue: function */
 544               	/* frame size = 0 */
 545               	/* stack size = 0 */
 546               	.L__stack_usage = 0
 691:./tmk_core/common/action.c ****     if (mods) {
 547               		.loc 1 691 0
 548 0000 8823      		tst r24
 549 0002 01F0      		breq .L61
 692:./tmk_core/common/action.c ****         add_mods(mods);
 550               		.loc 1 692 0
 551 0004 0E94 0000 		call add_mods
 552               	.LVL54:
 693:./tmk_core/common/action.c ****         send_keyboard_report();
 553               		.loc 1 693 0
 554 0008 0C94 0000 		jmp send_keyboard_report
 555               	.LVL55:
 556               	.L61:
 557               	/* epilogue start */
 694:./tmk_core/common/action.c ****     }
 695:./tmk_core/common/action.c **** }
 558               		.loc 1 695 0
 559 000c 0895      		ret
 560               		.cfi_endproc
 561               	.LFE110:
 563               		.section	.text.unregister_mods,"ax",@progbits
 564               	.global	unregister_mods
 566               	unregister_mods:
 567               	.LFB111:
 696:./tmk_core/common/action.c **** 
 697:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 698:./tmk_core/common/action.c **** {
 568               		.loc 1 698 0
 569               		.cfi_startproc
 570               	.LVL56:
 571               	/* prologue: function */
 572               	/* frame size = 0 */
 573               	/* stack size = 0 */
 574               	.L__stack_usage = 0
 699:./tmk_core/common/action.c ****     if (mods) {
 575               		.loc 1 699 0
 576 0000 8823      		tst r24
 577 0002 01F0      		breq .L63
 700:./tmk_core/common/action.c ****         del_mods(mods);
 578               		.loc 1 700 0
 579 0004 0E94 0000 		call del_mods
 580               	.LVL57:
 701:./tmk_core/common/action.c ****         send_keyboard_report();
 581               		.loc 1 701 0
 582 0008 0C94 0000 		jmp send_keyboard_report
 583               	.LVL58:
 584               	.L63:
 585               	/* epilogue start */
 702:./tmk_core/common/action.c ****     }
 703:./tmk_core/common/action.c **** }
 586               		.loc 1 703 0
 587 000c 0895      		ret
 588               		.cfi_endproc
 589               	.LFE111:
 591               		.section	.text.process_action,"ax",@progbits
 592               	.global	process_action
 594               	process_action:
 595               	.LFB107:
 142:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 596               		.loc 1 142 0
 597               		.cfi_startproc
 598               	.LVL59:
 599 0000 8F92      		push r8
 600               	.LCFI5:
 601               		.cfi_def_cfa_offset 3
 602               		.cfi_offset 8, -2
 603 0002 9F92      		push r9
 604               	.LCFI6:
 605               		.cfi_def_cfa_offset 4
 606               		.cfi_offset 9, -3
 607 0004 AF92      		push r10
 608               	.LCFI7:
 609               		.cfi_def_cfa_offset 5
 610               		.cfi_offset 10, -4
 611 0006 BF92      		push r11
 612               	.LCFI8:
 613               		.cfi_def_cfa_offset 6
 614               		.cfi_offset 11, -5
 615 0008 DF92      		push r13
 616               	.LCFI9:
 617               		.cfi_def_cfa_offset 7
 618               		.cfi_offset 13, -6
 619 000a EF92      		push r14
 620               	.LCFI10:
 621               		.cfi_def_cfa_offset 8
 622               		.cfi_offset 14, -7
 623 000c FF92      		push r15
 624               	.LCFI11:
 625               		.cfi_def_cfa_offset 9
 626               		.cfi_offset 15, -8
 627 000e 0F93      		push r16
 628               	.LCFI12:
 629               		.cfi_def_cfa_offset 10
 630               		.cfi_offset 16, -9
 631 0010 1F93      		push r17
 632               	.LCFI13:
 633               		.cfi_def_cfa_offset 11
 634               		.cfi_offset 17, -10
 635 0012 CF93      		push r28
 636               	.LCFI14:
 637               		.cfi_def_cfa_offset 12
 638               		.cfi_offset 28, -11
 639 0014 DF93      		push r29
 640               	.LCFI15:
 641               		.cfi_def_cfa_offset 13
 642               		.cfi_offset 29, -12
 643               	/* prologue: function */
 644               	/* frame size = 0 */
 645               	/* stack size = 11 */
 646               	.L__stack_usage = 11
 647 0016 7C01      		movw r14,r24
 648 0018 D62F      		mov r29,r22
 649 001a C72F      		mov r28,r23
 650               	.LVL60:
 146:./tmk_core/common/action.c **** #endif
 651               		.loc 1 146 0
 652 001c FC01      		movw r30,r24
 653 001e 0581      		ldd r16,Z+5
 654 0020 0295      		swap r16
 655 0022 0F70      		andi r16,lo8(15)
 656               	.LVL61:
 149:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 657               		.loc 1 149 0
 658 0024 1281      		ldd r17,Z+2
 659 0026 1111      		cpse r17,__zero_reg__
 151:./tmk_core/common/action.c ****     }
 660               		.loc 1 151 0
 661 0028 0E94 0000 		call clear_weak_mods
 662               	.LVL62:
 663               	.L66:
 156:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 664               		.loc 1 156 0
 665 002c 0E94 0000 		call is_oneshot_layer_active
 666               	.LVL63:
 667 0030 D82E      		mov r13,r24
 668 0032 8823      		tst r24
 669 0034 01F0      		breq .L67
 156:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 670               		.loc 1 156 0 is_stmt 0 discriminator 1
 671 0036 1123      		tst r17
 672 0038 01F0      		breq .L141
 156:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 673               		.loc 1 156 0 discriminator 2
 674 003a 80E2      		ldi r24,lo8(32)
 675 003c 8D0F      		add r24,r29
 676 003e 8830      		cpi r24,lo8(8)
 677 0040 00F0      		brlo .L141
 157:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 678               		.loc 1 157 0 is_stmt 1
 679 0042 82E0      		ldi r24,lo8(2)
 680 0044 0E94 0000 		call clear_oneshot_layer_state
 681               	.LVL64:
 158:./tmk_core/common/action.c ****     }
 682               		.loc 1 158 0
 683 0048 0E94 0000 		call is_oneshot_layer_active
 684               	.LVL65:
 685 004c 91E0      		ldi r25,lo8(1)
 686 004e D82E      		mov r13,r24
 687 0050 D926      		eor r13,r25
 688               	.LVL66:
 689               	.L67:
 162:./tmk_core/common/action.c ****         /* Key and Mods */
 690               		.loc 1 162 0
 691 0052 EC2F      		mov r30,r28
 692 0054 E295      		swap r30
 693 0056 EF70      		andi r30,lo8(15)
 694 0058 F0E0      		ldi r31,0
 695 005a E050      		subi r30,lo8(-(gs(.L70)))
 696 005c F040      		sbci r31,hi8(-(gs(.L70)))
 697 005e 0C94 0000 		jmp __tablejump2__
 698               		.p2align	1
 699               	.L70:
 700 0062 0000      		.word gs(.L69)
 701 0064 0000      		.word gs(.L69)
 702 0066 0000      		.word gs(.L71)
 703 0068 0000      		.word gs(.L71)
 704 006a 0000      		.word gs(.L72)
 705 006c 0000      		.word gs(.L73)
 706 006e 0000      		.word gs(.L68)
 707 0070 0000      		.word gs(.L68)
 708 0072 0000      		.word gs(.L74)
 709 0074 0000      		.word gs(.L68)
 710 0076 0000      		.word gs(.L75)
 711 0078 0000      		.word gs(.L75)
 712 007a 0000      		.word gs(.L76)
 713 007c 0000      		.word gs(.L68)
 714 007e 0000      		.word gs(.L68)
 715 0080 0000      		.word gs(.L77)
 716               	.LVL67:
 717               	.L141:
 143:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 718               		.loc 1 143 0
 719 0082 D12C      		mov r13,__zero_reg__
 720 0084 00C0      		rjmp .L67
 721               	.LVL68:
 722               	.L69:
 723 0086 0C2F      		mov r16,r28
 724               	.LVL69:
 725 0088 0F70      		andi r16,lo8(15)
 726               	.LBB2:
 167:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 727               		.loc 1 167 0
 728 008a C07F      		andi r28,lo8(-16)
 729               	.LVL70:
 730 008c 01F0      		breq .L78
 167:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 731               		.loc 1 167 0 is_stmt 0 discriminator 2
 732 008e 0295      		swap r16
 733 0090 007F      		andi r16,lo8(-16)
 734               	.L78:
 735               	.LVL71:
 169:./tmk_core/common/action.c ****                     if (mods) {
 736               		.loc 1 169 0 is_stmt 1 discriminator 4
 737 0092 1123      		tst r17
 738 0094 01F0      		breq .L79
 170:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 739               		.loc 1 170 0
 740 0096 0023      		tst r16
 741 0098 01F0      		breq .L174
 171:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 742               		.loc 1 171 0
 743 009a 80E2      		ldi r24,lo8(32)
 744 009c 8D0F      		add r24,r29
 745 009e 8830      		cpi r24,lo8(8)
 746 00a0 00F0      		brlo .L81
 171:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 747               		.loc 1 171 0 is_stmt 0 discriminator 1
 748 00a2 D111      		cpse r29,__zero_reg__
 749 00a4 00C0      		rjmp .L82
 750               	.L81:
 175:./tmk_core/common/action.c ****                         } else {
 751               		.loc 1 175 0 is_stmt 1
 752 00a6 802F      		mov r24,r16
 753 00a8 0E94 0000 		call add_mods
 754               	.LVL72:
 755               	.L83:
 179:./tmk_core/common/action.c ****                     }
 756               		.loc 1 179 0
 757 00ac 0E94 0000 		call send_keyboard_report
 758               	.LVL73:
 759               	.L174:
 760               	.LBE2:
 433:./tmk_core/common/action.c ****                         } else {
 761               		.loc 1 433 0
 762 00b0 8D2F      		mov r24,r29
 763 00b2 0E94 0000 		call register_code
 764               	.LVL74:
 765 00b6 00C0      		rjmp .L68
 766               	.LVL75:
 767               	.L82:
 768               	.LBB3:
 177:./tmk_core/common/action.c ****                         }
 769               		.loc 1 177 0
 770 00b8 802F      		mov r24,r16
 771 00ba 0E94 0000 		call add_weak_mods
 772               	.LVL76:
 773 00be 00C0      		rjmp .L83
 774               	.L79:
 183:./tmk_core/common/action.c ****                     if (mods) {
 775               		.loc 1 183 0
 776 00c0 8D2F      		mov r24,r29
 777 00c2 0E94 0000 		call unregister_code
 778               	.LVL77:
 184:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 779               		.loc 1 184 0
 780 00c6 0023      		tst r16
 781 00c8 01F0      		breq .L68
 185:./tmk_core/common/action.c ****                             del_mods(mods);
 782               		.loc 1 185 0
 783 00ca 80E2      		ldi r24,lo8(32)
 784 00cc 8D0F      		add r24,r29
 785 00ce 8830      		cpi r24,lo8(8)
 786 00d0 00F0      		brlo .L85
 185:./tmk_core/common/action.c ****                             del_mods(mods);
 787               		.loc 1 185 0 is_stmt 0 discriminator 1
 788 00d2 D111      		cpse r29,__zero_reg__
 789 00d4 00C0      		rjmp .L86
 790               	.L85:
 186:./tmk_core/common/action.c ****                         } else {
 791               		.loc 1 186 0 is_stmt 1
 792 00d6 802F      		mov r24,r16
 793 00d8 0E94 0000 		call del_mods
 794               	.LVL78:
 795               	.L87:
 190:./tmk_core/common/action.c ****                     }
 796               		.loc 1 190 0
 797 00dc 0E94 0000 		call send_keyboard_report
 798               	.LVL79:
 799               	.L68:
 800               	.LBE3:
 544:./tmk_core/common/action.c ****         record->event.pressed = false;
 801               		.loc 1 544 0
 802 00e0 DD20      		tst r13
 803 00e2 01F4      		brne .+2
 804 00e4 00C0      		rjmp .L65
 544:./tmk_core/common/action.c ****         record->event.pressed = false;
 805               		.loc 1 544 0 is_stmt 0 discriminator 1
 806 00e6 0E94 0000 		call get_oneshot_layer_state
 807               	.LVL80:
 808 00ea 80FD      		sbrc r24,0
 809 00ec 00C0      		rjmp .L65
 545:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 810               		.loc 1 545 0 is_stmt 1
 811 00ee F701      		movw r30,r14
 812 00f0 1282      		std Z+2,__zero_reg__
 546:./tmk_core/common/action.c ****         process_record(record);
 813               		.loc 1 546 0
 814 00f2 0E94 0000 		call get_oneshot_layer
 815               	.LVL81:
 816 00f6 0E94 0000 		call layer_on
 817               	.LVL82:
 547:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 818               		.loc 1 547 0
 819 00fa C701      		movw r24,r14
 820 00fc 0E94 0000 		call process_record
 821               	.LVL83:
 548:./tmk_core/common/action.c ****     }
 822               		.loc 1 548 0
 823 0100 0E94 0000 		call get_oneshot_layer
 824               	.LVL84:
 825               	/* epilogue start */
 551:./tmk_core/common/action.c **** 
 826               		.loc 1 551 0
 827 0104 DF91      		pop r29
 828               	.LVL85:
 829 0106 CF91      		pop r28
 830 0108 1F91      		pop r17
 831               	.LVL86:
 832 010a 0F91      		pop r16
 833 010c FF90      		pop r15
 834 010e EF90      		pop r14
 835               	.LVL87:
 836 0110 DF90      		pop r13
 837               	.LVL88:
 838 0112 BF90      		pop r11
 839 0114 AF90      		pop r10
 840 0116 9F90      		pop r9
 841 0118 8F90      		pop r8
 548:./tmk_core/common/action.c ****     }
 842               		.loc 1 548 0
 843 011a 0C94 0000 		jmp layer_off
 844               	.LVL89:
 845               	.L86:
 846               	.LBB4:
 188:./tmk_core/common/action.c ****                         }
 847               		.loc 1 188 0
 848 011e 802F      		mov r24,r16
 849 0120 0E94 0000 		call del_weak_mods
 850               	.LVL90:
 851 0124 00C0      		rjmp .L87
 852               	.LVL91:
 853               	.L71:
 854 0126 FC2F      		mov r31,r28
 855 0128 FF70      		andi r31,lo8(15)
 856 012a BF2E      		mov r11,r31
 857               	.LBE4:
 858               	.LBB5:
 199:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 859               		.loc 1 199 0
 860 012c C07F      		andi r28,lo8(-16)
 861               	.LVL92:
 862 012e C032      		cpi r28,lo8(32)
 863 0130 01F0      		breq .L88
 199:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 864               		.loc 1 199 0 is_stmt 0 discriminator 2
 865 0132 B294      		swap r11
 866 0134 80EF      		ldi r24,lo8(-16)
 867 0136 B822      		and r11,r24
 868               	.L88:
 869               	.LVL93:
 201:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 870               		.loc 1 201 0 is_stmt 1 discriminator 4
 871 0138 DD23      		tst r29
 872 013a 01F0      		breq .L90
 873 013c D130      		cpi r29,lo8(1)
 874 013e 01F0      		breq .L91
 256:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 875               		.loc 1 256 0
 876 0140 1123      		tst r17
 877 0142 01F0      		breq .L98
 257:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 878               		.loc 1 257 0
 879 0144 0023      		tst r16
 880 0146 01F0      		breq .L175
 881 0148 00C0      		rjmp .L174
 882               	.L90:
 205:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 883               		.loc 1 205 0
 884 014a 1123      		tst r17
 885 014c 01F0      		breq .L92
 206:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 886               		.loc 1 206 0
 887 014e 0111      		cpse r16,__zero_reg__
 888 0150 00C0      		rjmp .L93
 889               	.L175:
 247:./tmk_core/common/action.c ****                             }
 890               		.loc 1 247 0
 891 0152 8B2D      		mov r24,r11
 892               	.LVL94:
 893               	.L172:
 894 0154 0E94 0000 		call register_mods
 895               	.LVL95:
 896 0158 00C0      		rjmp .L68
 897               	.LVL96:
 898               	.L93:
 211:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 899               		.loc 1 211 0
 900 015a 8B2D      		mov r24,r11
 209:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 901               		.loc 1 209 0
 902 015c 0130      		cpi r16,lo8(1)
 903 015e 01F4      		brne .L172
 211:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 904               		.loc 1 211 0
 905 0160 0E94 0000 		call set_oneshot_mods
 906               	.LVL97:
 907 0164 00C0      		rjmp .L68
 908               	.L92:
 223:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 909               		.loc 1 223 0
 910 0166 0111      		cpse r16,__zero_reg__
 911 0168 00C0      		rjmp .L95
 912               	.L179:
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 913               		.loc 1 238 0
 914 016a 0E94 0000 		call clear_oneshot_mods
 915               	.LVL98:
 916               	.L100:
 280:./tmk_core/common/action.c ****                             }
 917               		.loc 1 280 0
 918 016e 8B2D      		mov r24,r11
 919               	.LVL99:
 920               	.L169:
 921               	.LBE5:
 363:./tmk_core/common/action.c ****                     }
 922               		.loc 1 363 0
 923 0170 0E94 0000 		call unregister_mods
 924               	.LVL100:
 925 0174 00C0      		rjmp .L68
 926               	.LVL101:
 927               	.L95:
 928               	.LBB6:
 226:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 929               		.loc 1 226 0
 930 0176 0130      		cpi r16,lo8(1)
 931 0178 01F4      		brne .+2
 932 017a 00C0      		rjmp .L68
 933 017c 00C0      		rjmp .L179
 934               	.L91:
 245:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 935               		.loc 1 245 0
 936 017e 1123      		tst r17
 937 0180 01F0      		breq .L97
 246:./tmk_core/common/action.c ****                                 register_mods(mods);
 938               		.loc 1 246 0
 939 0182 0230      		cpi r16,lo8(2)
 940 0184 00F0      		brlo .+2
 941 0186 00C0      		rjmp .L68
 942 0188 00C0      		rjmp .L175
 943               	.L97:
 250:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 944               		.loc 1 250 0
 945 018a 0111      		cpse r16,__zero_reg__
 946 018c 00C0      		rjmp .L68
 947 018e 00C0      		rjmp .L100
 948               	.L98:
 275:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 949               		.loc 1 275 0
 950 0190 0023      		tst r16
 951 0192 01F0      		breq .L100
 952               	.LVL102:
 953               	.L173:
 954               	.LBE6:
 441:./tmk_core/common/action.c ****                         } else {
 955               		.loc 1 441 0
 956 0194 8D2F      		mov r24,r29
 957 0196 0E94 0000 		call unregister_code
 958               	.LVL103:
 959 019a 00C0      		rjmp .L68
 960               	.L72:
 291:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 961               		.loc 1 291 0
 962 019c 8C2F      		mov r24,r28
 963 019e 8695      		lsr r24
 964 01a0 8695      		lsr r24
 965 01a2 8370      		andi r24,lo8(3)
 966 01a4 01F0      		breq .L101
 967 01a6 8130      		cpi r24,lo8(1)
 968 01a8 01F0      		breq .+2
 969 01aa 00C0      		rjmp .L68
 301:./tmk_core/common/action.c ****                     } else {
 970               		.loc 1 301 0
 971 01ac 8D2F      		mov r24,r29
 972 01ae 9C2F      		mov r25,r28
 973 01b0 9370      		andi r25,lo8(3)
 300:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 974               		.loc 1 300 0
 975 01b2 1111      		cpse r17,__zero_reg__
 976 01b4 00C0      		rjmp .L176
 303:./tmk_core/common/action.c ****                     }
 977               		.loc 1 303 0
 978 01b6 90E0      		ldi r25,0
 979 01b8 80E0      		ldi r24,0
 980               	.L176:
 981 01ba 0E94 0000 		call host_consumer_send
 982               	.LVL104:
 983 01be 00C0      		rjmp .L68
 984               	.L101:
 294:./tmk_core/common/action.c ****                     } else {
 985               		.loc 1 294 0
 986 01c0 8D2F      		mov r24,r29
 987 01c2 9C2F      		mov r25,r28
 988 01c4 9370      		andi r25,lo8(3)
 293:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 989               		.loc 1 293 0
 990 01c6 1111      		cpse r17,__zero_reg__
 991 01c8 00C0      		rjmp .L166
 296:./tmk_core/common/action.c ****                     }
 992               		.loc 1 296 0
 993 01ca 90E0      		ldi r25,0
 994 01cc 80E0      		ldi r24,0
 995               	.L166:
 996 01ce 0E94 0000 		call host_system_send
 997               	.LVL105:
 998 01d2 00C0      		rjmp .L68
 999               	.L73:
 313:./tmk_core/common/action.c ****                 mousekey_send();
 1000               		.loc 1 313 0
 1001 01d4 8D2F      		mov r24,r29
 312:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1002               		.loc 1 312 0
 1003 01d6 1123      		tst r17
 1004 01d8 01F0      		breq .L105
 313:./tmk_core/common/action.c ****                 mousekey_send();
 1005               		.loc 1 313 0
 1006 01da 0E94 0000 		call mousekey_on
 1007               	.LVL106:
 1008               	.L167:
 317:./tmk_core/common/action.c ****             }
 1009               		.loc 1 317 0
 1010 01de 0E94 0000 		call mousekey_send
 1011               	.LVL107:
 1012 01e2 00C0      		rjmp .L68
 1013               	.L105:
 316:./tmk_core/common/action.c ****                 mousekey_send();
 1014               		.loc 1 316 0
 1015 01e4 0E94 0000 		call mousekey_off
 1016               	.LVL108:
 1017 01e8 00C0      		rjmp .L167
 1018               	.L74:
 323:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1019               		.loc 1 323 0
 1020 01ea 8C2F      		mov r24,r28
 1021 01ec 8370      		andi r24,lo8(3)
 1022 01ee 01F0      		breq .+2
 1023 01f0 00C0      		rjmp .L106
 325:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1024               		.loc 1 325 0
 1025 01f2 1111      		cpse r17,__zero_reg__
 1026 01f4 00C0      		rjmp .L68
 1027               	.LVL109:
 1028               	.LBB7:
 326:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1029               		.loc 1 326 0
 1030 01f6 2D2F      		mov r18,r29
 1031 01f8 2295      		swap r18
 1032 01fa 2695      		lsr r18
 1033 01fc 2770      		andi r18,lo8(7)
 1034 01fe 220F      		lsl r18
 1035 0200 220F      		lsl r18
 327:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1036               		.loc 1 327 0
 1037 0202 6D2F      		mov r22,r29
 1038 0204 6F70      		andi r22,lo8(15)
 1039 0206 862E      		mov r8,r22
 1040 0208 912C      		mov r9,__zero_reg__
 1041 020a B12C      		mov r11,__zero_reg__
 1042 020c A12C      		mov r10,__zero_reg__
 1043 020e 022E      		mov r0,r18
 1044 0210 00C0      		rjmp 2f
 1045               		1:
 1046 0212 880C      		lsl r8
 1047 0214 991C      		rol r9
 1048 0216 AA1C      		rol r10
 1049 0218 BB1C      		rol r11
 1050               		2:
 1051 021a 0A94      		dec r0
 1052 021c 02F4      		brpl 1b
 1053               	.LVL110:
 328:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1054               		.loc 1 328 0
 1055 021e 60E0      		ldi r22,0
 1056 0220 70E0      		ldi r23,0
 1057 0222 CB01      		movw r24,r22
 1058 0224 D4FF      		sbrs r29,4
 1059 0226 00C0      		rjmp .L107
 328:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1060               		.loc 1 328 0 is_stmt 0 discriminator 1
 1061 0228 6FE0      		ldi r22,lo8(15)
 1062 022a 70E0      		ldi r23,0
 1063 022c 80E0      		ldi r24,0
 1064 022e 90E0      		ldi r25,0
 1065 0230 00C0      		rjmp 2f
 1066               		1:
 1067 0232 660F      		lsl r22
 1068 0234 771F      		rol r23
 1069 0236 881F      		rol r24
 1070 0238 991F      		rol r25
 1071               		2:
 1072 023a 2A95      		dec r18
 1073 023c 02F4      		brpl 1b
 1074 023e 6095      		com r22
 1075 0240 7095      		com r23
 1076 0242 8095      		com r24
 1077 0244 9095      		com r25
 1078               	.L107:
 1079               	.LVL111:
 329:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1080               		.loc 1 329 0 is_stmt 1 discriminator 4
 1081 0246 C695      		lsr r28
 1082 0248 C695      		lsr r28
 1083               	.LVL112:
 1084 024a C370      		andi r28,lo8(3)
 1085 024c C230      		cpi r28,lo8(2)
 1086 024e 01F0      		breq .L109
 1087 0250 00F4      		brsh .L110
 1088 0252 6829      		or r22,r8
 1089               	.LVL113:
 1090 0254 7929      		or r23,r9
 1091 0256 8A29      		or r24,r10
 1092 0258 9B29      		or r25,r11
 1093 025a C130      		cpi r28,lo8(1)
 1094 025c 01F0      		breq .L177
 330:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1095               		.loc 1 330 0 discriminator 4
 1096 025e 0E94 0000 		call default_layer_and
 1097               	.LVL114:
 1098 0262 00C0      		rjmp .L68
 1099               	.LVL115:
 1100               	.L109:
 332:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1101               		.loc 1 332 0
 1102 0264 6829      		or r22,r8
 1103               	.LVL116:
 1104 0266 7929      		or r23,r9
 1105 0268 8A29      		or r24,r10
 1106 026a 9B29      		or r25,r11
 1107 026c 0E94 0000 		call default_layer_xor
 1108               	.LVL117:
 1109 0270 00C0      		rjmp .L68
 1110               	.LVL118:
 1111               	.L110:
 333:./tmk_core/common/action.c ****                     }
 1112               		.loc 1 333 0
 1113 0272 0E94 0000 		call default_layer_and
 1114               	.LVL119:
 1115 0276 C501      		movw r24,r10
 1116 0278 B401      		movw r22,r8
 1117               	.L177:
 1118 027a 0E94 0000 		call default_layer_or
 1119               	.LVL120:
 1120 027e 00C0      		rjmp .L68
 1121               	.LVL121:
 1122               	.L106:
 1123               	.LBE7:
 338:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1124               		.loc 1 338 0
 1125 0280 8695      		lsr r24
 1126 0282 1123      		tst r17
 1127 0284 01F0      		breq .L113
 338:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1128               		.loc 1 338 0 is_stmt 0 discriminator 1
 1129 0286 8C2F      		mov r24,r28
 1130 0288 8170      		andi r24,lo8(1)
 1131               	.L113:
 338:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1132               		.loc 1 338 0 discriminator 4
 1133 028a 8823      		tst r24
 1134 028c 01F4      		brne .+2
 1135 028e 00C0      		rjmp .L68
 1136               	.LVL122:
 1137               	.LBB8:
 340:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1138               		.loc 1 340 0 is_stmt 1
 1139 0290 2D2F      		mov r18,r29
 1140 0292 2295      		swap r18
 1141 0294 2695      		lsr r18
 1142 0296 2770      		andi r18,lo8(7)
 1143 0298 220F      		lsl r18
 1144 029a 220F      		lsl r18
 341:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1145               		.loc 1 341 0
 1146 029c 6D2F      		mov r22,r29
 1147 029e 6F70      		andi r22,lo8(15)
 1148 02a0 862E      		mov r8,r22
 1149 02a2 912C      		mov r9,__zero_reg__
 1150 02a4 B12C      		mov r11,__zero_reg__
 1151 02a6 A12C      		mov r10,__zero_reg__
 1152 02a8 022E      		mov r0,r18
 1153 02aa 00C0      		rjmp 2f
 1154               		1:
 1155 02ac 880C      		lsl r8
 1156 02ae 991C      		rol r9
 1157 02b0 AA1C      		rol r10
 1158 02b2 BB1C      		rol r11
 1159               		2:
 1160 02b4 0A94      		dec r0
 1161 02b6 02F4      		brpl 1b
 1162               	.LVL123:
 342:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1163               		.loc 1 342 0
 1164 02b8 60E0      		ldi r22,0
 1165 02ba 70E0      		ldi r23,0
 1166 02bc CB01      		movw r24,r22
 1167 02be D4FF      		sbrs r29,4
 1168 02c0 00C0      		rjmp .L114
 342:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1169               		.loc 1 342 0 is_stmt 0 discriminator 1
 1170 02c2 6FE0      		ldi r22,lo8(15)
 1171 02c4 70E0      		ldi r23,0
 1172 02c6 80E0      		ldi r24,0
 1173 02c8 90E0      		ldi r25,0
 1174 02ca 00C0      		rjmp 2f
 1175               		1:
 1176 02cc 660F      		lsl r22
 1177 02ce 771F      		rol r23
 1178 02d0 881F      		rol r24
 1179 02d2 991F      		rol r25
 1180               		2:
 1181 02d4 2A95      		dec r18
 1182 02d6 02F4      		brpl 1b
 1183 02d8 6095      		com r22
 1184 02da 7095      		com r23
 1185 02dc 8095      		com r24
 1186 02de 9095      		com r25
 1187               	.L114:
 1188               	.LVL124:
 343:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1189               		.loc 1 343 0 is_stmt 1 discriminator 4
 1190 02e0 C695      		lsr r28
 1191 02e2 C695      		lsr r28
 1192               	.LVL125:
 1193 02e4 C370      		andi r28,lo8(3)
 1194 02e6 C230      		cpi r28,lo8(2)
 1195 02e8 01F0      		breq .L116
 1196 02ea 00F4      		brsh .L117
 1197 02ec 6829      		or r22,r8
 1198               	.LVL126:
 1199 02ee 7929      		or r23,r9
 1200 02f0 8A29      		or r24,r10
 1201 02f2 9B29      		or r25,r11
 1202 02f4 C130      		cpi r28,lo8(1)
 1203 02f6 01F0      		breq .L178
 344:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1204               		.loc 1 344 0 discriminator 4
 1205 02f8 0E94 0000 		call layer_and
 1206               	.LVL127:
 1207 02fc 00C0      		rjmp .L68
 1208               	.LVL128:
 1209               	.L116:
 346:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1210               		.loc 1 346 0
 1211 02fe 6829      		or r22,r8
 1212               	.LVL129:
 1213 0300 7929      		or r23,r9
 1214 0302 8A29      		or r24,r10
 1215 0304 9B29      		or r25,r11
 1216 0306 0E94 0000 		call layer_xor
 1217               	.LVL130:
 1218 030a 00C0      		rjmp .L68
 1219               	.LVL131:
 1220               	.L117:
 347:./tmk_core/common/action.c ****                     }
 1221               		.loc 1 347 0
 1222 030c 0E94 0000 		call layer_and
 1223               	.LVL132:
 1224 0310 C501      		movw r24,r10
 1225 0312 B401      		movw r22,r8
 1226               	.L178:
 1227 0314 0E94 0000 		call layer_or
 1228               	.LVL133:
 1229 0318 00C0      		rjmp .L68
 1230               	.LVL134:
 1231               	.L75:
 1232               	.LBE8:
 355:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1233               		.loc 1 355 0
 1234 031a E0E2      		ldi r30,lo8(32)
 1235 031c ED0F      		add r30,r29
 1236 031e E531      		cpi r30,lo8(21)
 1237 0320 00F0      		brlo .+2
 1238 0322 00C0      		rjmp .L119
 1239 0324 F0E0      		ldi r31,0
 1240 0326 E050      		subi r30,lo8(-(gs(.L121)))
 1241 0328 F040      		sbci r31,hi8(-(gs(.L121)))
 1242 032a 0C94 0000 		jmp __tablejump2__
 1243               		.p2align	1
 1244               	.L121:
 1245 032e 0000      		.word gs(.L120)
 1246 0330 0000      		.word gs(.L120)
 1247 0332 0000      		.word gs(.L120)
 1248 0334 0000      		.word gs(.L120)
 1249 0336 0000      		.word gs(.L120)
 1250 0338 0000      		.word gs(.L120)
 1251 033a 0000      		.word gs(.L120)
 1252 033c 0000      		.word gs(.L120)
 1253 033e 0000      		.word gs(.L120)
 1254 0340 0000      		.word gs(.L120)
 1255 0342 0000      		.word gs(.L120)
 1256 0344 0000      		.word gs(.L120)
 1257 0346 0000      		.word gs(.L120)
 1258 0348 0000      		.word gs(.L120)
 1259 034a 0000      		.word gs(.L120)
 1260 034c 0000      		.word gs(.L120)
 1261 034e 0000      		.word gs(.L122)
 1262 0350 0000      		.word gs(.L123)
 1263 0352 0000      		.word gs(.L124)
 1264 0354 0000      		.word gs(.L125)
 1265 0356 0000      		.word gs(.L126)
 1266               	.L120:
 1267 0358 DF70      		andi r29,lo8(15)
 1268               	.LVL135:
 1269 035a 8C2F      		mov r24,r28
 1270 035c 8F71      		andi r24,lo8(31)
 358:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1271               		.loc 1 358 0
 1272 035e 1123      		tst r17
 1273 0360 01F0      		breq .L127
 359:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1274               		.loc 1 359 0
 1275 0362 0E94 0000 		call layer_on
 1276               	.LVL136:
 360:./tmk_core/common/action.c ****                     } else {
 1277               		.loc 1 360 0
 1278 0366 8D2F      		mov r24,r29
 1279 0368 00C0      		rjmp .L172
 1280               	.L127:
 362:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1281               		.loc 1 362 0
 1282 036a 0E94 0000 		call layer_off
 1283               	.LVL137:
 363:./tmk_core/common/action.c ****                     }
 1284               		.loc 1 363 0
 1285 036e 8D2F      		mov r24,r29
 1286 0370 00C0      		rjmp .L169
 1287               	.LVL138:
 1288               	.L122:
 368:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1289               		.loc 1 368 0
 1290 0372 1123      		tst r17
 1291 0374 01F0      		breq .L128
 369:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1292               		.loc 1 369 0
 1293 0376 0111      		cpse r16,__zero_reg__
 1294 0378 00C0      		rjmp .L68
 1295               	.L129:
 370:./tmk_core/common/action.c ****                         }
 1296               		.loc 1 370 0
 1297 037a 8C2F      		mov r24,r28
 1298 037c 8F71      		andi r24,lo8(31)
 1299 037e 0E94 0000 		call layer_invert
 1300               	.LVL139:
 1301 0382 00C0      		rjmp .L68
 1302               	.L128:
 373:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1303               		.loc 1 373 0
 1304 0384 0230      		cpi r16,lo8(2)
 1305 0386 00F0      		brlo .+2
 1306 0388 00C0      		rjmp .L68
 1307 038a 00C0      		rjmp .L129
 1308               	.L123:
 1309 038c 8C2F      		mov r24,r28
 1310 038e 8F71      		andi r24,lo8(31)
 379:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1311               		.loc 1 379 0
 1312 0390 1123      		tst r17
 1313 0392 01F0      		breq .L168
 1314               	.L170:
 436:./tmk_core/common/action.c ****                         }
 1315               		.loc 1 436 0
 1316 0394 0E94 0000 		call layer_on
 1317               	.LVL140:
 1318 0398 00C0      		rjmp .L68
 1319               	.L124:
 1320 039a 8C2F      		mov r24,r28
 1321 039c 8F71      		andi r24,lo8(31)
 383:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1322               		.loc 1 383 0
 1323 039e 1123      		tst r17
 1324 03a0 01F0      		breq .L170
 1325               	.L168:
 444:./tmk_core/common/action.c ****                         }
 1326               		.loc 1 444 0
 1327 03a2 0E94 0000 		call layer_off
 1328               	.LVL141:
 1329 03a6 00C0      		rjmp .L68
 1330               	.L125:
 387:./tmk_core/common/action.c ****                                     layer_clear();
 1331               		.loc 1 387 0
 1332 03a8 1123      		tst r17
 1333 03aa 01F0      		breq .L132
 387:./tmk_core/common/action.c ****                                     layer_clear();
 1334               		.loc 1 387 0 is_stmt 0 discriminator 1
 1335 03ac 8C2F      		mov r24,r28
 1336 03ae 8F71      		andi r24,lo8(31)
 1337 03b0 0E94 0000 		call layer_move
 1338               	.LVL142:
 1339 03b4 00C0      		rjmp .L68
 1340               	.L132:
 388:./tmk_core/common/action.c ****                     break;
 1341               		.loc 1 388 0 is_stmt 1
 1342 03b6 0E94 0000 		call layer_clear
 1343               	.LVL143:
 1344 03ba 00C0      		rjmp .L68
 1345               	.L126:
 416:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1346               		.loc 1 416 0
 1347 03bc 1123      		tst r17
 1348 03be 01F0      		breq .L133
 417:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1349               		.loc 1 417 0
 1350 03c0 CF71      		andi r28,lo8(31)
 1351               	.LVL144:
 1352 03c2 8C2F      		mov r24,r28
 1353 03c4 0E94 0000 		call layer_on
 1354               	.LVL145:
 418:./tmk_core/common/action.c ****                     } else {
 1355               		.loc 1 418 0
 1356 03c8 63E0      		ldi r22,lo8(3)
 1357 03ca 8C2F      		mov r24,r28
 1358 03cc 0E94 0000 		call set_oneshot_layer
 1359               	.LVL146:
 1360 03d0 00C0      		rjmp .L68
 1361               	.LVL147:
 1362               	.L133:
 420:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1363               		.loc 1 420 0
 1364 03d2 81E0      		ldi r24,lo8(1)
 1365 03d4 0E94 0000 		call clear_oneshot_layer_state
 1366               	.LVL148:
 421:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1367               		.loc 1 421 0
 1368 03d8 0230      		cpi r16,lo8(2)
 1369 03da 00F4      		brsh .+2
 1370 03dc 00C0      		rjmp .L68
 422:./tmk_core/common/action.c ****                         }
 1371               		.loc 1 422 0
 1372 03de 82E0      		ldi r24,lo8(2)
 1373 03e0 0E94 0000 		call clear_oneshot_layer_state
 1374               	.LVL149:
 1375 03e4 00C0      		rjmp .L68
 1376               	.L119:
 430:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1377               		.loc 1 430 0
 1378 03e6 1123      		tst r17
 1379 03e8 01F0      		breq .L134
 431:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1380               		.loc 1 431 0
 1381 03ea 0111      		cpse r16,__zero_reg__
 1382 03ec 00C0      		rjmp .L174
 436:./tmk_core/common/action.c ****                         }
 1383               		.loc 1 436 0
 1384 03ee 8C2F      		mov r24,r28
 1385 03f0 8F71      		andi r24,lo8(31)
 1386 03f2 00C0      		rjmp .L170
 1387               	.L134:
 439:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1388               		.loc 1 439 0
 1389 03f4 0111      		cpse r16,__zero_reg__
 1390 03f6 00C0      		rjmp .L173
 444:./tmk_core/common/action.c ****                         }
 1391               		.loc 1 444 0
 1392 03f8 8C2F      		mov r24,r28
 1393 03fa 8F71      		andi r24,lo8(31)
 1394 03fc 00C0      		rjmp .L168
 1395               	.L76:
 455:./tmk_core/common/action.c ****             break;
 1396               		.loc 1 455 0
 1397 03fe 4C2F      		mov r20,r28
 1398 0400 4F70      		andi r20,lo8(15)
 1399 0402 6D2F      		mov r22,r29
 1400 0404 C701      		movw r24,r14
 1401 0406 0E94 0000 		call action_get_macro
 1402               	.LVL150:
 1403 040a 0E94 0000 		call action_macro_play
 1404               	.LVL151:
 456:./tmk_core/common/action.c **** #endif
 1405               		.loc 1 456 0
 1406 040e 00C0      		rjmp .L68
 1407               	.L77:
 533:./tmk_core/common/action.c ****             break;
 1408               		.loc 1 533 0
 1409 0410 4C2F      		mov r20,r28
 1410 0412 4F70      		andi r20,lo8(15)
 1411 0414 6D2F      		mov r22,r29
 1412 0416 C701      		movw r24,r14
 1413 0418 0E94 0000 		call action_function
 1414               	.LVL152:
 534:./tmk_core/common/action.c **** #endif
 1415               		.loc 1 534 0
 1416 041c 00C0      		rjmp .L68
 1417               	.LVL153:
 1418               	.L65:
 1419               	/* epilogue start */
 551:./tmk_core/common/action.c **** 
 1420               		.loc 1 551 0
 1421 041e DF91      		pop r29
 1422               	.LVL154:
 1423 0420 CF91      		pop r28
 1424 0422 1F91      		pop r17
 1425               	.LVL155:
 1426 0424 0F91      		pop r16
 1427 0426 FF90      		pop r15
 1428 0428 EF90      		pop r14
 1429               	.LVL156:
 1430 042a DF90      		pop r13
 1431               	.LVL157:
 1432 042c BF90      		pop r11
 1433 042e AF90      		pop r10
 1434 0430 9F90      		pop r9
 1435 0432 8F90      		pop r8
 1436 0434 0895      		ret
 1437               		.cfi_endproc
 1438               	.LFE107:
 1440               		.section	.text.process_record,"ax",@progbits
 1441               	.global	process_record
 1443               	process_record:
 1444               	.LFB106:
 124:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1445               		.loc 1 124 0
 1446               		.cfi_startproc
 1447               	.LVL158:
 1448 0000 0F93      		push r16
 1449               	.LCFI16:
 1450               		.cfi_def_cfa_offset 3
 1451               		.cfi_offset 16, -2
 1452 0002 1F93      		push r17
 1453               	.LCFI17:
 1454               		.cfi_def_cfa_offset 4
 1455               		.cfi_offset 17, -3
 1456 0004 CF93      		push r28
 1457               	.LCFI18:
 1458               		.cfi_def_cfa_offset 5
 1459               		.cfi_offset 28, -4
 1460 0006 DF93      		push r29
 1461               	.LCFI19:
 1462               		.cfi_def_cfa_offset 6
 1463               		.cfi_offset 29, -5
 1464               	/* prologue: function */
 1465               	/* frame size = 0 */
 1466               	/* stack size = 4 */
 1467               	.L__stack_usage = 4
 1468 0008 EC01      		movw r28,r24
 1469 000a 9881      		ld r25,Y
 1470 000c 8981      		ldd r24,Y+1
 1471               	.LVL159:
 1472               	.LBB11:
 1473               	.LBB12:
 1474               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1475               		.loc 2 49 0
 1476 000e 2B81      		ldd r18,Y+3
 1477 0010 3C81      		ldd r19,Y+4
 1478 0012 232B      		or r18,r19
 1479 0014 01F0      		breq .L184
 1480 0016 8F3F      		cpi r24,lo8(-1)
 1481 0018 01F4      		brne .L185
 1482 001a 81E0      		ldi r24,lo8(1)
 1483 001c 9F3F      		cpi r25,lo8(-1)
 1484 001e 01F0      		breq .L181
 1485               	.L185:
 1486 0020 80E0      		ldi r24,0
 1487 0022 00C0      		rjmp .L181
 1488               	.L184:
 1489 0024 81E0      		ldi r24,lo8(1)
 1490               	.L181:
 1491               	.LBE12:
 1492               	.LBE11:
 125:./tmk_core/common/action.c **** 
 1493               		.loc 1 125 0
 1494 0026 80FD      		sbrc r24,0
 1495 0028 00C0      		rjmp .L180
 127:./tmk_core/common/action.c ****         return;
 1496               		.loc 1 127 0
 1497 002a CE01      		movw r24,r28
 1498 002c 0E94 0000 		call process_record_quantum
 1499               	.LVL160:
 1500 0030 8823      		tst r24
 1501 0032 01F0      		breq .L180
 130:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1502               		.loc 1 130 0
 1503 0034 6881      		ld r22,Y
 1504 0036 7981      		ldd r23,Y+1
 1505 0038 8A81      		ldd r24,Y+2
 1506 003a 0E94 0000 		call store_or_get_action
 1507               	.LVL161:
 1508 003e 8C01      		movw r16,r24
 1509               	.LVL162:
 133:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1510               		.loc 1 133 0
 1511 0040 0E94 0000 		call layer_debug
 1512               	.LVL163:
 134:./tmk_core/common/action.c **** #endif
 1513               		.loc 1 134 0
 1514 0044 0E94 0000 		call default_layer_debug
 1515               	.LVL164:
 138:./tmk_core/common/action.c **** }
 1516               		.loc 1 138 0
 1517 0048 B801      		movw r22,r16
 1518 004a CE01      		movw r24,r28
 1519               	/* epilogue start */
 139:./tmk_core/common/action.c **** 
 1520               		.loc 1 139 0
 1521 004c DF91      		pop r29
 1522 004e CF91      		pop r28
 1523               	.LVL165:
 1524 0050 1F91      		pop r17
 1525 0052 0F91      		pop r16
 1526               	.LVL166:
 138:./tmk_core/common/action.c **** }
 1527               		.loc 1 138 0
 1528 0054 0C94 0000 		jmp process_action
 1529               	.LVL167:
 1530               	.L180:
 1531               	/* epilogue start */
 139:./tmk_core/common/action.c **** 
 1532               		.loc 1 139 0
 1533 0058 DF91      		pop r29
 1534 005a CF91      		pop r28
 1535               	.LVL168:
 1536 005c 1F91      		pop r17
 1537 005e 0F91      		pop r16
 1538 0060 0895      		ret
 1539               		.cfi_endproc
 1540               	.LFE106:
 1542               		.section	.text.process_record_nocache,"ax",@progbits
 1543               	.global	process_record_nocache
 1545               	process_record_nocache:
 1546               	.LFB104:
 113:./tmk_core/common/action.c ****     process_record(record);
 1547               		.loc 1 113 0
 1548               		.cfi_startproc
 1549               	.LVL169:
 1550               	/* prologue: function */
 1551               	/* frame size = 0 */
 1552               	/* stack size = 0 */
 1553               	.L__stack_usage = 0
 114:./tmk_core/common/action.c **** }
 1554               		.loc 1 114 0
 1555 0000 0C94 0000 		jmp process_record
 1556               	.LVL170:
 1557               		.cfi_endproc
 1558               	.LFE104:
 1560               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1561               	.global	clear_keyboard_but_mods
 1563               	clear_keyboard_but_mods:
 1564               	.LFB113:
 704:./tmk_core/common/action.c **** 
 705:./tmk_core/common/action.c **** void clear_keyboard(void)
 706:./tmk_core/common/action.c **** {
 707:./tmk_core/common/action.c ****     clear_mods();
 708:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 709:./tmk_core/common/action.c **** }
 710:./tmk_core/common/action.c **** 
 711:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 712:./tmk_core/common/action.c **** {
 1565               		.loc 1 712 0
 1566               		.cfi_startproc
 1567               	/* prologue: function */
 1568               	/* frame size = 0 */
 1569               	/* stack size = 0 */
 1570               	.L__stack_usage = 0
 713:./tmk_core/common/action.c ****     clear_weak_mods();
 1571               		.loc 1 713 0
 1572 0000 0E94 0000 		call clear_weak_mods
 1573               	.LVL171:
 714:./tmk_core/common/action.c ****     clear_macro_mods();
 1574               		.loc 1 714 0
 1575 0004 0E94 0000 		call clear_macro_mods
 1576               	.LVL172:
 715:./tmk_core/common/action.c ****     clear_keys();
 1577               		.loc 1 715 0
 1578 0008 0E94 0000 		call clear_keys
 1579               	.LVL173:
 716:./tmk_core/common/action.c ****     send_keyboard_report();
 1580               		.loc 1 716 0
 1581 000c 0E94 0000 		call send_keyboard_report
 1582               	.LVL174:
 717:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 718:./tmk_core/common/action.c ****     mousekey_clear();
 1583               		.loc 1 718 0
 1584 0010 0E94 0000 		call mousekey_clear
 1585               	.LVL175:
 719:./tmk_core/common/action.c ****     mousekey_send();
 1586               		.loc 1 719 0
 1587 0014 0E94 0000 		call mousekey_send
 1588               	.LVL176:
 720:./tmk_core/common/action.c **** #endif
 721:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 722:./tmk_core/common/action.c ****     host_system_send(0);
 1589               		.loc 1 722 0
 1590 0018 90E0      		ldi r25,0
 1591 001a 80E0      		ldi r24,0
 1592 001c 0E94 0000 		call host_system_send
 1593               	.LVL177:
 723:./tmk_core/common/action.c ****     host_consumer_send(0);
 1594               		.loc 1 723 0
 1595 0020 90E0      		ldi r25,0
 1596 0022 80E0      		ldi r24,0
 1597 0024 0C94 0000 		jmp host_consumer_send
 1598               	.LVL178:
 1599               		.cfi_endproc
 1600               	.LFE113:
 1602               		.section	.text.clear_keyboard,"ax",@progbits
 1603               	.global	clear_keyboard
 1605               	clear_keyboard:
 1606               	.LFB112:
 706:./tmk_core/common/action.c ****     clear_mods();
 1607               		.loc 1 706 0
 1608               		.cfi_startproc
 1609               	/* prologue: function */
 1610               	/* frame size = 0 */
 1611               	/* stack size = 0 */
 1612               	.L__stack_usage = 0
 707:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1613               		.loc 1 707 0
 1614 0000 0E94 0000 		call clear_mods
 1615               	.LVL179:
 708:./tmk_core/common/action.c **** }
 1616               		.loc 1 708 0
 1617 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1618               	.LVL180:
 1619               		.cfi_endproc
 1620               	.LFE112:
 1622               		.section	.text.is_tap_key,"ax",@progbits
 1623               	.global	is_tap_key
 1625               	is_tap_key:
 1626               	.LFB114:
 724:./tmk_core/common/action.c **** #endif
 725:./tmk_core/common/action.c **** }
 726:./tmk_core/common/action.c **** 
 727:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 728:./tmk_core/common/action.c **** {
 1627               		.loc 1 728 0
 1628               		.cfi_startproc
 1629               	.LVL181:
 1630               	/* prologue: function */
 1631               	/* frame size = 0 */
 1632               	/* stack size = 0 */
 1633               	.L__stack_usage = 0
 729:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1634               		.loc 1 729 0
 1635 0000 0E94 0000 		call layer_switch_get_action
 1636               	.LVL182:
 730:./tmk_core/common/action.c **** 
 731:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1637               		.loc 1 731 0
 1638 0004 E92F      		mov r30,r25
 1639 0006 E295      		swap r30
 1640 0008 EF70      		andi r30,lo8(15)
 1641 000a E250      		subi r30,lo8(-(-2))
 1642 000c EE30      		cpi r30,lo8(14)
 1643 000e 00F4      		brsh .L204
 1644 0010 F0E0      		ldi r31,0
 1645 0012 E050      		subi r30,lo8(-(gs(.L198)))
 1646 0014 F040      		sbci r31,hi8(-(gs(.L198)))
 1647 0016 0C94 0000 		jmp __tablejump2__
 1648               		.p2align	1
 1649               	.L198:
 1650 001a 0000      		.word gs(.L197)
 1651 001c 0000      		.word gs(.L197)
 1652 001e 0000      		.word gs(.L204)
 1653 0020 0000      		.word gs(.L204)
 1654 0022 0000      		.word gs(.L199)
 1655 0024 0000      		.word gs(.L204)
 1656 0026 0000      		.word gs(.L204)
 1657 0028 0000      		.word gs(.L204)
 1658 002a 0000      		.word gs(.L197)
 1659 002c 0000      		.word gs(.L197)
 1660 002e 0000      		.word gs(.L200)
 1661 0030 0000      		.word gs(.L204)
 1662 0032 0000      		.word gs(.L204)
 1663 0034 0000      		.word gs(.L200)
 1664               	.L197:
 732:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 733:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 734:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 735:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 736:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1665               		.loc 1 736 0
 1666 0036 803F      		cpi r24,lo8(-16)
 1667 0038 01F0      		breq .L206
 1668 003a 00F4      		brsh .L202
 1669 003c 803E      		cpi r24,lo8(-32)
 1670 003e 00F4      		brsh .L204
 1671               	.L206:
 737:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 738:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 739:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 740:./tmk_core/common/action.c ****                     return true;
 1672               		.loc 1 740 0
 1673 0040 81E0      		ldi r24,lo8(1)
 1674               	.LVL183:
 1675               	/* epilogue start */
 741:./tmk_core/common/action.c ****             }
 742:./tmk_core/common/action.c ****             return false;
 743:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 744:./tmk_core/common/action.c ****             switch (action.swap.code) {
 745:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 746:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 747:./tmk_core/common/action.c ****                     return true;
 748:./tmk_core/common/action.c ****             }
 749:./tmk_core/common/action.c ****             return false;
 750:./tmk_core/common/action.c ****         case ACT_MACRO:
 751:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 752:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 753:./tmk_core/common/action.c ****             return false;
 754:./tmk_core/common/action.c ****     }
 755:./tmk_core/common/action.c ****     return false;
 756:./tmk_core/common/action.c **** }
 1676               		.loc 1 756 0
 1677 0042 0895      		ret
 1678               	.LVL184:
 1679               	.L202:
 736:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1680               		.loc 1 736 0
 1681 0044 843F      		cpi r24,lo8(-12)
 1682 0046 01F0      		breq .L206
 1683               	.L204:
 742:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1684               		.loc 1 742 0
 1685 0048 80E0      		ldi r24,0
 1686               	.LVL185:
 1687 004a 0895      		ret
 1688               	.LVL186:
 1689               	.L199:
 744:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1690               		.loc 1 744 0
 1691 004c 803E      		cpi r24,lo8(-32)
 1692 004e 00F0      		brlo .L206
 1693 0050 813F      		cpi r24,lo8(-15)
 1694 0052 01F4      		brne .L204
 1695 0054 00C0      		rjmp .L206
 1696               	.L200:
 752:./tmk_core/common/action.c ****             return false;
 1697               		.loc 1 752 0
 1698 0056 93FB      		bst r25,3
 1699 0058 8827      		clr r24
 1700 005a 80F9      		bld r24,0
 1701               	.LVL187:
 1702 005c 0895      		ret
 1703               		.cfi_endproc
 1704               	.LFE114:
 1706               		.section	.text.debug_event,"ax",@progbits
 1707               	.global	debug_event
 1709               	debug_event:
 1710               	.LFB115:
 757:./tmk_core/common/action.c **** 
 758:./tmk_core/common/action.c **** 
 759:./tmk_core/common/action.c **** /*
 760:./tmk_core/common/action.c ****  * debug print
 761:./tmk_core/common/action.c ****  */
 762:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 763:./tmk_core/common/action.c **** {
 1711               		.loc 1 763 0
 1712               		.cfi_startproc
 1713 0000 CF93      		push r28
 1714               	.LCFI20:
 1715               		.cfi_def_cfa_offset 3
 1716               		.cfi_offset 28, -2
 1717 0002 DF93      		push r29
 1718               	.LCFI21:
 1719               		.cfi_def_cfa_offset 4
 1720               		.cfi_offset 29, -3
 1721 0004 00D0      		rcall .
 1722 0006 00D0      		rcall .
 1723 0008 1F92      		push __zero_reg__
 1724               	.LCFI22:
 1725               		.cfi_def_cfa_offset 9
 1726 000a CDB7      		in r28,__SP_L__
 1727 000c DEB7      		in r29,__SP_H__
 1728               	.LCFI23:
 1729               		.cfi_def_cfa_register 28
 1730               	/* prologue: function */
 1731               	/* frame size = 5 */
 1732               	/* stack size = 7 */
 1733               	.L__stack_usage = 7
 1734               	/* epilogue start */
 764:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 765:./tmk_core/common/action.c **** }
 1735               		.loc 1 765 0
 1736 000e 0F90      		pop __tmp_reg__
 1737 0010 0F90      		pop __tmp_reg__
 1738 0012 0F90      		pop __tmp_reg__
 1739 0014 0F90      		pop __tmp_reg__
 1740 0016 0F90      		pop __tmp_reg__
 1741 0018 DF91      		pop r29
 1742 001a CF91      		pop r28
 1743 001c 0895      		ret
 1744               		.cfi_endproc
 1745               	.LFE115:
 1747               		.section	.text.debug_record,"ax",@progbits
 1748               	.global	debug_record
 1750               	debug_record:
 1751               	.LFB116:
 766:./tmk_core/common/action.c **** 
 767:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 768:./tmk_core/common/action.c **** {
 1752               		.loc 1 768 0
 1753               		.cfi_startproc
 1754 0000 CF93      		push r28
 1755               	.LCFI24:
 1756               		.cfi_def_cfa_offset 3
 1757               		.cfi_offset 28, -2
 1758 0002 DF93      		push r29
 1759               	.LCFI25:
 1760               		.cfi_def_cfa_offset 4
 1761               		.cfi_offset 29, -3
 1762 0004 00D0      		rcall .
 1763 0006 00D0      		rcall .
 1764 0008 00D0      		rcall .
 1765               	.LCFI26:
 1766               		.cfi_def_cfa_offset 10
 1767 000a CDB7      		in r28,__SP_L__
 1768 000c DEB7      		in r29,__SP_H__
 1769               	.LCFI27:
 1770               		.cfi_def_cfa_register 28
 1771               	/* prologue: function */
 1772               	/* frame size = 6 */
 1773               	/* stack size = 8 */
 1774               	.L__stack_usage = 8
 1775               	/* epilogue start */
 769:./tmk_core/common/action.c ****     debug_event(record.event);
 770:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 771:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 772:./tmk_core/common/action.c **** #endif
 773:./tmk_core/common/action.c **** }
 1776               		.loc 1 773 0
 1777 000e 2696      		adiw r28,6
 1778 0010 0FB6      		in __tmp_reg__,__SREG__
 1779 0012 F894      		cli
 1780 0014 DEBF      		out __SP_H__,r29
 1781 0016 0FBE      		out __SREG__,__tmp_reg__
 1782 0018 CDBF      		out __SP_L__,r28
 1783 001a DF91      		pop r29
 1784 001c CF91      		pop r28
 1785 001e 0895      		ret
 1786               		.cfi_endproc
 1787               	.LFE116:
 1789               		.section	.text.debug_action,"ax",@progbits
 1790               	.global	debug_action
 1792               	debug_action:
 1793               	.LFB117:
 774:./tmk_core/common/action.c **** 
 775:./tmk_core/common/action.c **** void debug_action(action_t action)
 776:./tmk_core/common/action.c **** {
 1794               		.loc 1 776 0
 1795               		.cfi_startproc
 1796               	.LVL188:
 1797               	/* prologue: function */
 1798               	/* frame size = 0 */
 1799               	/* stack size = 0 */
 1800               	.L__stack_usage = 0
 1801               	/* epilogue start */
 777:./tmk_core/common/action.c ****     switch (action.kind.id) {
 778:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 779:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 780:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 781:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 782:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 783:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 784:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 785:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 786:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 787:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 788:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 789:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 790:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 791:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 792:./tmk_core/common/action.c ****     }
 793:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 794:./tmk_core/common/action.c **** }
 1802               		.loc 1 794 0
 1803 0000 0895      		ret
 1804               		.cfi_endproc
 1805               	.LFE117:
 1807               		.text
 1808               	.Letext0:
 1809               		.file 3 "/usr/avr/include/stdint.h"
 1810               		.file 4 "./tmk_core/common/keycode.h"
 1811               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1812               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1813               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1814               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1815               		.file 9 "/usr/avr/include/stdio.h"
 1816               		.file 10 "./tmk_core/common/report.h"
 1817               		.file 11 "./tmk_core/common/host.h"
 1818               		.file 12 "./tmk_core/common/mousekey.h"
 1819               		.file 13 "./tmk_core/common/command.h"
 1820               		.file 14 "./tmk_core/common/action_code.h"
 1821               		.file 15 "./tmk_core/common/action.h"
 1822               		.file 16 "./tmk_core/common/action_layer.h"
 1823               		.file 17 "./tmk_core/common/action_util.h"
 1824               		.file 18 "./tmk_core/common/debug.h"
 1825               		.file 19 "./tmk_core/common/action_macro.h"
 1826               		.file 20 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccvn8b9g.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvn8b9g.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvn8b9g.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvn8b9g.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvn8b9g.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvn8b9g.s:13     .text.action_exec:0000000000000000 action_exec
     /tmp/ccvn8b9g.s:89     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccvn8b9g.s:109    .text.register_code:0000000000000000 register_code
     /tmp/ccvn8b9g.s:400    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccvn8b9g.s:538    .text.register_mods:0000000000000000 register_mods
     /tmp/ccvn8b9g.s:566    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccvn8b9g.s:594    .text.process_action:0000000000000000 process_action
     /tmp/ccvn8b9g.s:1443   .text.process_record:0000000000000000 process_record
     /tmp/ccvn8b9g.s:1545   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/ccvn8b9g.s:1563   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccvn8b9g.s:1605   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccvn8b9g.s:1625   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccvn8b9g.s:1709   .text.debug_event:0000000000000000 debug_event
     /tmp/ccvn8b9g.s:1750   .text.debug_record:0000000000000000 debug_record
     /tmp/ccvn8b9g.s:1792   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
