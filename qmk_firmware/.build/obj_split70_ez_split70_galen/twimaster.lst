   1               		.file	"twimaster.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_init,"ax",@progbits
  11               	.global	i2c_init
  13               	i2c_init:
  14               	.LFB0:
  15               		.file 1 "keyboards/split70/ez/twimaster.c"
   1:keyboards/split70/ez/twimaster.c **** /*************************************************************************
   2:keyboards/split70/ez/twimaster.c **** * Title:    I2C master library using hardware TWI interface
   3:keyboards/split70/ez/twimaster.c **** * Author:   Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury
   4:keyboards/split70/ez/twimaster.c **** * File:     $Id: twimaster.c,v 1.3 2005/07/02 11:14:21 Peter Exp $
   5:keyboards/split70/ez/twimaster.c **** * Software: AVR-GCC 3.4.3 / avr-libc 1.2.3
   6:keyboards/split70/ez/twimaster.c **** * Target:   any AVR device with hardware TWI 
   7:keyboards/split70/ez/twimaster.c **** * Usage:    API compatible with I2C Software Library i2cmaster.h
   8:keyboards/split70/ez/twimaster.c **** **************************************************************************/
   9:keyboards/split70/ez/twimaster.c **** #include <inttypes.h>
  10:keyboards/split70/ez/twimaster.c **** #include <compat/twi.h>
  11:keyboards/split70/ez/twimaster.c **** 
  12:keyboards/split70/ez/twimaster.c **** #include <i2cmaster.h>
  13:keyboards/split70/ez/twimaster.c **** 
  14:keyboards/split70/ez/twimaster.c **** 
  15:keyboards/split70/ez/twimaster.c **** /* define CPU frequency in Mhz here if not defined in Makefile */
  16:keyboards/split70/ez/twimaster.c **** #ifndef F_CPU
  17:keyboards/split70/ez/twimaster.c **** #define F_CPU 16000000UL
  18:keyboards/split70/ez/twimaster.c **** #endif
  19:keyboards/split70/ez/twimaster.c **** 
  20:keyboards/split70/ez/twimaster.c **** /* I2C clock in Hz */
  21:keyboards/split70/ez/twimaster.c **** #define SCL_CLOCK  400000L
  22:keyboards/split70/ez/twimaster.c **** 
  23:keyboards/split70/ez/twimaster.c **** 
  24:keyboards/split70/ez/twimaster.c **** /*************************************************************************
  25:keyboards/split70/ez/twimaster.c ****  Initialization of the I2C bus interface. Need to be called only once
  26:keyboards/split70/ez/twimaster.c **** *************************************************************************/
  27:keyboards/split70/ez/twimaster.c **** void i2c_init(void)
  28:keyboards/split70/ez/twimaster.c **** {
  16               		.loc 1 28 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  29:keyboards/split70/ez/twimaster.c ****   /* initialize TWI clock
  30:keyboards/split70/ez/twimaster.c ****    * minimal values in Bit Rate Register (TWBR) and minimal Prescaler
  31:keyboards/split70/ez/twimaster.c ****    * bits in the TWI Status Register should give us maximal possible
  32:keyboards/split70/ez/twimaster.c ****    * I2C bus speed - about 444 kHz
  33:keyboards/split70/ez/twimaster.c ****    *
  34:keyboards/split70/ez/twimaster.c ****    * for more details, see 20.5.2 in ATmega16/32 secification
  35:keyboards/split70/ez/twimaster.c ****    */
  36:keyboards/split70/ez/twimaster.c ****   
  37:keyboards/split70/ez/twimaster.c ****   TWSR = 0;     /* no prescaler */
  22               		.loc 1 37 0
  23 0000 1092 B900 		sts 185,__zero_reg__
  38:keyboards/split70/ez/twimaster.c ****   TWBR = 10;    /* must be >= 10 for stable operation */
  24               		.loc 1 38 0
  25 0004 8AE0      		ldi r24,lo8(10)
  26 0006 8093 B800 		sts 184,r24
  27               	/* epilogue start */
  39:keyboards/split70/ez/twimaster.c **** 
  40:keyboards/split70/ez/twimaster.c **** }/* i2c_init */
  28               		.loc 1 40 0
  29 000a 0895      		ret
  30               		.cfi_endproc
  31               	.LFE0:
  33               		.section	.text.i2c_start,"ax",@progbits
  34               	.global	i2c_start
  36               	i2c_start:
  37               	.LFB1:
  41:keyboards/split70/ez/twimaster.c **** 
  42:keyboards/split70/ez/twimaster.c **** 
  43:keyboards/split70/ez/twimaster.c **** /*************************************************************************	
  44:keyboards/split70/ez/twimaster.c ****   Issues a start condition and sends address and transfer direction.
  45:keyboards/split70/ez/twimaster.c ****   return 0 = device accessible, 1= failed to access device
  46:keyboards/split70/ez/twimaster.c **** *************************************************************************/
  47:keyboards/split70/ez/twimaster.c **** unsigned char i2c_start(unsigned char address)
  48:keyboards/split70/ez/twimaster.c **** {
  38               		.loc 1 48 0
  39               		.cfi_startproc
  40               	.LVL0:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  49:keyboards/split70/ez/twimaster.c ****     uint8_t   twst;
  50:keyboards/split70/ez/twimaster.c **** 
  51:keyboards/split70/ez/twimaster.c **** 	// send START condition
  52:keyboards/split70/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  45               		.loc 1 52 0
  46 0000 94EA      		ldi r25,lo8(-92)
  47 0002 9093 BC00 		sts 188,r25
  48               	.L3:
  53:keyboards/split70/ez/twimaster.c **** 
  54:keyboards/split70/ez/twimaster.c **** 	// wait until transmission completed
  55:keyboards/split70/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
  49               		.loc 1 55 0 discriminator 1
  50 0006 9091 BC00 		lds r25,188
  51 000a 97FF      		sbrs r25,7
  52 000c 00C0      		rjmp .L3
  56:keyboards/split70/ez/twimaster.c **** 
  57:keyboards/split70/ez/twimaster.c **** 	// check value of TWI Status Register. Mask prescaler bits.
  58:keyboards/split70/ez/twimaster.c **** 	twst = TW_STATUS & 0xF8;
  53               		.loc 1 58 0
  54 000e 9091 B900 		lds r25,185
  55 0012 987F      		andi r25,lo8(-8)
  56               	.LVL1:
  59:keyboards/split70/ez/twimaster.c **** 	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  57               		.loc 1 59 0
  58 0014 9830      		cpi r25,lo8(8)
  59 0016 01F0      		breq .L4
  60               		.loc 1 59 0 is_stmt 0 discriminator 1
  61 0018 9031      		cpi r25,lo8(16)
  62 001a 01F0      		breq .L4
  63               	.LVL2:
  64               	.L7:
  65               		.loc 1 59 0
  66 001c 81E0      		ldi r24,lo8(1)
  67 001e 0895      		ret
  68               	.LVL3:
  69               	.L4:
  60:keyboards/split70/ez/twimaster.c **** 
  61:keyboards/split70/ez/twimaster.c **** 	// send device address
  62:keyboards/split70/ez/twimaster.c **** 	TWDR = address;
  70               		.loc 1 62 0 is_stmt 1
  71 0020 8093 BB00 		sts 187,r24
  63:keyboards/split70/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN);
  72               		.loc 1 63 0
  73 0024 84E8      		ldi r24,lo8(-124)
  74               	.LVL4:
  75 0026 8093 BC00 		sts 188,r24
  76               	.LVL5:
  77               	.L6:
  64:keyboards/split70/ez/twimaster.c **** 
  65:keyboards/split70/ez/twimaster.c **** 	// wail until transmission completed and ACK/NACK has been received
  66:keyboards/split70/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
  78               		.loc 1 66 0 discriminator 1
  79 002a 8091 BC00 		lds r24,188
  80 002e 87FF      		sbrs r24,7
  81 0030 00C0      		rjmp .L6
  67:keyboards/split70/ez/twimaster.c **** 
  68:keyboards/split70/ez/twimaster.c **** 	// check value of TWI Status Register. Mask prescaler bits.
  69:keyboards/split70/ez/twimaster.c **** 	twst = TW_STATUS & 0xF8;
  82               		.loc 1 69 0
  83 0032 8091 B900 		lds r24,185
  84 0036 887F      		andi r24,lo8(-8)
  85               	.LVL6:
  70:keyboards/split70/ez/twimaster.c **** 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  86               		.loc 1 70 0
  87 0038 8831      		cpi r24,lo8(24)
  88 003a 01F0      		breq .L8
  89               		.loc 1 70 0 is_stmt 0 discriminator 1
  90 003c 8034      		cpi r24,lo8(64)
  91 003e 01F4      		brne .L7
  92               	.L8:
  71:keyboards/split70/ez/twimaster.c **** 
  72:keyboards/split70/ez/twimaster.c **** 	return 0;
  93               		.loc 1 72 0 is_stmt 1
  94 0040 80E0      		ldi r24,0
  95               	.LVL7:
  96               	/* epilogue start */
  73:keyboards/split70/ez/twimaster.c **** 
  74:keyboards/split70/ez/twimaster.c **** }/* i2c_start */
  97               		.loc 1 74 0
  98 0042 0895      		ret
  99               		.cfi_endproc
 100               	.LFE1:
 102               		.section	.text.i2c_start_wait,"ax",@progbits
 103               	.global	i2c_start_wait
 105               	i2c_start_wait:
 106               	.LFB2:
  75:keyboards/split70/ez/twimaster.c **** 
  76:keyboards/split70/ez/twimaster.c **** 
  77:keyboards/split70/ez/twimaster.c **** /*************************************************************************
  78:keyboards/split70/ez/twimaster.c ****  Issues a start condition and sends address and transfer direction.
  79:keyboards/split70/ez/twimaster.c ****  If device is busy, use ack polling to wait until device is ready
  80:keyboards/split70/ez/twimaster.c ****  
  81:keyboards/split70/ez/twimaster.c ****  Input:   address and transfer direction of I2C device
  82:keyboards/split70/ez/twimaster.c **** *************************************************************************/
  83:keyboards/split70/ez/twimaster.c **** void i2c_start_wait(unsigned char address)
  84:keyboards/split70/ez/twimaster.c **** {
 107               		.loc 1 84 0
 108               		.cfi_startproc
 109               	.LVL8:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  85:keyboards/split70/ez/twimaster.c ****     uint8_t   twst;
  86:keyboards/split70/ez/twimaster.c **** 
  87:keyboards/split70/ez/twimaster.c **** 
  88:keyboards/split70/ez/twimaster.c ****     while ( 1 )
  89:keyboards/split70/ez/twimaster.c ****     {
  90:keyboards/split70/ez/twimaster.c **** 	    // send START condition
  91:keyboards/split70/ez/twimaster.c **** 	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 114               		.loc 1 91 0
 115 0000 24EA      		ldi r18,lo8(-92)
  92:keyboards/split70/ez/twimaster.c ****     
  93:keyboards/split70/ez/twimaster.c ****     	// wait until transmission completed
  94:keyboards/split70/ez/twimaster.c ****     	while(!(TWCR & (1<<TWINT)));
  95:keyboards/split70/ez/twimaster.c ****     
  96:keyboards/split70/ez/twimaster.c ****     	// check value of TWI Status Register. Mask prescaler bits.
  97:keyboards/split70/ez/twimaster.c ****     	twst = TW_STATUS & 0xF8;
  98:keyboards/split70/ez/twimaster.c ****     	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
  99:keyboards/split70/ez/twimaster.c ****     
 100:keyboards/split70/ez/twimaster.c ****     	// send device address
 101:keyboards/split70/ez/twimaster.c ****     	TWDR = address;
 102:keyboards/split70/ez/twimaster.c ****     	TWCR = (1<<TWINT) | (1<<TWEN);
 116               		.loc 1 102 0
 117 0002 34E8      		ldi r19,lo8(-124)
 103:keyboards/split70/ez/twimaster.c ****     
 104:keyboards/split70/ez/twimaster.c ****     	// wail until transmission completed
 105:keyboards/split70/ez/twimaster.c ****     	while(!(TWCR & (1<<TWINT)));
 106:keyboards/split70/ez/twimaster.c ****     
 107:keyboards/split70/ez/twimaster.c ****     	// check value of TWI Status Register. Mask prescaler bits.
 108:keyboards/split70/ez/twimaster.c ****     	twst = TW_STATUS & 0xF8;
 109:keyboards/split70/ez/twimaster.c ****     	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 110:keyboards/split70/ez/twimaster.c ****     	{    	    
 111:keyboards/split70/ez/twimaster.c ****     	    /* device busy, send stop condition to terminate write operation */
 112:keyboards/split70/ez/twimaster.c **** 	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 118               		.loc 1 112 0
 119 0004 44E9      		ldi r20,lo8(-108)
 120               	.L18:
  91:keyboards/split70/ez/twimaster.c ****     
 121               		.loc 1 91 0
 122 0006 2093 BC00 		sts 188,r18
 123               	.L19:
  94:keyboards/split70/ez/twimaster.c ****     
 124               		.loc 1 94 0 discriminator 1
 125 000a 9091 BC00 		lds r25,188
 126 000e 97FF      		sbrs r25,7
 127 0010 00C0      		rjmp .L19
  97:keyboards/split70/ez/twimaster.c ****     	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 128               		.loc 1 97 0
 129 0012 9091 B900 		lds r25,185
 130 0016 987F      		andi r25,lo8(-8)
 131               	.LVL9:
  98:keyboards/split70/ez/twimaster.c ****     
 132               		.loc 1 98 0
 133 0018 9830      		cpi r25,lo8(8)
 134 001a 01F0      		breq .L20
  98:keyboards/split70/ez/twimaster.c ****     
 135               		.loc 1 98 0 is_stmt 0 discriminator 1
 136 001c 9031      		cpi r25,lo8(16)
 137 001e 01F4      		brne .L18
 138               	.L20:
 101:keyboards/split70/ez/twimaster.c ****     	TWCR = (1<<TWINT) | (1<<TWEN);
 139               		.loc 1 101 0 is_stmt 1
 140 0020 8093 BB00 		sts 187,r24
 102:keyboards/split70/ez/twimaster.c ****     
 141               		.loc 1 102 0
 142 0024 3093 BC00 		sts 188,r19
 143               	.LVL10:
 144               	.L22:
 105:keyboards/split70/ez/twimaster.c ****     
 145               		.loc 1 105 0 discriminator 1
 146 0028 9091 BC00 		lds r25,188
 147 002c 97FF      		sbrs r25,7
 148 002e 00C0      		rjmp .L22
 108:keyboards/split70/ez/twimaster.c ****     	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 149               		.loc 1 108 0
 150 0030 9091 B900 		lds r25,185
 151 0034 987F      		andi r25,lo8(-8)
 152               	.LVL11:
 109:keyboards/split70/ez/twimaster.c ****     	{    	    
 153               		.loc 1 109 0
 154 0036 9032      		cpi r25,lo8(32)
 155 0038 01F0      		breq .L23
 109:keyboards/split70/ez/twimaster.c ****     	{    	    
 156               		.loc 1 109 0 is_stmt 0 discriminator 1
 157 003a 9835      		cpi r25,lo8(88)
 158 003c 01F4      		brne .L17
 159               	.L23:
 160               		.loc 1 112 0 is_stmt 1
 161 003e 4093 BC00 		sts 188,r20
 162               	.LVL12:
 163               	.L25:
 113:keyboards/split70/ez/twimaster.c **** 	        
 114:keyboards/split70/ez/twimaster.c **** 	        // wait until stop condition is executed and bus released
 115:keyboards/split70/ez/twimaster.c **** 	        while(TWCR & (1<<TWSTO));
 164               		.loc 1 115 0 discriminator 1
 165 0042 9091 BC00 		lds r25,188
 166 0046 94FD      		sbrc r25,4
 167 0048 00C0      		rjmp .L25
 168 004a 00C0      		rjmp .L18
 169               	.LVL13:
 170               	.L17:
 171               	/* epilogue start */
 116:keyboards/split70/ez/twimaster.c **** 	        
 117:keyboards/split70/ez/twimaster.c ****     	    continue;
 118:keyboards/split70/ez/twimaster.c ****     	}
 119:keyboards/split70/ez/twimaster.c ****     	//if( twst != TW_MT_SLA_ACK) return 1;
 120:keyboards/split70/ez/twimaster.c ****     	break;
 121:keyboards/split70/ez/twimaster.c ****      }
 122:keyboards/split70/ez/twimaster.c **** 
 123:keyboards/split70/ez/twimaster.c **** }/* i2c_start_wait */
 172               		.loc 1 123 0
 173 004c 0895      		ret
 174               		.cfi_endproc
 175               	.LFE2:
 177               		.section	.text.i2c_rep_start,"ax",@progbits
 178               	.global	i2c_rep_start
 180               	i2c_rep_start:
 181               	.LFB3:
 124:keyboards/split70/ez/twimaster.c **** 
 125:keyboards/split70/ez/twimaster.c **** 
 126:keyboards/split70/ez/twimaster.c **** /*************************************************************************
 127:keyboards/split70/ez/twimaster.c ****  Issues a repeated start condition and sends address and transfer direction 
 128:keyboards/split70/ez/twimaster.c **** 
 129:keyboards/split70/ez/twimaster.c ****  Input:   address and transfer direction of I2C device
 130:keyboards/split70/ez/twimaster.c ****  
 131:keyboards/split70/ez/twimaster.c ****  Return:  0 device accessible
 132:keyboards/split70/ez/twimaster.c ****           1 failed to access device
 133:keyboards/split70/ez/twimaster.c **** *************************************************************************/
 134:keyboards/split70/ez/twimaster.c **** unsigned char i2c_rep_start(unsigned char address)
 135:keyboards/split70/ez/twimaster.c **** {
 182               		.loc 1 135 0
 183               		.cfi_startproc
 184               	.LVL14:
 185               	/* prologue: function */
 186               	/* frame size = 0 */
 187               	/* stack size = 0 */
 188               	.L__stack_usage = 0
 136:keyboards/split70/ez/twimaster.c ****     return i2c_start( address );
 189               		.loc 1 136 0
 190 0000 0C94 0000 		jmp i2c_start
 191               	.LVL15:
 192               		.cfi_endproc
 193               	.LFE3:
 195               		.section	.text.i2c_stop,"ax",@progbits
 196               	.global	i2c_stop
 198               	i2c_stop:
 199               	.LFB4:
 137:keyboards/split70/ez/twimaster.c **** 
 138:keyboards/split70/ez/twimaster.c **** }/* i2c_rep_start */
 139:keyboards/split70/ez/twimaster.c **** 
 140:keyboards/split70/ez/twimaster.c **** 
 141:keyboards/split70/ez/twimaster.c **** /*************************************************************************
 142:keyboards/split70/ez/twimaster.c ****  Terminates the data transfer and releases the I2C bus
 143:keyboards/split70/ez/twimaster.c **** *************************************************************************/
 144:keyboards/split70/ez/twimaster.c **** void i2c_stop(void)
 145:keyboards/split70/ez/twimaster.c **** {
 200               		.loc 1 145 0
 201               		.cfi_startproc
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
 146:keyboards/split70/ez/twimaster.c ****     /* send stop condition */
 147:keyboards/split70/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 206               		.loc 1 147 0
 207 0000 84E9      		ldi r24,lo8(-108)
 208 0002 8093 BC00 		sts 188,r24
 209               	.L37:
 148:keyboards/split70/ez/twimaster.c **** 	
 149:keyboards/split70/ez/twimaster.c **** 	// wait until stop condition is executed and bus released
 150:keyboards/split70/ez/twimaster.c **** 	while(TWCR & (1<<TWSTO));
 210               		.loc 1 150 0 discriminator 1
 211 0006 8091 BC00 		lds r24,188
 212 000a 84FD      		sbrc r24,4
 213 000c 00C0      		rjmp .L37
 214               	/* epilogue start */
 151:keyboards/split70/ez/twimaster.c **** 
 152:keyboards/split70/ez/twimaster.c **** }/* i2c_stop */
 215               		.loc 1 152 0
 216 000e 0895      		ret
 217               		.cfi_endproc
 218               	.LFE4:
 220               		.section	.text.i2c_write,"ax",@progbits
 221               	.global	i2c_write
 223               	i2c_write:
 224               	.LFB5:
 153:keyboards/split70/ez/twimaster.c **** 
 154:keyboards/split70/ez/twimaster.c **** 
 155:keyboards/split70/ez/twimaster.c **** /*************************************************************************
 156:keyboards/split70/ez/twimaster.c ****   Send one byte to I2C device
 157:keyboards/split70/ez/twimaster.c ****   
 158:keyboards/split70/ez/twimaster.c ****   Input:    byte to be transfered
 159:keyboards/split70/ez/twimaster.c ****   Return:   0 write successful 
 160:keyboards/split70/ez/twimaster.c ****             1 write failed
 161:keyboards/split70/ez/twimaster.c **** *************************************************************************/
 162:keyboards/split70/ez/twimaster.c **** unsigned char i2c_write( unsigned char data )
 163:keyboards/split70/ez/twimaster.c **** {	
 225               		.loc 1 163 0
 226               		.cfi_startproc
 227               	.LVL16:
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 0 */
 231               	.L__stack_usage = 0
 164:keyboards/split70/ez/twimaster.c ****     uint8_t   twst;
 165:keyboards/split70/ez/twimaster.c ****     
 166:keyboards/split70/ez/twimaster.c **** 	// send data to the previously addressed device
 167:keyboards/split70/ez/twimaster.c **** 	TWDR = data;
 232               		.loc 1 167 0
 233 0000 8093 BB00 		sts 187,r24
 168:keyboards/split70/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 234               		.loc 1 168 0
 235 0004 84E8      		ldi r24,lo8(-124)
 236               	.LVL17:
 237 0006 8093 BC00 		sts 188,r24
 238               	.LVL18:
 239               	.L40:
 169:keyboards/split70/ez/twimaster.c **** 
 170:keyboards/split70/ez/twimaster.c **** 	// wait until transmission completed
 171:keyboards/split70/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
 240               		.loc 1 171 0 discriminator 1
 241 000a 8091 BC00 		lds r24,188
 242 000e 87FF      		sbrs r24,7
 243 0010 00C0      		rjmp .L40
 172:keyboards/split70/ez/twimaster.c **** 
 173:keyboards/split70/ez/twimaster.c **** 	// check value of TWI Status Register. Mask prescaler bits
 174:keyboards/split70/ez/twimaster.c **** 	twst = TW_STATUS & 0xF8;
 244               		.loc 1 174 0
 245 0012 9091 B900 		lds r25,185
 246               	.LVL19:
 247 0016 987F      		andi r25,lo8(-8)
 248               	.LVL20:
 175:keyboards/split70/ez/twimaster.c **** 	if( twst != TW_MT_DATA_ACK) return 1;
 249               		.loc 1 175 0
 250 0018 81E0      		ldi r24,lo8(1)
 251 001a 9832      		cpi r25,lo8(40)
 252 001c 01F4      		brne .L41
 253 001e 80E0      		ldi r24,0
 254               	.L41:
 255               	/* epilogue start */
 176:keyboards/split70/ez/twimaster.c **** 	return 0;
 177:keyboards/split70/ez/twimaster.c **** 
 178:keyboards/split70/ez/twimaster.c **** }/* i2c_write */
 256               		.loc 1 178 0
 257 0020 0895      		ret
 258               		.cfi_endproc
 259               	.LFE5:
 261               		.section	.text.i2c_readAck,"ax",@progbits
 262               	.global	i2c_readAck
 264               	i2c_readAck:
 265               	.LFB6:
 179:keyboards/split70/ez/twimaster.c **** 
 180:keyboards/split70/ez/twimaster.c **** 
 181:keyboards/split70/ez/twimaster.c **** /*************************************************************************
 182:keyboards/split70/ez/twimaster.c ****  Read one byte from the I2C device, request more data from device 
 183:keyboards/split70/ez/twimaster.c ****  
 184:keyboards/split70/ez/twimaster.c ****  Return:  byte read from I2C device
 185:keyboards/split70/ez/twimaster.c **** *************************************************************************/
 186:keyboards/split70/ez/twimaster.c **** unsigned char i2c_readAck(void)
 187:keyboards/split70/ez/twimaster.c **** {
 266               		.loc 1 187 0
 267               		.cfi_startproc
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
 188:keyboards/split70/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 272               		.loc 1 188 0
 273 0000 84EC      		ldi r24,lo8(-60)
 274 0002 8093 BC00 		sts 188,r24
 275               	.L44:
 189:keyboards/split70/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));    
 276               		.loc 1 189 0 discriminator 1
 277 0006 8091 BC00 		lds r24,188
 278 000a 87FF      		sbrs r24,7
 279 000c 00C0      		rjmp .L44
 190:keyboards/split70/ez/twimaster.c **** 
 191:keyboards/split70/ez/twimaster.c ****     return TWDR;
 280               		.loc 1 191 0
 281 000e 8091 BB00 		lds r24,187
 282               	/* epilogue start */
 192:keyboards/split70/ez/twimaster.c **** 
 193:keyboards/split70/ez/twimaster.c **** }/* i2c_readAck */
 283               		.loc 1 193 0
 284 0012 0895      		ret
 285               		.cfi_endproc
 286               	.LFE6:
 288               		.section	.text.i2c_readNak,"ax",@progbits
 289               	.global	i2c_readNak
 291               	i2c_readNak:
 292               	.LFB7:
 194:keyboards/split70/ez/twimaster.c **** 
 195:keyboards/split70/ez/twimaster.c **** 
 196:keyboards/split70/ez/twimaster.c **** /*************************************************************************
 197:keyboards/split70/ez/twimaster.c ****  Read one byte from the I2C device, read is followed by a stop condition 
 198:keyboards/split70/ez/twimaster.c ****  
 199:keyboards/split70/ez/twimaster.c ****  Return:  byte read from I2C device
 200:keyboards/split70/ez/twimaster.c **** *************************************************************************/
 201:keyboards/split70/ez/twimaster.c **** unsigned char i2c_readNak(void)
 202:keyboards/split70/ez/twimaster.c **** {
 293               		.loc 1 202 0
 294               		.cfi_startproc
 295               	/* prologue: function */
 296               	/* frame size = 0 */
 297               	/* stack size = 0 */
 298               	.L__stack_usage = 0
 203:keyboards/split70/ez/twimaster.c **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 299               		.loc 1 203 0
 300 0000 84E8      		ldi r24,lo8(-124)
 301 0002 8093 BC00 		sts 188,r24
 302               	.L47:
 204:keyboards/split70/ez/twimaster.c **** 	while(!(TWCR & (1<<TWINT)));
 303               		.loc 1 204 0 discriminator 1
 304 0006 8091 BC00 		lds r24,188
 305 000a 87FF      		sbrs r24,7
 306 000c 00C0      		rjmp .L47
 205:keyboards/split70/ez/twimaster.c **** 	
 206:keyboards/split70/ez/twimaster.c ****     return TWDR;
 307               		.loc 1 206 0
 308 000e 8091 BB00 		lds r24,187
 309               	/* epilogue start */
 207:keyboards/split70/ez/twimaster.c **** 
 208:keyboards/split70/ez/twimaster.c **** }/* i2c_readNak */
 310               		.loc 1 208 0
 311 0012 0895      		ret
 312               		.cfi_endproc
 313               	.LFE7:
 315               		.text
 316               	.Letext0:
 317               		.file 2 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 twimaster.c
     /tmp/cc647hyz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc647hyz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc647hyz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc647hyz.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc647hyz.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc647hyz.s:13     .text.i2c_init:0000000000000000 i2c_init
     /tmp/cc647hyz.s:36     .text.i2c_start:0000000000000000 i2c_start
     /tmp/cc647hyz.s:105    .text.i2c_start_wait:0000000000000000 i2c_start_wait
     /tmp/cc647hyz.s:180    .text.i2c_rep_start:0000000000000000 i2c_rep_start
     /tmp/cc647hyz.s:198    .text.i2c_stop:0000000000000000 i2c_stop
     /tmp/cc647hyz.s:223    .text.i2c_write:0000000000000000 i2c_write
     /tmp/cc647hyz.s:264    .text.i2c_readAck:0000000000000000 i2c_readAck
     /tmp/cc647hyz.s:291    .text.i2c_readNak:0000000000000000 i2c_readNak

NO UNDEFINED SYMBOLS
