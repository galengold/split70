   1               		.file	"ez.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_kb,"ax",@progbits
  11               	.global	matrix_init_kb
  13               	matrix_init_kb:
  14               	.LFB107:
  15               		.file 1 "keyboards/split70/ez/ez.c"
   1:keyboards/split70/ez/ez.c **** #include "ez.h"
   2:keyboards/split70/ez/ez.c **** #include "i2cmaster.h"
   3:keyboards/split70/ez/ez.c **** 
   4:keyboards/split70/ez/ez.c **** bool i2c_initialized = 0;
   5:keyboards/split70/ez/ez.c **** uint8_t mcp23018_status = 0x20;
   6:keyboards/split70/ez/ez.c **** 
   7:keyboards/split70/ez/ez.c **** void matrix_init_kb(void) {
  16               		.loc 1 7 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
   8:keyboards/split70/ez/ez.c **** 
   9:keyboards/split70/ez/ez.c ****     // (tied to Vcc for hardware convenience)
  10:keyboards/split70/ez/ez.c ****     DDRB  &= ~(1<<4);  // set B(4) as input
  22               		.loc 1 10 0
  23 0000 2498      		cbi 0x4,4
  11:keyboards/split70/ez/ez.c ****     PORTB &= ~(1<<4);  // set B(4) internal pull-up disabled
  24               		.loc 1 11 0
  25 0002 2C98      		cbi 0x5,4
  12:keyboards/split70/ez/ez.c **** 
  13:keyboards/split70/ez/ez.c ****     // unused pins - C7, D4, D5, D7, E6
  14:keyboards/split70/ez/ez.c ****     // set as input with internal pull-ip enabled
  15:keyboards/split70/ez/ez.c ****     DDRC  &= ~(1<<7 | 1<<6);
  26               		.loc 1 15 0
  27 0004 87B1      		in r24,0x7
  28 0006 8F73      		andi r24,lo8(63)
  29 0008 87B9      		out 0x7,r24
  16:keyboards/split70/ez/ez.c ****     DDRD  &= ~(1<<7 | 1<<5 | 1<<4);
  30               		.loc 1 16 0
  31 000a 8AB1      		in r24,0xa
  32 000c 8F74      		andi r24,lo8(79)
  33 000e 8AB9      		out 0xa,r24
  17:keyboards/split70/ez/ez.c ****     DDRE  &= ~(1<<6);
  34               		.loc 1 17 0
  35 0010 6E98      		cbi 0xd,6
  18:keyboards/split70/ez/ez.c ****     PORTC |=  (1<<7 | 1<<6);
  36               		.loc 1 18 0
  37 0012 88B1      		in r24,0x8
  38 0014 806C      		ori r24,lo8(-64)
  39 0016 88B9      		out 0x8,r24
  19:keyboards/split70/ez/ez.c ****     PORTD |=  (1<<7 | 1<<5 | 1<<4);
  40               		.loc 1 19 0
  41 0018 8BB1      		in r24,0xb
  42 001a 806B      		ori r24,lo8(-80)
  43 001c 8BB9      		out 0xb,r24
  20:keyboards/split70/ez/ez.c ****     PORTE |=  (1<<6);
  44               		.loc 1 20 0
  45 001e 769A      		sbi 0xe,6
  21:keyboards/split70/ez/ez.c **** 
  22:keyboards/split70/ez/ez.c ****     matrix_init_user();
  46               		.loc 1 22 0
  47 0020 0C94 0000 		jmp matrix_init_user
  48               	.LVL0:
  49               		.cfi_endproc
  50               	.LFE107:
  52               		.section	.text.init_mcp23018,"ax",@progbits
  53               	.global	init_mcp23018
  55               	init_mcp23018:
  56               	.LFB108:
  23:keyboards/split70/ez/ez.c **** }
  24:keyboards/split70/ez/ez.c **** 
  25:keyboards/split70/ez/ez.c **** uint8_t init_mcp23018(void) {
  57               		.loc 1 25 0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  26:keyboards/split70/ez/ez.c ****     mcp23018_status = 0x20;
  63               		.loc 1 26 0
  64 0000 80E2      		ldi r24,lo8(32)
  65 0002 8093 0000 		sts mcp23018_status,r24
  27:keyboards/split70/ez/ez.c **** 
  28:keyboards/split70/ez/ez.c ****     // I2C subsystem
  29:keyboards/split70/ez/ez.c **** 
  30:keyboards/split70/ez/ez.c ****     // uint8_t sreg_prev;
  31:keyboards/split70/ez/ez.c ****     // sreg_prev=SREG;
  32:keyboards/split70/ez/ez.c ****     // cli();
  33:keyboards/split70/ez/ez.c ****     if (i2c_initialized == 0) {
  66               		.loc 1 33 0
  67 0006 8091 0000 		lds r24,i2c_initialized
  68 000a 8111      		cpse r24,__zero_reg__
  69 000c 00C0      		rjmp .L3
  34:keyboards/split70/ez/ez.c ****         i2c_init();  // on pins D(1,0)
  70               		.loc 1 34 0
  71 000e 0E94 0000 		call i2c_init
  72               	.LVL1:
  35:keyboards/split70/ez/ez.c ****         i2c_initialized++;
  73               		.loc 1 35 0
  74 0012 81E0      		ldi r24,lo8(1)
  75 0014 8093 0000 		sts i2c_initialized,r24
  76               	.LVL2:
  77               	.LBB4:
  78               	.LBB5:
  79               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  80               		.loc 2 187 0
  81 0018 2FEF      		ldi r18,lo8(3199999)
  82 001a 83ED      		ldi r24,hi8(3199999)
  83 001c 90E3      		ldi r25,hlo8(3199999)
  84 001e 2150      	1:	subi r18,1
  85 0020 8040      		sbci r24,0
  86 0022 9040      		sbci r25,0
  87 0024 01F4      		brne 1b
  88 0026 00C0      		rjmp .
  89 0028 0000      		nop
  90               	.LVL3:
  91               	.L3:
  92               	.LBE5:
  93               	.LBE4:
  36:keyboards/split70/ez/ez.c ****         _delay_ms(1000);
  37:keyboards/split70/ez/ez.c ****     }
  38:keyboards/split70/ez/ez.c **** 
  39:keyboards/split70/ez/ez.c ****     // set pin direction
  40:keyboards/split70/ez/ez.c ****     // - unused  : input  : 1
  41:keyboards/split70/ez/ez.c ****     // - input   : input  : 1
  42:keyboards/split70/ez/ez.c ****     // - driving : output : 0
  43:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
  94               		.loc 1 43 0
  95 002a 80E4      		ldi r24,lo8(64)
  96 002c 0E94 0000 		call i2c_start
  97               	.LVL4:
  98 0030 8093 0000 		sts mcp23018_status,r24
  99 0034 8111      		cpse r24,__zero_reg__
 100 0036 00C0      		rjmp .L5
  44:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_write(IODIRA);            if (mcp23018_status) goto out;
 101               		.loc 1 44 0
 102 0038 0E94 0000 		call i2c_write
 103               	.LVL5:
 104 003c 8093 0000 		sts mcp23018_status,r24
 105 0040 8111      		cpse r24,__zero_reg__
 106 0042 00C0      		rjmp .L5
  45:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
 107               		.loc 1 45 0
 108 0044 0E94 0000 		call i2c_write
 109               	.LVL6:
 110 0048 8093 0000 		sts mcp23018_status,r24
 111 004c 8111      		cpse r24,__zero_reg__
 112 004e 00C0      		rjmp .L5
  46:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
 113               		.loc 1 46 0
 114 0050 8FE3      		ldi r24,lo8(63)
 115 0052 0E94 0000 		call i2c_write
 116               	.LVL7:
 117 0056 8093 0000 		sts mcp23018_status,r24
 118 005a 8111      		cpse r24,__zero_reg__
 119 005c 00C0      		rjmp .L5
  47:keyboards/split70/ez/ez.c ****     i2c_stop();
 120               		.loc 1 47 0
 121 005e 0E94 0000 		call i2c_stop
 122               	.LVL8:
  48:keyboards/split70/ez/ez.c **** 
  49:keyboards/split70/ez/ez.c ****     // set pull-up
  50:keyboards/split70/ez/ez.c ****     // - unused  : on  : 1
  51:keyboards/split70/ez/ez.c ****     // - input   : on  : 1
  52:keyboards/split70/ez/ez.c ****     // - driving : off : 0
  53:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
 123               		.loc 1 53 0
 124 0062 80E4      		ldi r24,lo8(64)
 125 0064 0E94 0000 		call i2c_start
 126               	.LVL9:
 127 0068 8093 0000 		sts mcp23018_status,r24
 128 006c 8111      		cpse r24,__zero_reg__
 129 006e 00C0      		rjmp .L5
  54:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_write(GPPUA);             if (mcp23018_status) goto out;
 130               		.loc 1 54 0
 131 0070 8CE0      		ldi r24,lo8(12)
 132 0072 0E94 0000 		call i2c_write
 133               	.LVL10:
 134 0076 8093 0000 		sts mcp23018_status,r24
 135 007a 8111      		cpse r24,__zero_reg__
 136 007c 00C0      		rjmp .L5
  55:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
 137               		.loc 1 55 0
 138 007e 0E94 0000 		call i2c_write
 139               	.LVL11:
 140 0082 8093 0000 		sts mcp23018_status,r24
 141 0086 8111      		cpse r24,__zero_reg__
 142 0088 00C0      		rjmp .L5
  56:keyboards/split70/ez/ez.c ****     mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
 143               		.loc 1 56 0
 144 008a 8FE3      		ldi r24,lo8(63)
 145 008c 0E94 0000 		call i2c_write
 146               	.LVL12:
 147 0090 8093 0000 		sts mcp23018_status,r24
 148               	.L5:
  57:keyboards/split70/ez/ez.c **** 
  58:keyboards/split70/ez/ez.c **** out:
  59:keyboards/split70/ez/ez.c ****     i2c_stop();
 149               		.loc 1 59 0
 150 0094 0E94 0000 		call i2c_stop
 151               	.LVL13:
  60:keyboards/split70/ez/ez.c **** 
  61:keyboards/split70/ez/ez.c ****     // SREG=sreg_prev;
  62:keyboards/split70/ez/ez.c **** 
  63:keyboards/split70/ez/ez.c ****     return mcp23018_status;
  64:keyboards/split70/ez/ez.c **** }
 152               		.loc 1 64 0
 153 0098 8091 0000 		lds r24,mcp23018_status
 154               	/* epilogue start */
 155 009c 0895      		ret
 156               		.cfi_endproc
 157               	.LFE108:
 159               	.global	mcp23018_status
 160               		.section	.data.mcp23018_status,"aw",@progbits
 163               	mcp23018_status:
 164 0000 20        		.byte	32
 165               	.global	i2c_initialized
 166               		.section	.bss.i2c_initialized,"aw",@nobits
 169               	i2c_initialized:
 170 0000 00        		.zero	1
 171               		.text
 172               	.Letext0:
 173               		.file 3 "/usr/avr/include/stdint.h"
 174               		.file 4 "/usr/lib/gcc/avr/7.1.0/include/stddef.h"
 175               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 176               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 177               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 178               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 179               		.file 9 "/usr/avr/include/stdio.h"
 180               		.file 10 "./tmk_core/common/report.h"
 181               		.file 11 "./tmk_core/common/host.h"
 182               		.file 12 "./tmk_core/common/debug.h"
 183               		.file 13 "./quantum/keycode_config.h"
 184               		.file 14 "./quantum/keymap.h"
 185               		.file 15 "./tmk_core/common/action_layer.h"
 186               		.file 16 "./tmk_core/common/timer.h"
 187               		.file 17 "./tmk_core/common/action_util.h"
 188               		.file 18 "/usr/avr/include/stdlib.h"
 189               		.file 19 "keyboards/split70/ez/ez.h"
 190               		.file 20 "./quantum/process_keycode/process_unicode_common.h"
 191               		.file 21 "keyboards/split70/ez/i2cmaster.h"
 192               		.file 22 "./quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ez.c
     /tmp/ccGZAJnV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGZAJnV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGZAJnV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGZAJnV.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGZAJnV.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGZAJnV.s:13     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/ccGZAJnV.s:55     .text.init_mcp23018:0000000000000000 init_mcp23018
     /tmp/ccGZAJnV.s:163    .data.mcp23018_status:0000000000000000 mcp23018_status
     /tmp/ccGZAJnV.s:169    .bss.i2c_initialized:0000000000000000 i2c_initialized

UNDEFINED SYMBOLS
matrix_init_user
i2c_init
i2c_start
i2c_write
i2c_stop
__do_copy_data
__do_clear_bss
